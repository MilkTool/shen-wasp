(module "compiled/dict.kl")
"Copyright (c) 2010-2015, Mark Tarver\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation\nand/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
(begin (register-function-arity (quote shen.dict) 1) (define (kl:shen.dict V3445) (cond ((< V3445 1) (simple-error (string-append "invalid initial dict size: " (kl:shen.app V3445 "" (quote shen.s))))) (#t (let ((D (make-vector (+ 3 V3445) (quote (quote shen.fail!))))) (let ((Tag (let ((_tmp D)) (vector-set! _tmp 0 (quote shen.dictionary)) _tmp))) (let ((Capacity (let ((_tmp D)) (vector-set! _tmp 1 V3445) _tmp))) (let ((Count (let ((_tmp D)) (vector-set! _tmp 2 0) _tmp))) (let ((Fill (kl:shen.fillvector D 3 (+ 2 V3445) (quote ())))) D)))))))) (export shen.dict) (quote shen.dict))
(begin (register-function-arity (quote shen.dict?) 1) (define (kl:shen.dict? V3447) (and (vector? V3447) (eq? (guard (lambda (E) (quote shen.not-dictionary)) (vector-ref V3447 0)) (quote shen.dictionary)))) (export shen.dict?) (quote shen.dict?))
(begin (register-function-arity (quote shen.dict-capacity) 1) (define (kl:shen.dict-capacity V3449) (vector-ref V3449 1)) (export shen.dict-capacity) (quote shen.dict-capacity))
(begin (register-function-arity (quote shen.dict-count) 1) (define (kl:shen.dict-count V3451) (vector-ref V3451 2)) (export shen.dict-count) (quote shen.dict-count))
(begin (register-function-arity (quote shen.dict-count->) 2) (define (kl:shen.dict-count-> V3454 V3455) (let ((_tmp V3454)) (vector-set! _tmp 2 V3455) _tmp)) (export shen.dict-count->) (quote shen.dict-count->))
(begin (register-function-arity (quote shen.<-dict-bucket) 2) (define (kl:shen.<-dict-bucket V3458 V3459) (vector-ref V3458 (+ 3 V3459))) (export shen.<-dict-bucket) (quote shen.<-dict-bucket))
(begin (register-function-arity (quote shen.dict-bucket->) 3) (define (kl:shen.dict-bucket-> V3463 V3464 V3465) (let ((_tmp V3463)) (vector-set! _tmp (+ 3 V3464) V3465) _tmp)) (export shen.dict-bucket->) (quote shen.dict-bucket->))
(begin (register-function-arity (quote shen.dict-update-count) 3) (define (kl:shen.dict-update-count V3469 V3470 V3471) (let ((Diff (- (kl:length V3471) (kl:length V3470)))) (kl:shen.dict-count-> V3469 (+ Diff (kl:shen.dict-count V3469))))) (export shen.dict-update-count) (quote shen.dict-update-count))
(begin (register-function-arity (quote shen.dict->) 3) (define (kl:shen.dict-> V3475 V3476 V3477) (let ((N (kl:hash V3476 (kl:shen.dict-capacity V3475)))) (let ((Bucket (kl:shen.<-dict-bucket V3475 N))) (let ((NewBucket (kl:shen.assoc-set V3476 V3477 Bucket))) (let ((Change (kl:shen.dict-bucket-> V3475 N NewBucket))) (let ((Count (kl:shen.dict-update-count V3475 Bucket NewBucket))) V3477)))))) (export shen.dict->) (quote shen.dict->))
(begin (register-function-arity (quote shen.<-dict) 2) (define (kl:shen.<-dict V3480 V3481) (let ((N (kl:hash V3481 (kl:shen.dict-capacity V3480)))) (let ((Bucket (kl:shen.<-dict-bucket V3480 N))) (let ((Result (kl:assoc V3481 Bucket))) (if (kl:empty? Result) (simple-error (string-append "value " (kl:shen.app V3481 " not found in dict\n" (quote shen.a)))) (cdr Result)))))) (export shen.<-dict) (quote shen.<-dict))
(begin (register-function-arity (quote shen.dict-rm) 2) (define (kl:shen.dict-rm V3484 V3485) (let ((N (kl:hash V3485 (kl:shen.dict-capacity V3484)))) (let ((Bucket (kl:shen.<-dict-bucket V3484 N))) (let ((NewBucket (kl:shen.assoc-rm V3485 Bucket))) (let ((Change (kl:shen.dict-bucket-> V3484 N NewBucket))) (let ((Count (kl:shen.dict-update-count V3484 Bucket NewBucket))) V3485)))))) (export shen.dict-rm) (quote shen.dict-rm))
(begin (register-function-arity (quote shen.dict-fold) 3) (define (kl:shen.dict-fold V3489 V3490 V3491) (let ((Limit (kl:shen.dict-capacity V3490))) (kl:shen.dict-fold-h V3489 V3490 V3491 0 Limit))) (export shen.dict-fold) (quote shen.dict-fold))
(begin (register-function-arity (quote shen.dict-fold-h) 5) (define (kl:shen.dict-fold-h V3498 V3499 V3500 V3501 V3502) (cond ((kl:= V3502 V3501) V3500) (#t (let ((B (kl:shen.<-dict-bucket V3499 V3501))) (let ((Acc (kl:shen.bucket-fold V3498 B V3500))) (kl:shen.dict-fold-h V3498 V3499 Acc (+ 1 V3501) V3502)))))) (export shen.dict-fold-h) (quote shen.dict-fold-h))
(begin (register-function-arity (quote shen.bucket-fold) 3) (define (kl:shen.bucket-fold V3506 V3507 V3508) (cond ((null? V3507) V3508) ((and (pair? V3507) (pair? (car V3507))) (((V3506 (car (car V3507))) (cdr (car V3507))) (kl:shen.bucket-fold V3506 (cdr V3507) V3508))) (#t (kl:shen.f_error (quote shen.bucket-fold))))) (export shen.bucket-fold) (quote shen.bucket-fold))
(begin (register-function-arity (quote shen.dict-keys) 1) (define (kl:shen.dict-keys V3510) (kl:shen.dict-fold (lambda (K) (lambda (_) (lambda (Acc) (cons K Acc)))) V3510 (quote ()))) (export shen.dict-keys) (quote shen.dict-keys))
(begin (register-function-arity (quote shen.dict-values) 1) (define (kl:shen.dict-values V3512) (kl:shen.dict-fold (lambda (_) (lambda (V) (lambda (Acc) (cons V Acc)))) V3512 (quote ()))) (export shen.dict-values) (quote shen.dict-values))
