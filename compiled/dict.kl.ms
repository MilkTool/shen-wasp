"Copyright (c) 2015, Mark Tarver\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n3. The name of Mark Tarver may not be used to endorse or promote products\n   derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
(begin (register-function-arity (quote shen.dict) 1) (define (kl:shen.dict V3099) (cond ((< V3099 1) (simple-error (string-append "invalid initial dict size: " (kl:shen.app V3099 "" (quote shen.s))))) (#t (let ((D (make-vector (+ 3 V3099) (quote (quote shen.fail!))))) (let ((Tag (let ((_tmp D)) (vector-set! _tmp 0 (quote shen.dictionary)) _tmp))) (let ((Capacity (let ((_tmp D)) (vector-set! _tmp 1 V3099) _tmp))) (let ((Count (let ((_tmp D)) (vector-set! _tmp 2 0) _tmp))) (let ((Fill (kl:shen.fillvector D 3 (+ 2 V3099) (quote ())))) D)))))))) (quote shen.dict))
(begin (register-function-arity (quote shen.dict?) 1) (define (kl:shen.dict? V3101) (and (vector? V3101) (eq? (guard (lambda (E) (quote shen.not-dictionary)) (vector-ref V3101 0)) (quote shen.dictionary)))) (quote shen.dict?))
(begin (register-function-arity (quote shen.dict-capacity) 1) (define (kl:shen.dict-capacity V3103) (vector-ref V3103 1)) (quote shen.dict-capacity))
(begin (register-function-arity (quote shen.dict-count) 1) (define (kl:shen.dict-count V3105) (vector-ref V3105 2)) (quote shen.dict-count))
(begin (register-function-arity (quote shen.dict-count->) 2) (define (kl:shen.dict-count-> V3108 V3109) (let ((_tmp V3108)) (vector-set! _tmp 2 V3109) _tmp)) (quote shen.dict-count->))
(begin (register-function-arity (quote shen.<-dict-bucket) 2) (define (kl:shen.<-dict-bucket V3112 V3113) (vector-ref V3112 (+ 3 V3113))) (quote shen.<-dict-bucket))
(begin (register-function-arity (quote shen.dict-bucket->) 3) (define (kl:shen.dict-bucket-> V3117 V3118 V3119) (let ((_tmp V3117)) (vector-set! _tmp (+ 3 V3118) V3119) _tmp)) (quote shen.dict-bucket->))
(begin (register-function-arity (quote shen.dict-update-count) 3) (define (kl:shen.dict-update-count V3123 V3124 V3125) (let ((Diff (- (kl:length V3125) (kl:length V3124)))) (kl:shen.dict-count-> V3123 (+ Diff (kl:shen.dict-count V3123))))) (quote shen.dict-update-count))
(begin (register-function-arity (quote shen.dict->) 3) (define (kl:shen.dict-> V3129 V3130 V3131) (let ((N (kl:hash V3130 (kl:shen.dict-capacity V3129)))) (let ((Bucket (kl:shen.<-dict-bucket V3129 N))) (let ((NewBucket (kl:shen.assoc-set V3130 V3131 Bucket))) (let ((Change (kl:shen.dict-bucket-> V3129 N NewBucket))) (let ((Count (kl:shen.dict-update-count V3129 Bucket NewBucket))) V3131)))))) (quote shen.dict->))
(begin (register-function-arity (quote shen.<-dict) 2) (define (kl:shen.<-dict V3134 V3135) (let ((N (kl:hash V3135 (kl:shen.dict-capacity V3134)))) (let ((Bucket (kl:shen.<-dict-bucket V3134 N))) (let ((Result (kl:assoc V3135 Bucket))) (if (kl:empty? Result) (simple-error (string-append "value " (kl:shen.app V3135 " not found in dict\n" (quote shen.a)))) (cdr Result)))))) (quote shen.<-dict))
(begin (register-function-arity (quote shen.dict-rm) 2) (define (kl:shen.dict-rm V3138 V3139) (let ((N (kl:hash V3139 (kl:shen.dict-capacity V3138)))) (let ((Bucket (kl:shen.<-dict-bucket V3138 N))) (let ((NewBucket (kl:shen.assoc-rm V3139 Bucket))) (let ((Change (kl:shen.dict-bucket-> V3138 N NewBucket))) (let ((Count (kl:shen.dict-update-count V3138 Bucket NewBucket))) V3139)))))) (quote shen.dict-rm))
(begin (register-function-arity (quote shen.dict-fold) 3) (define (kl:shen.dict-fold V3143 V3144 V3145) (let ((Limit (kl:shen.dict-capacity V3144))) (kl:shen.dict-fold-h V3143 V3144 V3145 0 Limit))) (quote shen.dict-fold))
(begin (register-function-arity (quote shen.dict-fold-h) 5) (define (kl:shen.dict-fold-h V3152 V3153 V3154 V3155 V3156) (cond ((kl:= V3156 V3155) V3154) (#t (let ((B (kl:shen.<-dict-bucket V3153 V3155))) (let ((Acc (kl:shen.bucket-fold V3152 B V3154))) (kl:shen.dict-fold-h V3152 V3153 Acc (+ 1 V3155) V3156)))))) (quote shen.dict-fold-h))
(begin (register-function-arity (quote shen.bucket-fold) 3) (define (kl:shen.bucket-fold V3160 V3161 V3162) (cond ((null? V3161) V3162) ((and (pair? V3161) (pair? (car V3161))) (((V3160 (car (car V3161))) (cdr (car V3161))) (kl:shen.bucket-fold V3160 (cdr V3161) V3162))) (#t (kl:shen.f_error (quote shen.bucket-fold))))) (quote shen.bucket-fold))
(begin (register-function-arity (quote shen.dict-keys) 1) (define (kl:shen.dict-keys V3164) (kl:shen.dict-fold (lambda (K) (lambda (_) (lambda (Acc) (cons K Acc)))) V3164 (quote ()))) (quote shen.dict-keys))
(begin (register-function-arity (quote shen.dict-values) 1) (define (kl:shen.dict-values V3166) (kl:shen.dict-fold (lambda (_) (lambda (V) (lambda (Acc) (cons V Acc)))) V3166 (quote ()))) (quote shen.dict-values))
