(module "compiled/extension-launcher.kl")
"Copyright (c) 2019 Bruno Deferrari.\nBSD 3-Clause License: http://opensource.org/licenses/BSD-3-Clause"
(begin (register-function-arity (quote shen.x.launcher.quiet-load) 1) (define (kl:shen.x.launcher.quiet-load V5994) (let ((Contents (kl:read-file V5994))) (kl:map (lambda (X) (kl:shen.eval-without-macros X)) Contents))) (export shen.x.launcher.quiet-load) (quote shen.x.launcher.quiet-load))
(begin (register-function-arity (quote shen.x.launcher.version-string) 0) (define (kl:shen.x.launcher.version-string) (kl:shen.app (kl:version) (string-append " " (kl:shen.app (cons (quote port) (cons (cons (kl:language) (cons (kl:port) (quote ()))) (cons (quote implementation) (cons (cons (kl:implementation) (cons (kl:release) (quote ()))) (quote ()))))) "\n" (quote shen.r))) (quote shen.a))) (export shen.x.launcher.version-string) (quote shen.x.launcher.version-string))
(begin (register-function-arity (quote shen.x.launcher.help-text) 1) (define (kl:shen.x.launcher.help-text V5996) (string-append "Usage: " (kl:shen.app V5996 " [--version] [--help] <COMMAND> [<ARGS>]\n\ncommands:\n    repl\n        Launches the interactive REPL.\n        Default action if no command is supplied.\n\n    script <FILE> [<ARGS>]\n        Runs the script in FILE. *argv* is set to [FILE | ARGS].\n\n    eval <ARGS>\n        Evaluates expressions and files. ARGS are evaluated from\n        left to right and can be a combination of:\n            -e, --eval <EXPR>\n                Evaluates EXPR and prints result.\n            -l, --load <FILE>\n                Reads and evaluates FILE.\n            -q, --quiet\n                Silences interactive output.\n            -s, --set <KEY> <VALUE>\n                Evaluates KEY, VALUE and sets as global.\n            -r, --repl\n                Launches the interactive REPL after evaluating\n                all the previous expresions." (quote shen.a)))) (export shen.x.launcher.help-text) (quote shen.x.launcher.help-text))
(begin (register-function-arity (quote shen.x.launcher.execute-all) 1) (define (kl:shen.x.launcher.execute-all V5998) (cond ((null? V5998) (cons (quote success) (quote ()))) ((pair? V5998) (begin (kl:thaw (car V5998)) (kl:shen.x.launcher.execute-all (cdr V5998)))) (#t (kl:shen.f_error (quote shen.x.launcher.execute-all))))) (export shen.x.launcher.execute-all) (quote shen.x.launcher.execute-all))
(begin (register-function-arity (quote shen.x.launcher.eval-string) 1) (define (kl:shen.x.launcher.eval-string V6000) (kl:eval (kl:head (kl:read-from-string V6000)))) (export shen.x.launcher.eval-string) (quote shen.x.launcher.eval-string))
(begin (register-function-arity (quote shen.x.launcher.eval-flag-map) 1) (define (kl:shen.x.launcher.eval-flag-map V6006) (cond ((equal? "-e" V6006) "--eval") ((equal? "-l" V6006) "--load") ((equal? "-q" V6006) "--quiet") ((equal? "-s" V6006) "--set") ((equal? "-r" V6006) "--repl") (#t #f))) (export shen.x.launcher.eval-flag-map) (quote shen.x.launcher.eval-flag-map))
(begin (register-function-arity (quote shen.x.launcher.eval-command-h) 2) (define (kl:shen.x.launcher.eval-command-h V6017 V6018) (cond ((null? V6017) (kl:shen.x.launcher.execute-all (kl:reverse V6018))) ((and (pair? V6017) (and (equal? "--eval" (car V6017)) (pair? (cdr V6017)))) (kl:shen.x.launcher.eval-command-h (cdr (cdr V6017)) (cons (lambda () (kl:shen.prhush (kl:shen.app (kl:shen.x.launcher.eval-string (car (cdr V6017))) "\n" (quote shen.a)) (kl:stoutput))) V6018))) ((and (pair? V6017) (and (equal? "--load" (car V6017)) (pair? (cdr V6017)))) (kl:shen.x.launcher.eval-command-h (cdr (cdr V6017)) (cons (lambda () (kl:load (car (cdr V6017)))) V6018))) ((and (pair? V6017) (equal? "--quiet" (car V6017))) (kl:shen.x.launcher.eval-command-h (cdr V6017) (cons (lambda () (kl:set (quote *hush*) #t)) V6018))) ((and (pair? V6017) (and (equal? "--set" (car V6017)) (and (pair? (cdr V6017)) (pair? (cdr (cdr V6017)))))) (kl:shen.x.launcher.eval-command-h (cdr (cdr (cdr V6017))) (cons (lambda () (kl:set (kl:shen.x.launcher.eval-string (car (cdr V6017))) (kl:shen.x.launcher.eval-string (car (cdr (cdr V6017)))))) V6018))) ((and (pair? V6017) (equal? "--repl" (car V6017))) (begin (kl:shen.x.launcher.eval-command-h (quote ()) V6018) (cons (quote launch-repl) (cdr V6017)))) (#t (let ((Freeze (lambda () (cond ((pair? V6017) (cons (quote error) (cons (string-append "Invalid eval argument: " (kl:shen.app (car V6017) "" (quote shen.a))) (quote ())))) (#t (kl:shen.f_error (quote shen.x.launcher.eval-command-h))))))) (if (pair? V6017) (let ((Result (let ((Long (kl:shen.x.launcher.eval-flag-map (car V6017)))) (if (kl:= #f Long) (kl:fail) (kl:shen.x.launcher.eval-command-h (cons Long (cdr V6017)) V6018))))) (if (kl:= Result (kl:fail)) (kl:thaw Freeze) Result)) (kl:thaw Freeze)))))) (export shen.x.launcher.eval-command-h) (quote shen.x.launcher.eval-command-h))
(begin (register-function-arity (quote shen.x.launcher.eval-command) 1) (define (kl:shen.x.launcher.eval-command V6020) (kl:shen.x.launcher.eval-command-h V6020 (quote ()))) (export shen.x.launcher.eval-command) (quote shen.x.launcher.eval-command))
(begin (register-function-arity (quote shen.x.launcher.script-command) 2) (define (kl:shen.x.launcher.script-command V6023 V6024) (begin (kl:set (quote *argv*) (cons V6023 V6024)) (begin (kl:shen.x.launcher.quiet-load V6023) (cons (quote success) (quote ()))))) (export shen.x.launcher.script-command) (quote shen.x.launcher.script-command))
(begin (register-function-arity (quote shen.x.launcher.launch-shen) 1) (define (kl:shen.x.launcher.launch-shen V6026) (cond ((and (pair? V6026) (null? (cdr V6026))) (cons (quote launch-repl) (quote ()))) ((and (pair? V6026) (and (pair? (cdr V6026)) (equal? "--help" (car (cdr V6026))))) (cons (quote show-help) (cons (kl:shen.x.launcher.help-text (car V6026)) (quote ())))) ((and (pair? V6026) (and (pair? (cdr V6026)) (equal? "--version" (car (cdr V6026))))) (cons (quote success) (cons (kl:shen.x.launcher.version-string) (quote ())))) ((and (pair? V6026) (and (pair? (cdr V6026)) (equal? "repl" (car (cdr V6026))))) (cons (quote launch-repl) (cdr (cdr V6026)))) ((and (pair? V6026) (and (pair? (cdr V6026)) (and (equal? "script" (car (cdr V6026))) (pair? (cdr (cdr V6026)))))) (kl:shen.x.launcher.script-command (car (cdr (cdr V6026))) (cdr (cdr (cdr V6026))))) ((and (pair? V6026) (and (pair? (cdr V6026)) (equal? "eval" (car (cdr V6026))))) (kl:shen.x.launcher.eval-command (cdr (cdr V6026)))) ((and (pair? V6026) (pair? (cdr V6026))) (cons (quote unknown-arguments) V6026)) (#t (kl:shen.f_error (quote shen.x.launcher.launch-shen))))) (export shen.x.launcher.launch-shen) (quote shen.x.launcher.launch-shen))
(begin (register-function-arity (quote shen.x.launcher.default-handle-result) 1) (define (kl:shen.x.launcher.default-handle-result V6030) (cond ((and (pair? V6030) (and (eq? (quote success) (car V6030)) (null? (cdr V6030)))) (quote shen.x.launcher.done)) ((and (pair? V6030) (and (eq? (quote success) (car V6030)) (and (pair? (cdr V6030)) (null? (cdr (cdr V6030)))))) (kl:shen.prhush (kl:shen.app (car (cdr V6030)) "\n" (quote shen.a)) (kl:stoutput))) ((and (pair? V6030) (and (eq? (quote error) (car V6030)) (and (pair? (cdr V6030)) (null? (cdr (cdr V6030)))))) (kl:shen.prhush (string-append "ERROR: " (kl:shen.app (car (cdr V6030)) "\n" (quote shen.a))) (kl:stoutput))) ((and (pair? V6030) (eq? (quote launch-repl) (car V6030))) (kl:shen.repl)) ((and (pair? V6030) (and (eq? (quote show-help) (car V6030)) (and (pair? (cdr V6030)) (null? (cdr (cdr V6030)))))) (kl:shen.prhush (kl:shen.app (car (cdr V6030)) "\n" (quote shen.a)) (kl:stoutput))) ((and (pair? V6030) (and (eq? (quote unknown-arguments) (car V6030)) (and (pair? (cdr V6030)) (pair? (cdr (cdr V6030)))))) (kl:shen.prhush (string-append "ERROR: Invalid argument: " (kl:shen.app (car (cdr (cdr V6030))) (string-append "\nTry `" (kl:shen.app (car (cdr V6030)) " --help' for more information.\n" (quote shen.a))) (quote shen.a))) (kl:stoutput))) (#t (kl:shen.f_error (quote shen.x.launcher.default-handle-result))))) (export shen.x.launcher.default-handle-result) (quote shen.x.launcher.default-handle-result))
(begin (register-function-arity (quote shen.x.launcher.main) 1) (define (kl:shen.x.launcher.main V6032) (kl:shen.x.launcher.default-handle-result (kl:shen.x.launcher.launch-shen V6032))) (export shen.x.launcher.main) (quote shen.x.launcher.main))
