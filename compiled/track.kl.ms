"Copyright (c) 2015, Mark Tarver\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n3. The name of Mark Tarver may not be used to endorse or promote products\n   derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
(begin (register-function-arity (quote shen.f_error) 1) (define (kl:shen.f_error V4086) (begin (kl:shen.prhush (string-append "partial function " (kl:shen.app V4086 ";\n" (quote shen.a))) (kl:stoutput)) (begin (if (and (kl:not (kl:shen.tracked? V4086)) (assert-boolean (kl:y-or-n? (string-append "track " (kl:shen.app V4086 "? " (quote shen.a)))))) (kl:shen.track-function (kl:ps V4086)) (quote shen.ok)) (simple-error "aborted")))) (quote shen.f_error))
(begin (register-function-arity (quote shen.tracked?) 1) (define (kl:shen.tracked? V4088) (kl:element? V4088 (kl:value (quote shen.*tracking*)))) (quote shen.tracked?))
(begin (register-function-arity (quote track) 1) (define (kl:track V4090) (let ((Source (kl:ps V4090))) (kl:shen.track-function Source))) (quote track))
(begin (register-function-arity (quote shen.track-function) 1) (define (kl:shen.track-function V4092) (cond ((and (pair? V4092) (and (eq? (quote defun) (car V4092)) (and (pair? (cdr V4092)) (and (pair? (cdr (cdr V4092))) (and (pair? (cdr (cdr (cdr V4092)))) (null? (cdr (cdr (cdr (cdr V4092)))))))))) (let ((KL (cons (quote defun) (cons (car (cdr V4092)) (cons (car (cdr (cdr V4092))) (cons (kl:shen.insert-tracking-code (car (cdr V4092)) (car (cdr (cdr V4092))) (car (cdr (cdr (cdr V4092))))) (quote ()))))))) (let ((Ob (kl:eval-kl KL))) (let ((Tr (kl:set (quote shen.*tracking*) (cons Ob (kl:value (quote shen.*tracking*)))))) Ob)))) (#t (kl:shen.f_error (quote shen.track-function))))) (quote shen.track-function))
(begin (register-function-arity (quote shen.insert-tracking-code) 3) (define (kl:shen.insert-tracking-code V4096 V4097 V4098) (cons (quote do) (cons (cons (quote set) (cons (quote shen.*call*) (cons (cons (quote +) (cons (cons (quote value) (cons (quote shen.*call*) (quote ()))) (cons 1 (quote ())))) (quote ())))) (cons (cons (quote do) (cons (cons (quote shen.input-track) (cons (cons (quote value) (cons (quote shen.*call*) (quote ()))) (cons V4096 (cons (kl:shen.cons_form V4097) (quote ()))))) (cons (cons (quote do) (cons (cons (quote shen.terpri-or-read-char) (quote ())) (cons (cons (quote let) (cons (quote Result) (cons V4098 (cons (cons (quote do) (cons (cons (quote shen.output-track) (cons (cons (quote value) (cons (quote shen.*call*) (quote ()))) (cons V4096 (cons (quote Result) (quote ()))))) (cons (cons (quote do) (cons (cons (quote set) (cons (quote shen.*call*) (cons (cons (quote -) (cons (cons (quote value) (cons (quote shen.*call*) (quote ()))) (cons 1 (quote ())))) (quote ())))) (cons (cons (quote do) (cons (cons (quote shen.terpri-or-read-char) (quote ())) (cons (quote Result) (quote ())))) (quote ())))) (quote ())))) (quote ()))))) (quote ())))) (quote ())))) (quote ()))))) (quote shen.insert-tracking-code))
(kl:set (quote shen.*step*) #f)
(begin (register-function-arity (quote step) 1) (define (kl:step V4104) (cond ((eq? (quote +) V4104) (kl:set (quote shen.*step*) #t)) ((eq? (quote -) V4104) (kl:set (quote shen.*step*) #f)) (#t (simple-error "step expects a + or a -.\n")))) (quote step))
(begin (register-function-arity (quote spy) 1) (define (kl:spy V4110) (cond ((eq? (quote +) V4110) (kl:set (quote shen.*spy*) #t)) ((eq? (quote -) V4110) (kl:set (quote shen.*spy*) #f)) (#t (simple-error "spy expects a + or a -.\n")))) (quote spy))
(begin (register-function-arity (quote shen.terpri-or-read-char) 0) (define (kl:shen.terpri-or-read-char) (if (assert-boolean (kl:value (quote shen.*step*))) (kl:shen.check-byte (read-u8 (kl:value (quote *stinput*)))) (kl:nl 1))) (quote shen.terpri-or-read-char))
(begin (register-function-arity (quote shen.check-byte) 1) (define (kl:shen.check-byte V4116) (cond ((kl:= V4116 (kl:shen.hat)) (simple-error "aborted")) (#t #t))) (quote shen.check-byte))
(begin (register-function-arity (quote shen.input-track) 3) (define (kl:shen.input-track V4120 V4121 V4122) (begin (kl:shen.prhush (string-append "\n" (kl:shen.app (kl:shen.spaces V4120) (string-append "<" (kl:shen.app V4120 (string-append "> Inputs to " (kl:shen.app V4121 (string-append " \n" (kl:shen.app (kl:shen.spaces V4120) "" (quote shen.a))) (quote shen.a))) (quote shen.a))) (quote shen.a))) (kl:stoutput)) (kl:shen.recursively-print V4122))) (quote shen.input-track))
(begin (register-function-arity (quote shen.recursively-print) 1) (define (kl:shen.recursively-print V4124) (cond ((null? V4124) (kl:shen.prhush " ==>" (kl:stoutput))) ((pair? V4124) (begin (kl:print (car V4124)) (begin (kl:shen.prhush ", " (kl:stoutput)) (kl:shen.recursively-print (cdr V4124))))) (#t (kl:shen.f_error (quote shen.recursively-print))))) (quote shen.recursively-print))
(begin (register-function-arity (quote shen.spaces) 1) (define (kl:shen.spaces V4126) (cond ((kl:= 0 V4126) "") (#t (string-append " " (kl:shen.spaces (- V4126 1)))))) (quote shen.spaces))
(begin (register-function-arity (quote shen.output-track) 3) (define (kl:shen.output-track V4130 V4131 V4132) (kl:shen.prhush (string-append "\n" (kl:shen.app (kl:shen.spaces V4130) (string-append "<" (kl:shen.app V4130 (string-append "> Output from " (kl:shen.app V4131 (string-append " \n" (kl:shen.app (kl:shen.spaces V4130) (string-append "==> " (kl:shen.app V4132 "" (quote shen.s))) (quote shen.a))) (quote shen.a))) (quote shen.a))) (quote shen.a))) (kl:stoutput))) (quote shen.output-track))
(begin (register-function-arity (quote untrack) 1) (define (kl:untrack V4134) (let ((Tracking (kl:value (quote shen.*tracking*)))) (let ((Tracking (kl:set (quote shen.*tracking*) (kl:remove V4134 Tracking)))) (kl:eval (kl:ps V4134))))) (quote untrack))
(begin (register-function-arity (quote profile) 1) (define (kl:profile V4136) (kl:shen.profile-help (kl:ps V4136))) (quote profile))
(begin (register-function-arity (quote shen.profile-help) 1) (define (kl:shen.profile-help V4142) (cond ((and (pair? V4142) (and (eq? (quote defun) (car V4142)) (and (pair? (cdr V4142)) (and (pair? (cdr (cdr V4142))) (and (pair? (cdr (cdr (cdr V4142)))) (null? (cdr (cdr (cdr (cdr V4142)))))))))) (let ((G (kl:gensym (quote shen.f)))) (let ((Profile (cons (quote defun) (cons (car (cdr V4142)) (cons (car (cdr (cdr V4142))) (cons (kl:shen.profile-func (car (cdr V4142)) (car (cdr (cdr V4142))) (cons G (car (cdr (cdr V4142))))) (quote ()))))))) (let ((Def (cons (quote defun) (cons G (cons (car (cdr (cdr V4142))) (cons (kl:subst G (car (cdr V4142)) (car (cdr (cdr (cdr V4142))))) (quote ()))))))) (let ((CompileProfile (kl:shen.eval-without-macros Profile))) (let ((CompileG (kl:shen.eval-without-macros Def))) (car (cdr V4142)))))))) (#t (simple-error "Cannot profile.\n")))) (quote shen.profile-help))
(begin (register-function-arity (quote unprofile) 1) (define (kl:unprofile V4144) (kl:untrack V4144)) (quote unprofile))
(begin (register-function-arity (quote shen.profile-func) 3) (define (kl:shen.profile-func V4148 V4149 V4150) (cons (quote let) (cons (quote Start) (cons (cons (quote get-time) (cons (quote run) (quote ()))) (cons (cons (quote let) (cons (quote Result) (cons V4150 (cons (cons (quote let) (cons (quote Finish) (cons (cons (quote -) (cons (cons (quote get-time) (cons (quote run) (quote ()))) (cons (quote Start) (quote ())))) (cons (cons (quote let) (cons (quote Record) (cons (cons (quote shen.put-profile) (cons V4148 (cons (cons (quote +) (cons (cons (quote shen.get-profile) (cons V4148 (quote ()))) (cons (quote Finish) (quote ())))) (quote ())))) (cons (quote Result) (quote ()))))) (quote ()))))) (quote ()))))) (quote ())))))) (quote shen.profile-func))
(begin (register-function-arity (quote profile-results) 1) (define (kl:profile-results V4152) (let ((Results (kl:shen.get-profile V4152))) (let ((Initialise (kl:shen.put-profile V4152 0))) (kl:_waspvm_at_p V4152 Results)))) (quote profile-results))
(begin (register-function-arity (quote shen.get-profile) 1) (define (kl:shen.get-profile V4154) (kl:get/or V4154 (quote profile) (lambda () 0) (kl:value (quote *property-vector*)))) (quote shen.get-profile))
(begin (register-function-arity (quote shen.put-profile) 2) (define (kl:shen.put-profile V4157 V4158) (kl:put V4157 (quote profile) V4158 (kl:value (quote *property-vector*)))) (quote shen.put-profile))
