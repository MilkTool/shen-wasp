"Copyright (c) 2015, Mark Tarver\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n3. The name of Mark Tarver may not be used to endorse or promote products\n   derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
(begin (register-function-arity (quote shen.f_error) 1) (define (kl:shen.f_error V3892) (begin (kl:shen.prhush (string-append "partial function " (kl:shen.app V3892 ";\n" (quote shen.a))) (kl:stoutput)) (begin (if (and (kl:not (kl:shen.tracked? V3892)) (assert-boolean (kl:y-or-n? (string-append "track " (kl:shen.app V3892 "? " (quote shen.a)))))) (kl:shen.track-function (kl:ps V3892)) (quote shen.ok)) (simple-error "aborted")))) (quote shen.f_error))
(begin (register-function-arity (quote shen.tracked?) 1) (define (kl:shen.tracked? V3894) (kl:element? V3894 (kl:value (quote shen.*tracking*)))) (quote shen.tracked?))
(begin (register-function-arity (quote track) 1) (define (kl:track V3896) (let ((Source (kl:ps V3896))) (kl:shen.track-function Source))) (quote track))
(begin (register-function-arity (quote shen.track-function) 1) (define (kl:shen.track-function V3898) (cond ((and (pair? V3898) (and (eq? (quote defun) (car V3898)) (and (pair? (cdr V3898)) (and (pair? (cdr (cdr V3898))) (and (pair? (cdr (cdr (cdr V3898)))) (null? (cdr (cdr (cdr (cdr V3898)))))))))) (let ((KL (cons (quote defun) (cons (car (cdr V3898)) (cons (car (cdr (cdr V3898))) (cons (kl:shen.insert-tracking-code (car (cdr V3898)) (car (cdr (cdr V3898))) (car (cdr (cdr (cdr V3898))))) (quote ()))))))) (let ((Ob (kl:eval-kl KL))) (let ((Tr (kl:set (quote shen.*tracking*) (cons Ob (kl:value (quote shen.*tracking*)))))) Ob)))) (#t (kl:shen.f_error (quote shen.track-function))))) (quote shen.track-function))
(begin (register-function-arity (quote shen.insert-tracking-code) 3) (define (kl:shen.insert-tracking-code V3902 V3903 V3904) (cons (quote do) (cons (cons (quote set) (cons (quote shen.*call*) (cons (cons (quote +) (cons (cons (quote value) (cons (quote shen.*call*) (quote ()))) (cons 1 (quote ())))) (quote ())))) (cons (cons (quote do) (cons (cons (quote shen.input-track) (cons (cons (quote value) (cons (quote shen.*call*) (quote ()))) (cons V3902 (cons (kl:shen.cons_form V3903) (quote ()))))) (cons (cons (quote do) (cons (cons (quote shen.terpri-or-read-char) (quote ())) (cons (cons (quote let) (cons (quote Result) (cons V3904 (cons (cons (quote do) (cons (cons (quote shen.output-track) (cons (cons (quote value) (cons (quote shen.*call*) (quote ()))) (cons V3902 (cons (quote Result) (quote ()))))) (cons (cons (quote do) (cons (cons (quote set) (cons (quote shen.*call*) (cons (cons (quote -) (cons (cons (quote value) (cons (quote shen.*call*) (quote ()))) (cons 1 (quote ())))) (quote ())))) (cons (cons (quote do) (cons (cons (quote shen.terpri-or-read-char) (quote ())) (cons (quote Result) (quote ())))) (quote ())))) (quote ())))) (quote ()))))) (quote ())))) (quote ())))) (quote ()))))) (quote shen.insert-tracking-code))
(kl:set (quote shen.*step*) #f)
(begin (register-function-arity (quote step) 1) (define (kl:step V3910) (cond ((eq? (quote +) V3910) (kl:set (quote shen.*step*) #t)) ((eq? (quote -) V3910) (kl:set (quote shen.*step*) #f)) (#t (simple-error "step expects a + or a -.\n")))) (quote step))
(begin (register-function-arity (quote spy) 1) (define (kl:spy V3916) (cond ((eq? (quote +) V3916) (kl:set (quote shen.*spy*) #t)) ((eq? (quote -) V3916) (kl:set (quote shen.*spy*) #f)) (#t (simple-error "spy expects a + or a -.\n")))) (quote spy))
(begin (register-function-arity (quote shen.terpri-or-read-char) 0) (define (kl:shen.terpri-or-read-char) (if (assert-boolean (kl:value (quote shen.*step*))) (kl:shen.check-byte (read-u8 (kl:value (quote *stinput*)))) (kl:nl 1))) (quote shen.terpri-or-read-char))
(begin (register-function-arity (quote shen.check-byte) 1) (define (kl:shen.check-byte V3922) (cond ((kl:= V3922 (kl:shen.hat)) (simple-error "aborted")) (#t #t))) (quote shen.check-byte))
(begin (register-function-arity (quote shen.input-track) 3) (define (kl:shen.input-track V3926 V3927 V3928) (begin (kl:shen.prhush (string-append "\n" (kl:shen.app (kl:shen.spaces V3926) (string-append "<" (kl:shen.app V3926 (string-append "> Inputs to " (kl:shen.app V3927 (string-append " \n" (kl:shen.app (kl:shen.spaces V3926) "" (quote shen.a))) (quote shen.a))) (quote shen.a))) (quote shen.a))) (kl:stoutput)) (kl:shen.recursively-print V3928))) (quote shen.input-track))
(begin (register-function-arity (quote shen.recursively-print) 1) (define (kl:shen.recursively-print V3930) (cond ((null? V3930) (kl:shen.prhush " ==>" (kl:stoutput))) ((pair? V3930) (begin (kl:print (car V3930)) (begin (kl:shen.prhush ", " (kl:stoutput)) (kl:shen.recursively-print (cdr V3930))))) (#t (kl:shen.f_error (quote shen.recursively-print))))) (quote shen.recursively-print))
(begin (register-function-arity (quote shen.spaces) 1) (define (kl:shen.spaces V3932) (cond ((kl:= 0 V3932) "") (#t (string-append " " (kl:shen.spaces (- V3932 1)))))) (quote shen.spaces))
(begin (register-function-arity (quote shen.output-track) 3) (define (kl:shen.output-track V3936 V3937 V3938) (kl:shen.prhush (string-append "\n" (kl:shen.app (kl:shen.spaces V3936) (string-append "<" (kl:shen.app V3936 (string-append "> Output from " (kl:shen.app V3937 (string-append " \n" (kl:shen.app (kl:shen.spaces V3936) (string-append "==> " (kl:shen.app V3938 "" (quote shen.s))) (quote shen.a))) (quote shen.a))) (quote shen.a))) (quote shen.a))) (kl:stoutput))) (quote shen.output-track))
(begin (register-function-arity (quote untrack) 1) (define (kl:untrack V3940) (let ((Tracking (kl:value (quote shen.*tracking*)))) (let ((Tracking (kl:set (quote shen.*tracking*) (kl:remove V3940 Tracking)))) (kl:eval (kl:ps V3940))))) (quote untrack))
(begin (register-function-arity (quote profile) 1) (define (kl:profile V3942) (kl:shen.profile-help (kl:ps V3942))) (quote profile))
(begin (register-function-arity (quote shen.profile-help) 1) (define (kl:shen.profile-help V3948) (cond ((and (pair? V3948) (and (eq? (quote defun) (car V3948)) (and (pair? (cdr V3948)) (and (pair? (cdr (cdr V3948))) (and (pair? (cdr (cdr (cdr V3948)))) (null? (cdr (cdr (cdr (cdr V3948)))))))))) (let ((G (kl:gensym (quote shen.f)))) (let ((Profile (cons (quote defun) (cons (car (cdr V3948)) (cons (car (cdr (cdr V3948))) (cons (kl:shen.profile-func (car (cdr V3948)) (car (cdr (cdr V3948))) (cons G (car (cdr (cdr V3948))))) (quote ()))))))) (let ((Def (cons (quote defun) (cons G (cons (car (cdr (cdr V3948))) (cons (kl:subst G (car (cdr V3948)) (car (cdr (cdr (cdr V3948))))) (quote ()))))))) (let ((CompileProfile (kl:shen.eval-without-macros Profile))) (let ((CompileG (kl:shen.eval-without-macros Def))) (car (cdr V3948)))))))) (#t (simple-error "Cannot profile.\n")))) (quote shen.profile-help))
(begin (register-function-arity (quote unprofile) 1) (define (kl:unprofile V3950) (kl:untrack V3950)) (quote unprofile))
(begin (register-function-arity (quote shen.profile-func) 3) (define (kl:shen.profile-func V3954 V3955 V3956) (cons (quote let) (cons (quote Start) (cons (cons (quote get-time) (cons (quote run) (quote ()))) (cons (cons (quote let) (cons (quote Result) (cons V3956 (cons (cons (quote let) (cons (quote Finish) (cons (cons (quote -) (cons (cons (quote get-time) (cons (quote run) (quote ()))) (cons (quote Start) (quote ())))) (cons (cons (quote let) (cons (quote Record) (cons (cons (quote shen.put-profile) (cons V3954 (cons (cons (quote +) (cons (cons (quote shen.get-profile) (cons V3954 (quote ()))) (cons (quote Finish) (quote ())))) (quote ())))) (cons (quote Result) (quote ()))))) (quote ()))))) (quote ()))))) (quote ())))))) (quote shen.profile-func))
(begin (register-function-arity (quote profile-results) 1) (define (kl:profile-results V3958) (let ((Results (kl:shen.get-profile V3958))) (let ((Initialise (kl:shen.put-profile V3958 0))) (kl:_waspvm_at_p V3958 Results)))) (quote profile-results))
(begin (register-function-arity (quote shen.get-profile) 1) (define (kl:shen.get-profile V3960) (guard (lambda (E) 0) (kl:get V3960 (quote profile) (kl:value (quote *property-vector*))))) (quote shen.get-profile))
(begin (register-function-arity (quote shen.put-profile) 2) (define (kl:shen.put-profile V3963 V3964) (kl:put V3963 (quote profile) V3964 (kl:value (quote *property-vector*)))) (quote shen.put-profile))
