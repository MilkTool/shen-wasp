"Copyright (c) 2015, Mark Tarver\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n3. The name of Mark Tarver may not be used to endorse or promote products\n   derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
(begin (register-function-arity (quote shen.f_error) 1) (define (kl:shen.f_error V3913) (begin (kl:shen.prhush (string-append "partial function " (kl:shen.app V3913 ";\n" (quote shen.a))) (kl:stoutput)) (begin (if (and (kl:not (kl:shen.tracked? V3913)) (assert-boolean (kl:y-or-n? (string-append "track " (kl:shen.app V3913 "? " (quote shen.a)))))) (kl:shen.track-function (kl:ps V3913)) (quote shen.ok)) (simple-error "aborted")))) (quote shen.f_error))
(begin (register-function-arity (quote shen.tracked?) 1) (define (kl:shen.tracked? V3915) (kl:element? V3915 (kl:value (quote shen.*tracking*)))) (quote shen.tracked?))
(begin (register-function-arity (quote track) 1) (define (kl:track V3917) (let ((Source (kl:ps V3917))) (kl:shen.track-function Source))) (quote track))
(begin (register-function-arity (quote shen.track-function) 1) (define (kl:shen.track-function V3919) (cond ((and (pair? V3919) (and (eq? (quote defun) (car V3919)) (and (pair? (cdr V3919)) (and (pair? (cdr (cdr V3919))) (and (pair? (cdr (cdr (cdr V3919)))) (null? (cdr (cdr (cdr (cdr V3919)))))))))) (let ((KL (cons (quote defun) (cons (car (cdr V3919)) (cons (car (cdr (cdr V3919))) (cons (kl:shen.insert-tracking-code (car (cdr V3919)) (car (cdr (cdr V3919))) (car (cdr (cdr (cdr V3919))))) (quote ()))))))) (let ((Ob (kl:eval-kl KL))) (let ((Tr (kl:set (quote shen.*tracking*) (cons Ob (kl:value (quote shen.*tracking*)))))) Ob)))) (#t (kl:shen.f_error (quote shen.track-function))))) (quote shen.track-function))
(begin (register-function-arity (quote shen.insert-tracking-code) 3) (define (kl:shen.insert-tracking-code V3923 V3924 V3925) (cons (quote do) (cons (cons (quote set) (cons (quote shen.*call*) (cons (cons (quote +) (cons (cons (quote value) (cons (quote shen.*call*) (quote ()))) (cons 1 (quote ())))) (quote ())))) (cons (cons (quote do) (cons (cons (quote shen.input-track) (cons (cons (quote value) (cons (quote shen.*call*) (quote ()))) (cons V3923 (cons (kl:shen.cons_form V3924) (quote ()))))) (cons (cons (quote do) (cons (cons (quote shen.terpri-or-read-char) (quote ())) (cons (cons (quote let) (cons (quote Result) (cons V3925 (cons (cons (quote do) (cons (cons (quote shen.output-track) (cons (cons (quote value) (cons (quote shen.*call*) (quote ()))) (cons V3923 (cons (quote Result) (quote ()))))) (cons (cons (quote do) (cons (cons (quote set) (cons (quote shen.*call*) (cons (cons (quote -) (cons (cons (quote value) (cons (quote shen.*call*) (quote ()))) (cons 1 (quote ())))) (quote ())))) (cons (cons (quote do) (cons (cons (quote shen.terpri-or-read-char) (quote ())) (cons (quote Result) (quote ())))) (quote ())))) (quote ())))) (quote ()))))) (quote ())))) (quote ())))) (quote ()))))) (quote shen.insert-tracking-code))
(kl:set (quote shen.*step*) #f)
(begin (register-function-arity (quote step) 1) (define (kl:step V3931) (cond ((eq? (quote +) V3931) (kl:set (quote shen.*step*) #t)) ((eq? (quote -) V3931) (kl:set (quote shen.*step*) #f)) (#t (simple-error "step expects a + or a -.\n")))) (quote step))
(begin (register-function-arity (quote spy) 1) (define (kl:spy V3937) (cond ((eq? (quote +) V3937) (kl:set (quote shen.*spy*) #t)) ((eq? (quote -) V3937) (kl:set (quote shen.*spy*) #f)) (#t (simple-error "spy expects a + or a -.\n")))) (quote spy))
(begin (register-function-arity (quote shen.terpri-or-read-char) 0) (define (kl:shen.terpri-or-read-char) (if (assert-boolean (kl:value (quote shen.*step*))) (kl:shen.check-byte (read-u8 (kl:value (quote *stinput*)))) (kl:nl 1))) (quote shen.terpri-or-read-char))
(begin (register-function-arity (quote shen.check-byte) 1) (define (kl:shen.check-byte V3943) (cond ((kl:= V3943 (kl:shen.hat)) (simple-error "aborted")) (#t #t))) (quote shen.check-byte))
(begin (register-function-arity (quote shen.input-track) 3) (define (kl:shen.input-track V3947 V3948 V3949) (begin (kl:shen.prhush (string-append "\n" (kl:shen.app (kl:shen.spaces V3947) (string-append "<" (kl:shen.app V3947 (string-append "> Inputs to " (kl:shen.app V3948 (string-append " \n" (kl:shen.app (kl:shen.spaces V3947) "" (quote shen.a))) (quote shen.a))) (quote shen.a))) (quote shen.a))) (kl:stoutput)) (kl:shen.recursively-print V3949))) (quote shen.input-track))
(begin (register-function-arity (quote shen.recursively-print) 1) (define (kl:shen.recursively-print V3951) (cond ((null? V3951) (kl:shen.prhush " ==>" (kl:stoutput))) ((pair? V3951) (begin (kl:print (car V3951)) (begin (kl:shen.prhush ", " (kl:stoutput)) (kl:shen.recursively-print (cdr V3951))))) (#t (kl:shen.f_error (quote shen.recursively-print))))) (quote shen.recursively-print))
(begin (register-function-arity (quote shen.spaces) 1) (define (kl:shen.spaces V3953) (cond ((kl:= 0 V3953) "") (#t (string-append " " (kl:shen.spaces (- V3953 1)))))) (quote shen.spaces))
(begin (register-function-arity (quote shen.output-track) 3) (define (kl:shen.output-track V3957 V3958 V3959) (kl:shen.prhush (string-append "\n" (kl:shen.app (kl:shen.spaces V3957) (string-append "<" (kl:shen.app V3957 (string-append "> Output from " (kl:shen.app V3958 (string-append " \n" (kl:shen.app (kl:shen.spaces V3957) (string-append "==> " (kl:shen.app V3959 "" (quote shen.s))) (quote shen.a))) (quote shen.a))) (quote shen.a))) (quote shen.a))) (kl:stoutput))) (quote shen.output-track))
(begin (register-function-arity (quote untrack) 1) (define (kl:untrack V3961) (let ((Tracking (kl:value (quote shen.*tracking*)))) (let ((Tracking (kl:set (quote shen.*tracking*) (kl:remove V3961 Tracking)))) (kl:eval (kl:ps V3961))))) (quote untrack))
(begin (register-function-arity (quote profile) 1) (define (kl:profile V3963) (kl:shen.profile-help (kl:ps V3963))) (quote profile))
(begin (register-function-arity (quote shen.profile-help) 1) (define (kl:shen.profile-help V3969) (cond ((and (pair? V3969) (and (eq? (quote defun) (car V3969)) (and (pair? (cdr V3969)) (and (pair? (cdr (cdr V3969))) (and (pair? (cdr (cdr (cdr V3969)))) (null? (cdr (cdr (cdr (cdr V3969)))))))))) (let ((G (kl:gensym (quote shen.f)))) (let ((Profile (cons (quote defun) (cons (car (cdr V3969)) (cons (car (cdr (cdr V3969))) (cons (kl:shen.profile-func (car (cdr V3969)) (car (cdr (cdr V3969))) (cons G (car (cdr (cdr V3969))))) (quote ()))))))) (let ((Def (cons (quote defun) (cons G (cons (car (cdr (cdr V3969))) (cons (kl:subst G (car (cdr V3969)) (car (cdr (cdr (cdr V3969))))) (quote ()))))))) (let ((CompileProfile (kl:shen.eval-without-macros Profile))) (let ((CompileG (kl:shen.eval-without-macros Def))) (car (cdr V3969)))))))) (#t (simple-error "Cannot profile.\n")))) (quote shen.profile-help))
(begin (register-function-arity (quote unprofile) 1) (define (kl:unprofile V3971) (kl:untrack V3971)) (quote unprofile))
(begin (register-function-arity (quote shen.profile-func) 3) (define (kl:shen.profile-func V3975 V3976 V3977) (cons (quote let) (cons (quote Start) (cons (cons (quote get-time) (cons (quote run) (quote ()))) (cons (cons (quote let) (cons (quote Result) (cons V3977 (cons (cons (quote let) (cons (quote Finish) (cons (cons (quote -) (cons (cons (quote get-time) (cons (quote run) (quote ()))) (cons (quote Start) (quote ())))) (cons (cons (quote let) (cons (quote Record) (cons (cons (quote shen.put-profile) (cons V3975 (cons (cons (quote +) (cons (cons (quote shen.get-profile) (cons V3975 (quote ()))) (cons (quote Finish) (quote ())))) (quote ())))) (cons (quote Result) (quote ()))))) (quote ()))))) (quote ()))))) (quote ())))))) (quote shen.profile-func))
(begin (register-function-arity (quote profile-results) 1) (define (kl:profile-results V3979) (let ((Results (kl:shen.get-profile V3979))) (let ((Initialise (kl:shen.put-profile V3979 0))) (kl:_waspvm_at_p V3979 Results)))) (quote profile-results))
(begin (register-function-arity (quote shen.get-profile) 1) (define (kl:shen.get-profile V3981) (kl:get/or V3981 (quote profile) (lambda () 0) (kl:value (quote *property-vector*)))) (quote shen.get-profile))
(begin (register-function-arity (quote shen.put-profile) 2) (define (kl:shen.put-profile V3984 V3985) (kl:put V3984 (quote profile) V3985 (kl:value (quote *property-vector*)))) (quote shen.put-profile))
