(module "compiled/declarations.kl")
"Copyright (c) 2010-2015, Mark Tarver\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation\nand/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
(begin (register-function-arity (quote shen.initialise_arity_table) 1) (define (kl:shen.initialise_arity_table V1554) (cond ((null? V1554) (quote ())) ((and (pair? V1554) (pair? (cdr V1554))) (let ((DecArity (kl:put (car V1554) (quote arity) (car (cdr V1554)) (kl:value (quote *property-vector*))))) (kl:shen.initialise_arity_table (cdr (cdr V1554))))) (#t (kl:shen.f_error (quote shen.initialise_arity_table))))) (export shen.initialise_arity_table) (quote shen.initialise_arity_table))
(begin (register-function-arity (quote arity) 1) (define (kl:arity V1556) (guard (lambda (E) -1) (kl:get V1556 (quote arity) (kl:value (quote *property-vector*))))) (export arity) (quote arity))
(begin (register-function-arity (quote systemf) 1) (define (kl:systemf V1558) (let ((Shen (kl:intern "shen"))) (let ((External (kl:get Shen (quote shen.external-symbols) (kl:value (quote *property-vector*))))) (let ((Place (kl:put Shen (quote shen.external-symbols) (kl:adjoin V1558 External) (kl:value (quote *property-vector*))))) V1558)))) (export systemf) (quote systemf))
(begin (register-function-arity (quote adjoin) 2) (define (kl:adjoin V1561 V1562) (if (kl:element? V1561 V1562) V1562 (cons V1561 V1562))) (export adjoin) (quote adjoin))
(begin (register-function-arity (quote shen.lambda-form-entry) 1) (define (kl:shen.lambda-form-entry V1564) (cond ((eq? (quote package) V1564) (quote ())) ((eq? (quote receive) V1564) (quote ())) (#t (let ((ArityF (kl:arity V1564))) (if (kl:= ArityF -1) (quote ()) (if (kl:= ArityF 0) (quote ()) (cons (cons V1564 (kl:eval-kl (kl:shen.lambda-form V1564 ArityF))) (quote ())))))))) (export shen.lambda-form-entry) (quote shen.lambda-form-entry))
(begin (register-function-arity (quote shen.lambda-form) 2) (define (kl:shen.lambda-form V1567 V1568) (cond ((kl:= 0 V1568) V1567) (#t (let ((X (kl:gensym (quote V)))) (cons (quote lambda) (cons X (cons (kl:shen.lambda-form (kl:shen.add-end V1567 X) (- V1568 1)) (quote ())))))))) (export shen.lambda-form) (quote shen.lambda-form))
(begin (register-function-arity (quote shen.add-end) 2) (define (kl:shen.add-end V1571 V1572) (cond ((pair? V1571) (kl:append V1571 (cons V1572 (quote ())))) (#t (cons V1571 (cons V1572 (quote ())))))) (export shen.add-end) (quote shen.add-end))
(begin (register-function-arity (quote shen.set-lambda-form-entry) 1) (define (kl:shen.set-lambda-form-entry V1574) (cond ((pair? V1574) (kl:put (car V1574) (quote shen.lambda-form) (cdr V1574) (kl:value (quote *property-vector*)))) (#t (kl:shen.f_error (quote shen.set-lambda-form-entry))))) (export shen.set-lambda-form-entry) (quote shen.set-lambda-form-entry))
(begin (register-function-arity (quote specialise) 1) (define (kl:specialise V1576) (begin (kl:set (quote shen.*special*) (cons V1576 (kl:value (quote shen.*special*)))) V1576)) (export specialise) (quote specialise))
(begin (register-function-arity (quote unspecialise) 1) (define (kl:unspecialise V1578) (begin (kl:set (quote shen.*special*) (kl:remove V1578 (kl:value (quote shen.*special*)))) V1578)) (export unspecialise) (quote unspecialise))
