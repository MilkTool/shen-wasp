(module "compiled/types.kl")
"Copyright (c) 2010-2015, Mark Tarver\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation\nand/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
(begin (register-function-arity (quote declare) 2) (define (kl:declare V4313 V4314) (let ((Record (kl:set (quote shen.*signedfuncs*) (cons (cons V4313 V4314) (kl:value (quote shen.*signedfuncs*)))))) (let ((Variancy (guard (lambda (E) (quote shen.skip)) (kl:shen.variancy-test V4313 V4314)))) (let ((Type (kl:shen.rcons_form (kl:shen.demodulate V4314)))) (let ((F* (kl:concat (quote shen.type-signature-of-) V4313))) (let ((Parameters (kl:shen.parameters 1))) (let ((Clause (cons (cons F* (cons (quote X) (quote ()))) (cons (quote :-) (cons (cons (cons (quote unify!) (cons (quote X) (cons Type (quote ())))) (quote ())) (quote ())))))) (let ((AUM_instruction (kl:shen.aum Clause Parameters))) (let ((Code (kl:shen.aum_to_shen AUM_instruction))) (let ((ShenDef (cons (quote define) (cons F* (kl:append Parameters (kl:append (cons (quote ProcessN) (cons (quote Continuation) (quote ()))) (cons (quote ->) (cons Code (quote ()))))))))) (let ((Eval (kl:shen.eval-without-macros ShenDef))) V4313))))))))))) (export declare) (quote declare))
(begin (register-function-arity (quote shen.demodulate) 1) (define (kl:shen.demodulate V4316) (let ((Demod (kl:shen.walk (kl:value (quote shen.*demodulation-function*)) V4316))) (if (kl:= Demod V4316) V4316 (kl:shen.demodulate Demod)))) (export shen.demodulate) (quote shen.demodulate))
(begin (register-function-arity (quote shen.variancy-test) 2) (define (kl:shen.variancy-test V4319 V4320) (let ((TypeF (kl:shen.typecheck V4319 (quote B)))) (let ((Check (if (eq? (quote symbol) TypeF) (quote shen.skip) (if (assert-boolean (kl:shen.variant? TypeF V4320)) (quote shen.skip) (kl:shen.prhush (string-append "warning: changing the type of " (kl:shen.app V4319 " may create errors\n" (quote shen.a))) (kl:stoutput)))))) (quote shen.skip)))) (export shen.variancy-test) (quote shen.variancy-test))
(begin (register-function-arity (quote shen.variant?) 2) (define (kl:shen.variant? V4333 V4334) (cond ((kl:= V4334 V4333) #t) ((and (pair? V4333) (and (pair? V4334) (kl:= (car V4334) (car V4333)))) (kl:shen.variant? (cdr V4333) (cdr V4334))) ((and (pair? V4333) (and (pair? V4334) (and (kl:shen.pvar? (car V4333)) (kl:variable? (car V4334))))) (kl:shen.variant? (kl:subst (quote shen.a) (car V4333) (cdr V4333)) (kl:subst (quote shen.a) (car V4334) (cdr V4334)))) ((and (pair? V4333) (and (pair? (car V4333)) (and (pair? V4334) (pair? (car V4334))))) (kl:shen.variant? (kl:append (car V4333) (cdr V4333)) (kl:append (car V4334) (cdr V4334)))) (#t #f))) (export shen.variant?) (quote shen.variant?))
(begin (register-function-arity (quote shen.type-signature-of-absvector?) 3) (define (kl:shen.type-signature-of-absvector? V4339 V4340 V4341) (let ((A (kl:shen.newpv V4340))) (begin (kl:shen.incinfs) (kl:unify! V4339 (cons A (cons (quote -->) (cons (quote boolean) (quote ())))) V4340 V4341)))) (export shen.type-signature-of-absvector?) (quote shen.type-signature-of-absvector?))
(begin (register-function-arity (quote shen.type-signature-of-adjoin) 3) (define (kl:shen.type-signature-of-adjoin V4349 V4350 V4351) (let ((A (kl:shen.newpv V4350))) (begin (kl:shen.incinfs) (kl:unify! V4349 (cons A (cons (quote -->) (cons (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons A (quote ()))) (quote ())))) (quote ())))) V4350 V4351)))) (export shen.type-signature-of-adjoin) (quote shen.type-signature-of-adjoin))
(begin (register-function-arity (quote shen.type-signature-of-and) 3) (define (kl:shen.type-signature-of-and V4359 V4360 V4361) (begin (kl:shen.incinfs) (kl:unify! V4359 (cons (quote boolean) (cons (quote -->) (cons (cons (quote boolean) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ())))) V4360 V4361))) (export shen.type-signature-of-and) (quote shen.type-signature-of-and))
(begin (register-function-arity (quote shen.type-signature-of-shen.app) 3) (define (kl:shen.type-signature-of-shen.app V4369 V4370 V4371) (let ((A (kl:shen.newpv V4370))) (begin (kl:shen.incinfs) (kl:unify! V4369 (cons A (cons (quote -->) (cons (cons (quote string) (cons (quote -->) (cons (cons (quote symbol) (cons (quote -->) (cons (quote string) (quote ())))) (quote ())))) (quote ())))) V4370 V4371)))) (export shen.type-signature-of-shen.app) (quote shen.type-signature-of-shen.app))
(begin (register-function-arity (quote shen.type-signature-of-append) 3) (define (kl:shen.type-signature-of-append V4379 V4380 V4381) (let ((A (kl:shen.newpv V4380))) (begin (kl:shen.incinfs) (kl:unify! V4379 (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons A (quote ()))) (quote ())))) (quote ())))) V4380 V4381)))) (export shen.type-signature-of-append) (quote shen.type-signature-of-append))
(begin (register-function-arity (quote shen.type-signature-of-arity) 3) (define (kl:shen.type-signature-of-arity V4389 V4390 V4391) (let ((A (kl:shen.newpv V4390))) (begin (kl:shen.incinfs) (kl:unify! V4389 (cons A (cons (quote -->) (cons (quote number) (quote ())))) V4390 V4391)))) (export shen.type-signature-of-arity) (quote shen.type-signature-of-arity))
(begin (register-function-arity (quote shen.type-signature-of-assoc) 3) (define (kl:shen.type-signature-of-assoc V4399 V4400 V4401) (let ((A (kl:shen.newpv V4400))) (begin (kl:shen.incinfs) (kl:unify! V4399 (cons A (cons (quote -->) (cons (cons (cons (quote list) (cons (cons (quote list) (cons A (quote ()))) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons A (quote ()))) (quote ())))) (quote ())))) V4400 V4401)))) (export shen.type-signature-of-assoc) (quote shen.type-signature-of-assoc))
(begin (register-function-arity (quote shen.type-signature-of-boolean?) 3) (define (kl:shen.type-signature-of-boolean? V4409 V4410 V4411) (let ((A (kl:shen.newpv V4410))) (begin (kl:shen.incinfs) (kl:unify! V4409 (cons A (cons (quote -->) (cons (quote boolean) (quote ())))) V4410 V4411)))) (export shen.type-signature-of-boolean?) (quote shen.type-signature-of-boolean?))
(begin (register-function-arity (quote shen.type-signature-of-bound?) 3) (define (kl:shen.type-signature-of-bound? V4419 V4420 V4421) (begin (kl:shen.incinfs) (kl:unify! V4419 (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ())))) V4420 V4421))) (export shen.type-signature-of-bound?) (quote shen.type-signature-of-bound?))
(begin (register-function-arity (quote shen.type-signature-of-cd) 3) (define (kl:shen.type-signature-of-cd V4429 V4430 V4431) (begin (kl:shen.incinfs) (kl:unify! V4429 (cons (quote string) (cons (quote -->) (cons (quote string) (quote ())))) V4430 V4431))) (export shen.type-signature-of-cd) (quote shen.type-signature-of-cd))
(begin (register-function-arity (quote shen.type-signature-of-close) 3) (define (kl:shen.type-signature-of-close V4439 V4440 V4441) (let ((A (kl:shen.newpv V4440))) (let ((B (kl:shen.newpv V4440))) (begin (kl:shen.incinfs) (kl:unify! V4439 (cons (cons (quote stream) (cons A (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons B (quote ()))) (quote ())))) V4440 V4441))))) (export shen.type-signature-of-close) (quote shen.type-signature-of-close))
(begin (register-function-arity (quote shen.type-signature-of-cn) 3) (define (kl:shen.type-signature-of-cn V4449 V4450 V4451) (begin (kl:shen.incinfs) (kl:unify! V4449 (cons (quote string) (cons (quote -->) (cons (cons (quote string) (cons (quote -->) (cons (quote string) (quote ())))) (quote ())))) V4450 V4451))) (export shen.type-signature-of-cn) (quote shen.type-signature-of-cn))
(begin (register-function-arity (quote shen.type-signature-of-compile) 3) (define (kl:shen.type-signature-of-compile V4459 V4460 V4461) (let ((A (kl:shen.newpv V4460))) (let ((B (kl:shen.newpv V4460))) (begin (kl:shen.incinfs) (kl:unify! V4459 (cons (cons A (cons (quote shen.==>) (cons B (quote ())))) (cons (quote -->) (cons (cons A (cons (quote -->) (cons (cons (cons A (cons (quote -->) (cons B (quote ())))) (cons (quote -->) (cons B (quote ())))) (quote ())))) (quote ())))) V4460 V4461))))) (export shen.type-signature-of-compile) (quote shen.type-signature-of-compile))
(begin (register-function-arity (quote shen.type-signature-of-cons?) 3) (define (kl:shen.type-signature-of-cons? V4469 V4470 V4471) (let ((A (kl:shen.newpv V4470))) (begin (kl:shen.incinfs) (kl:unify! V4469 (cons A (cons (quote -->) (cons (quote boolean) (quote ())))) V4470 V4471)))) (export shen.type-signature-of-cons?) (quote shen.type-signature-of-cons?))
(begin (register-function-arity (quote shen.type-signature-of-destroy) 3) (define (kl:shen.type-signature-of-destroy V4479 V4480 V4481) (let ((A (kl:shen.newpv V4480))) (let ((B (kl:shen.newpv V4480))) (begin (kl:shen.incinfs) (kl:unify! V4479 (cons (cons A (cons (quote -->) (cons B (quote ())))) (cons (quote -->) (cons (quote symbol) (quote ())))) V4480 V4481))))) (export shen.type-signature-of-destroy) (quote shen.type-signature-of-destroy))
(begin (register-function-arity (quote shen.type-signature-of-difference) 3) (define (kl:shen.type-signature-of-difference V4489 V4490 V4491) (let ((A (kl:shen.newpv V4490))) (begin (kl:shen.incinfs) (kl:unify! V4489 (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons A (quote ()))) (quote ())))) (quote ())))) V4490 V4491)))) (export shen.type-signature-of-difference) (quote shen.type-signature-of-difference))
(begin (register-function-arity (quote shen.type-signature-of-do) 3) (define (kl:shen.type-signature-of-do V4499 V4500 V4501) (let ((A (kl:shen.newpv V4500))) (let ((B (kl:shen.newpv V4500))) (begin (kl:shen.incinfs) (kl:unify! V4499 (cons A (cons (quote -->) (cons (cons B (cons (quote -->) (cons B (quote ())))) (quote ())))) V4500 V4501))))) (export shen.type-signature-of-do) (quote shen.type-signature-of-do))
(begin (register-function-arity (quote shen.type-signature-of-<e>) 3) (define (kl:shen.type-signature-of-<e> V4509 V4510 V4511) (let ((A (kl:shen.newpv V4510))) (let ((B (kl:shen.newpv V4510))) (begin (kl:shen.incinfs) (kl:unify! V4509 (cons (cons (quote list) (cons A (quote ()))) (cons (quote shen.==>) (cons (cons (quote list) (cons B (quote ()))) (quote ())))) V4510 V4511))))) (export shen.type-signature-of-<e>) (quote shen.type-signature-of-<e>))
(begin (register-function-arity (quote shen.type-signature-of-<!>) 3) (define (kl:shen.type-signature-of-<!> V4519 V4520 V4521) (let ((A (kl:shen.newpv V4520))) (begin (kl:shen.incinfs) (kl:unify! V4519 (cons (cons (quote list) (cons A (quote ()))) (cons (quote shen.==>) (cons (cons (quote list) (cons A (quote ()))) (quote ())))) V4520 V4521)))) (export shen.type-signature-of-<!>) (quote shen.type-signature-of-<!>))
(begin (register-function-arity (quote shen.type-signature-of-element?) 3) (define (kl:shen.type-signature-of-element? V4529 V4530 V4531) (let ((A (kl:shen.newpv V4530))) (begin (kl:shen.incinfs) (kl:unify! V4529 (cons A (cons (quote -->) (cons (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ())))) V4530 V4531)))) (export shen.type-signature-of-element?) (quote shen.type-signature-of-element?))
(begin (register-function-arity (quote shen.type-signature-of-empty?) 3) (define (kl:shen.type-signature-of-empty? V4539 V4540 V4541) (let ((A (kl:shen.newpv V4540))) (begin (kl:shen.incinfs) (kl:unify! V4539 (cons A (cons (quote -->) (cons (quote boolean) (quote ())))) V4540 V4541)))) (export shen.type-signature-of-empty?) (quote shen.type-signature-of-empty?))
(begin (register-function-arity (quote shen.type-signature-of-enable-type-theory) 3) (define (kl:shen.type-signature-of-enable-type-theory V4549 V4550 V4551) (begin (kl:shen.incinfs) (kl:unify! V4549 (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ())))) V4550 V4551))) (export shen.type-signature-of-enable-type-theory) (quote shen.type-signature-of-enable-type-theory))
(begin (register-function-arity (quote shen.type-signature-of-external) 3) (define (kl:shen.type-signature-of-external V4559 V4560 V4561) (begin (kl:shen.incinfs) (kl:unify! V4559 (cons (quote symbol) (cons (quote -->) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (quote ())))) V4560 V4561))) (export shen.type-signature-of-external) (quote shen.type-signature-of-external))
(begin (register-function-arity (quote shen.type-signature-of-error-to-string) 3) (define (kl:shen.type-signature-of-error-to-string V4569 V4570 V4571) (begin (kl:shen.incinfs) (kl:unify! V4569 (cons (quote exception) (cons (quote -->) (cons (quote string) (quote ())))) V4570 V4571))) (export shen.type-signature-of-error-to-string) (quote shen.type-signature-of-error-to-string))
(begin (register-function-arity (quote shen.type-signature-of-explode) 3) (define (kl:shen.type-signature-of-explode V4579 V4580 V4581) (let ((A (kl:shen.newpv V4580))) (begin (kl:shen.incinfs) (kl:unify! V4579 (cons A (cons (quote -->) (cons (cons (quote list) (cons (quote string) (quote ()))) (quote ())))) V4580 V4581)))) (export shen.type-signature-of-explode) (quote shen.type-signature-of-explode))
(begin (register-function-arity (quote shen.type-signature-of-fail) 3) (define (kl:shen.type-signature-of-fail V4589 V4590 V4591) (begin (kl:shen.incinfs) (kl:unify! V4589 (cons (quote -->) (cons (quote symbol) (quote ()))) V4590 V4591))) (export shen.type-signature-of-fail) (quote shen.type-signature-of-fail))
(begin (register-function-arity (quote shen.type-signature-of-fail-if) 3) (define (kl:shen.type-signature-of-fail-if V4599 V4600 V4601) (begin (kl:shen.incinfs) (kl:unify! V4599 (cons (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ())))) (cons (quote -->) (cons (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ())))) (quote ())))) V4600 V4601))) (export shen.type-signature-of-fail-if) (quote shen.type-signature-of-fail-if))
(begin (register-function-arity (quote shen.type-signature-of-fix) 3) (define (kl:shen.type-signature-of-fix V4609 V4610 V4611) (let ((A (kl:shen.newpv V4610))) (begin (kl:shen.incinfs) (kl:unify! V4609 (cons (cons A (cons (quote -->) (cons A (quote ())))) (cons (quote -->) (cons (cons A (cons (quote -->) (cons A (quote ())))) (quote ())))) V4610 V4611)))) (export shen.type-signature-of-fix) (quote shen.type-signature-of-fix))
(begin (register-function-arity (quote shen.type-signature-of-freeze) 3) (define (kl:shen.type-signature-of-freeze V4619 V4620 V4621) (let ((A (kl:shen.newpv V4620))) (begin (kl:shen.incinfs) (kl:unify! V4619 (cons A (cons (quote -->) (cons (cons (quote lazy) (cons A (quote ()))) (quote ())))) V4620 V4621)))) (export shen.type-signature-of-freeze) (quote shen.type-signature-of-freeze))
(begin (register-function-arity (quote shen.type-signature-of-fst) 3) (define (kl:shen.type-signature-of-fst V4629 V4630 V4631) (let ((B (kl:shen.newpv V4630))) (let ((A (kl:shen.newpv V4630))) (begin (kl:shen.incinfs) (kl:unify! V4629 (cons (cons A (cons (quote *) (cons B (quote ())))) (cons (quote -->) (cons A (quote ())))) V4630 V4631))))) (export shen.type-signature-of-fst) (quote shen.type-signature-of-fst))
(begin (register-function-arity (quote shen.type-signature-of-function) 3) (define (kl:shen.type-signature-of-function V4639 V4640 V4641) (let ((A (kl:shen.newpv V4640))) (let ((B (kl:shen.newpv V4640))) (begin (kl:shen.incinfs) (kl:unify! V4639 (cons (cons A (cons (quote -->) (cons B (quote ())))) (cons (quote -->) (cons (cons A (cons (quote -->) (cons B (quote ())))) (quote ())))) V4640 V4641))))) (export shen.type-signature-of-function) (quote shen.type-signature-of-function))
(begin (register-function-arity (quote shen.type-signature-of-gensym) 3) (define (kl:shen.type-signature-of-gensym V4649 V4650 V4651) (begin (kl:shen.incinfs) (kl:unify! V4649 (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ())))) V4650 V4651))) (export shen.type-signature-of-gensym) (quote shen.type-signature-of-gensym))
(begin (register-function-arity (quote shen.type-signature-of-<-vector) 3) (define (kl:shen.type-signature-of-<-vector V4659 V4660 V4661) (let ((A (kl:shen.newpv V4660))) (begin (kl:shen.incinfs) (kl:unify! V4659 (cons (cons (quote vector) (cons A (quote ()))) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons A (quote ())))) (quote ())))) V4660 V4661)))) (export shen.type-signature-of-<-vector) (quote shen.type-signature-of-<-vector))
(begin (register-function-arity (quote shen.type-signature-of-vector->) 3) (define (kl:shen.type-signature-of-vector-> V4669 V4670 V4671) (let ((A (kl:shen.newpv V4670))) (begin (kl:shen.incinfs) (kl:unify! V4669 (cons (cons (quote vector) (cons A (quote ()))) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (cons A (cons (quote -->) (cons (cons (quote vector) (cons A (quote ()))) (quote ())))) (quote ())))) (quote ())))) V4670 V4671)))) (export shen.type-signature-of-vector->) (quote shen.type-signature-of-vector->))
(begin (register-function-arity (quote shen.type-signature-of-vector) 3) (define (kl:shen.type-signature-of-vector V4679 V4680 V4681) (let ((A (kl:shen.newpv V4680))) (begin (kl:shen.incinfs) (kl:unify! V4679 (cons (quote number) (cons (quote -->) (cons (cons (quote vector) (cons A (quote ()))) (quote ())))) V4680 V4681)))) (export shen.type-signature-of-vector) (quote shen.type-signature-of-vector))
(begin (register-function-arity (quote shen.type-signature-of-get-time) 3) (define (kl:shen.type-signature-of-get-time V4689 V4690 V4691) (begin (kl:shen.incinfs) (kl:unify! V4689 (cons (quote symbol) (cons (quote -->) (cons (quote number) (quote ())))) V4690 V4691))) (export shen.type-signature-of-get-time) (quote shen.type-signature-of-get-time))
(begin (register-function-arity (quote shen.type-signature-of-hash) 3) (define (kl:shen.type-signature-of-hash V4699 V4700 V4701) (let ((A (kl:shen.newpv V4700))) (begin (kl:shen.incinfs) (kl:unify! V4699 (cons A (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote number) (quote ())))) (quote ())))) V4700 V4701)))) (export shen.type-signature-of-hash) (quote shen.type-signature-of-hash))
(begin (register-function-arity (quote shen.type-signature-of-head) 3) (define (kl:shen.type-signature-of-head V4709 V4710 V4711) (let ((A (kl:shen.newpv V4710))) (begin (kl:shen.incinfs) (kl:unify! V4709 (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons A (quote ())))) V4710 V4711)))) (export shen.type-signature-of-head) (quote shen.type-signature-of-head))
(begin (register-function-arity (quote shen.type-signature-of-hdv) 3) (define (kl:shen.type-signature-of-hdv V4719 V4720 V4721) (let ((A (kl:shen.newpv V4720))) (begin (kl:shen.incinfs) (kl:unify! V4719 (cons (cons (quote vector) (cons A (quote ()))) (cons (quote -->) (cons A (quote ())))) V4720 V4721)))) (export shen.type-signature-of-hdv) (quote shen.type-signature-of-hdv))
(begin (register-function-arity (quote shen.type-signature-of-hdstr) 3) (define (kl:shen.type-signature-of-hdstr V4729 V4730 V4731) (begin (kl:shen.incinfs) (kl:unify! V4729 (cons (quote string) (cons (quote -->) (cons (quote string) (quote ())))) V4730 V4731))) (export shen.type-signature-of-hdstr) (quote shen.type-signature-of-hdstr))
(begin (register-function-arity (quote shen.type-signature-of-if) 3) (define (kl:shen.type-signature-of-if V4739 V4740 V4741) (let ((A (kl:shen.newpv V4740))) (begin (kl:shen.incinfs) (kl:unify! V4739 (cons (quote boolean) (cons (quote -->) (cons (cons A (cons (quote -->) (cons (cons A (cons (quote -->) (cons A (quote ())))) (quote ())))) (quote ())))) V4740 V4741)))) (export shen.type-signature-of-if) (quote shen.type-signature-of-if))
(begin (register-function-arity (quote shen.type-signature-of-it) 3) (define (kl:shen.type-signature-of-it V4749 V4750 V4751) (begin (kl:shen.incinfs) (kl:unify! V4749 (cons (quote -->) (cons (quote string) (quote ()))) V4750 V4751))) (export shen.type-signature-of-it) (quote shen.type-signature-of-it))
(begin (register-function-arity (quote shen.type-signature-of-implementation) 3) (define (kl:shen.type-signature-of-implementation V4759 V4760 V4761) (begin (kl:shen.incinfs) (kl:unify! V4759 (cons (quote -->) (cons (quote string) (quote ()))) V4760 V4761))) (export shen.type-signature-of-implementation) (quote shen.type-signature-of-implementation))
(begin (register-function-arity (quote shen.type-signature-of-include) 3) (define (kl:shen.type-signature-of-include V4769 V4770 V4771) (begin (kl:shen.incinfs) (kl:unify! V4769 (cons (cons (quote list) (cons (quote symbol) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (quote ())))) V4770 V4771))) (export shen.type-signature-of-include) (quote shen.type-signature-of-include))
(begin (register-function-arity (quote shen.type-signature-of-include-all-but) 3) (define (kl:shen.type-signature-of-include-all-but V4779 V4780 V4781) (begin (kl:shen.incinfs) (kl:unify! V4779 (cons (cons (quote list) (cons (quote symbol) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (quote ())))) V4780 V4781))) (export shen.type-signature-of-include-all-but) (quote shen.type-signature-of-include-all-but))
(begin (register-function-arity (quote shen.type-signature-of-inferences) 3) (define (kl:shen.type-signature-of-inferences V4789 V4790 V4791) (begin (kl:shen.incinfs) (kl:unify! V4789 (cons (quote -->) (cons (quote number) (quote ()))) V4790 V4791))) (export shen.type-signature-of-inferences) (quote shen.type-signature-of-inferences))
(begin (register-function-arity (quote shen.type-signature-of-shen.insert) 3) (define (kl:shen.type-signature-of-shen.insert V4799 V4800 V4801) (let ((A (kl:shen.newpv V4800))) (begin (kl:shen.incinfs) (kl:unify! V4799 (cons A (cons (quote -->) (cons (cons (quote string) (cons (quote -->) (cons (quote string) (quote ())))) (quote ())))) V4800 V4801)))) (export shen.type-signature-of-shen.insert) (quote shen.type-signature-of-shen.insert))
(begin (register-function-arity (quote shen.type-signature-of-integer?) 3) (define (kl:shen.type-signature-of-integer? V4809 V4810 V4811) (let ((A (kl:shen.newpv V4810))) (begin (kl:shen.incinfs) (kl:unify! V4809 (cons A (cons (quote -->) (cons (quote boolean) (quote ())))) V4810 V4811)))) (export shen.type-signature-of-integer?) (quote shen.type-signature-of-integer?))
(begin (register-function-arity (quote shen.type-signature-of-internal) 3) (define (kl:shen.type-signature-of-internal V4819 V4820 V4821) (begin (kl:shen.incinfs) (kl:unify! V4819 (cons (quote symbol) (cons (quote -->) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (quote ())))) V4820 V4821))) (export shen.type-signature-of-internal) (quote shen.type-signature-of-internal))
(begin (register-function-arity (quote shen.type-signature-of-intersection) 3) (define (kl:shen.type-signature-of-intersection V4829 V4830 V4831) (let ((A (kl:shen.newpv V4830))) (begin (kl:shen.incinfs) (kl:unify! V4829 (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons A (quote ()))) (quote ())))) (quote ())))) V4830 V4831)))) (export shen.type-signature-of-intersection) (quote shen.type-signature-of-intersection))
(begin (register-function-arity (quote shen.type-signature-of-kill) 3) (define (kl:shen.type-signature-of-kill V4839 V4840 V4841) (let ((A (kl:shen.newpv V4840))) (begin (kl:shen.incinfs) (kl:unify! V4839 (cons (quote -->) (cons A (quote ()))) V4840 V4841)))) (export shen.type-signature-of-kill) (quote shen.type-signature-of-kill))
(begin (register-function-arity (quote shen.type-signature-of-language) 3) (define (kl:shen.type-signature-of-language V4849 V4850 V4851) (begin (kl:shen.incinfs) (kl:unify! V4849 (cons (quote -->) (cons (quote string) (quote ()))) V4850 V4851))) (export shen.type-signature-of-language) (quote shen.type-signature-of-language))
(begin (register-function-arity (quote shen.type-signature-of-length) 3) (define (kl:shen.type-signature-of-length V4859 V4860 V4861) (let ((A (kl:shen.newpv V4860))) (begin (kl:shen.incinfs) (kl:unify! V4859 (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (quote number) (quote ())))) V4860 V4861)))) (export shen.type-signature-of-length) (quote shen.type-signature-of-length))
(begin (register-function-arity (quote shen.type-signature-of-limit) 3) (define (kl:shen.type-signature-of-limit V4869 V4870 V4871) (let ((A (kl:shen.newpv V4870))) (begin (kl:shen.incinfs) (kl:unify! V4869 (cons (cons (quote vector) (cons A (quote ()))) (cons (quote -->) (cons (quote number) (quote ())))) V4870 V4871)))) (export shen.type-signature-of-limit) (quote shen.type-signature-of-limit))
(begin (register-function-arity (quote shen.type-signature-of-load) 3) (define (kl:shen.type-signature-of-load V4879 V4880 V4881) (begin (kl:shen.incinfs) (kl:unify! V4879 (cons (quote string) (cons (quote -->) (cons (quote symbol) (quote ())))) V4880 V4881))) (export shen.type-signature-of-load) (quote shen.type-signature-of-load))
(begin (register-function-arity (quote shen.type-signature-of-map) 3) (define (kl:shen.type-signature-of-map V4889 V4890 V4891) (let ((A (kl:shen.newpv V4890))) (let ((B (kl:shen.newpv V4890))) (begin (kl:shen.incinfs) (kl:unify! V4889 (cons (cons A (cons (quote -->) (cons B (quote ())))) (cons (quote -->) (cons (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons B (quote ()))) (quote ())))) (quote ())))) V4890 V4891))))) (export shen.type-signature-of-map) (quote shen.type-signature-of-map))
(begin (register-function-arity (quote shen.type-signature-of-mapcan) 3) (define (kl:shen.type-signature-of-mapcan V4899 V4900 V4901) (let ((A (kl:shen.newpv V4900))) (let ((B (kl:shen.newpv V4900))) (begin (kl:shen.incinfs) (kl:unify! V4899 (cons (cons A (cons (quote -->) (cons (cons (quote list) (cons B (quote ()))) (quote ())))) (cons (quote -->) (cons (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons B (quote ()))) (quote ())))) (quote ())))) V4900 V4901))))) (export shen.type-signature-of-mapcan) (quote shen.type-signature-of-mapcan))
(begin (register-function-arity (quote shen.type-signature-of-maxinferences) 3) (define (kl:shen.type-signature-of-maxinferences V4909 V4910 V4911) (begin (kl:shen.incinfs) (kl:unify! V4909 (cons (quote number) (cons (quote -->) (cons (quote number) (quote ())))) V4910 V4911))) (export shen.type-signature-of-maxinferences) (quote shen.type-signature-of-maxinferences))
(begin (register-function-arity (quote shen.type-signature-of-n->string) 3) (define (kl:shen.type-signature-of-n->string V4919 V4920 V4921) (begin (kl:shen.incinfs) (kl:unify! V4919 (cons (quote number) (cons (quote -->) (cons (quote string) (quote ())))) V4920 V4921))) (export shen.type-signature-of-n->string) (quote shen.type-signature-of-n->string))
(begin (register-function-arity (quote shen.type-signature-of-nl) 3) (define (kl:shen.type-signature-of-nl V4929 V4930 V4931) (begin (kl:shen.incinfs) (kl:unify! V4929 (cons (quote number) (cons (quote -->) (cons (quote number) (quote ())))) V4930 V4931))) (export shen.type-signature-of-nl) (quote shen.type-signature-of-nl))
(begin (register-function-arity (quote shen.type-signature-of-not) 3) (define (kl:shen.type-signature-of-not V4939 V4940 V4941) (begin (kl:shen.incinfs) (kl:unify! V4939 (cons (quote boolean) (cons (quote -->) (cons (quote boolean) (quote ())))) V4940 V4941))) (export shen.type-signature-of-not) (quote shen.type-signature-of-not))
(begin (register-function-arity (quote shen.type-signature-of-nth) 3) (define (kl:shen.type-signature-of-nth V4949 V4950 V4951) (let ((A (kl:shen.newpv V4950))) (begin (kl:shen.incinfs) (kl:unify! V4949 (cons (quote number) (cons (quote -->) (cons (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons A (quote ())))) (quote ())))) V4950 V4951)))) (export shen.type-signature-of-nth) (quote shen.type-signature-of-nth))
(begin (register-function-arity (quote shen.type-signature-of-number?) 3) (define (kl:shen.type-signature-of-number? V4959 V4960 V4961) (let ((A (kl:shen.newpv V4960))) (begin (kl:shen.incinfs) (kl:unify! V4959 (cons A (cons (quote -->) (cons (quote boolean) (quote ())))) V4960 V4961)))) (export shen.type-signature-of-number?) (quote shen.type-signature-of-number?))
(begin (register-function-arity (quote shen.type-signature-of-occurrences) 3) (define (kl:shen.type-signature-of-occurrences V4969 V4970 V4971) (let ((A (kl:shen.newpv V4970))) (let ((B (kl:shen.newpv V4970))) (begin (kl:shen.incinfs) (kl:unify! V4969 (cons A (cons (quote -->) (cons (cons B (cons (quote -->) (cons (quote number) (quote ())))) (quote ())))) V4970 V4971))))) (export shen.type-signature-of-occurrences) (quote shen.type-signature-of-occurrences))
(begin (register-function-arity (quote shen.type-signature-of-occurs-check) 3) (define (kl:shen.type-signature-of-occurs-check V4979 V4980 V4981) (begin (kl:shen.incinfs) (kl:unify! V4979 (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ())))) V4980 V4981))) (export shen.type-signature-of-occurs-check) (quote shen.type-signature-of-occurs-check))
(begin (register-function-arity (quote shen.type-signature-of-optimise) 3) (define (kl:shen.type-signature-of-optimise V4989 V4990 V4991) (begin (kl:shen.incinfs) (kl:unify! V4989 (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ())))) V4990 V4991))) (export shen.type-signature-of-optimise) (quote shen.type-signature-of-optimise))
(begin (register-function-arity (quote shen.type-signature-of-or) 3) (define (kl:shen.type-signature-of-or V4999 V5000 V5001) (begin (kl:shen.incinfs) (kl:unify! V4999 (cons (quote boolean) (cons (quote -->) (cons (cons (quote boolean) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ())))) V5000 V5001))) (export shen.type-signature-of-or) (quote shen.type-signature-of-or))
(begin (register-function-arity (quote shen.type-signature-of-os) 3) (define (kl:shen.type-signature-of-os V5009 V5010 V5011) (begin (kl:shen.incinfs) (kl:unify! V5009 (cons (quote -->) (cons (quote string) (quote ()))) V5010 V5011))) (export shen.type-signature-of-os) (quote shen.type-signature-of-os))
(begin (register-function-arity (quote shen.type-signature-of-package?) 3) (define (kl:shen.type-signature-of-package? V5019 V5020 V5021) (begin (kl:shen.incinfs) (kl:unify! V5019 (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ())))) V5020 V5021))) (export shen.type-signature-of-package?) (quote shen.type-signature-of-package?))
(begin (register-function-arity (quote shen.type-signature-of-port) 3) (define (kl:shen.type-signature-of-port V5029 V5030 V5031) (begin (kl:shen.incinfs) (kl:unify! V5029 (cons (quote -->) (cons (quote string) (quote ()))) V5030 V5031))) (export shen.type-signature-of-port) (quote shen.type-signature-of-port))
(begin (register-function-arity (quote shen.type-signature-of-porters) 3) (define (kl:shen.type-signature-of-porters V5039 V5040 V5041) (begin (kl:shen.incinfs) (kl:unify! V5039 (cons (quote -->) (cons (quote string) (quote ()))) V5040 V5041))) (export shen.type-signature-of-porters) (quote shen.type-signature-of-porters))
(begin (register-function-arity (quote shen.type-signature-of-pos) 3) (define (kl:shen.type-signature-of-pos V5049 V5050 V5051) (begin (kl:shen.incinfs) (kl:unify! V5049 (cons (quote string) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote string) (quote ())))) (quote ())))) V5050 V5051))) (export shen.type-signature-of-pos) (quote shen.type-signature-of-pos))
(begin (register-function-arity (quote shen.type-signature-of-pr) 3) (define (kl:shen.type-signature-of-pr V5059 V5060 V5061) (begin (kl:shen.incinfs) (kl:unify! V5059 (cons (quote string) (cons (quote -->) (cons (cons (cons (quote stream) (cons (quote out) (quote ()))) (cons (quote -->) (cons (quote string) (quote ())))) (quote ())))) V5060 V5061))) (export shen.type-signature-of-pr) (quote shen.type-signature-of-pr))
(begin (register-function-arity (quote shen.type-signature-of-print) 3) (define (kl:shen.type-signature-of-print V5069 V5070 V5071) (let ((A (kl:shen.newpv V5070))) (begin (kl:shen.incinfs) (kl:unify! V5069 (cons A (cons (quote -->) (cons A (quote ())))) V5070 V5071)))) (export shen.type-signature-of-print) (quote shen.type-signature-of-print))
(begin (register-function-arity (quote shen.type-signature-of-profile) 3) (define (kl:shen.type-signature-of-profile V5079 V5080 V5081) (let ((A (kl:shen.newpv V5080))) (let ((B (kl:shen.newpv V5080))) (begin (kl:shen.incinfs) (kl:unify! V5079 (cons (cons A (cons (quote -->) (cons B (quote ())))) (cons (quote -->) (cons (cons A (cons (quote -->) (cons B (quote ())))) (quote ())))) V5080 V5081))))) (export shen.type-signature-of-profile) (quote shen.type-signature-of-profile))
(begin (register-function-arity (quote shen.type-signature-of-preclude) 3) (define (kl:shen.type-signature-of-preclude V5089 V5090 V5091) (begin (kl:shen.incinfs) (kl:unify! V5089 (cons (cons (quote list) (cons (quote symbol) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (quote ())))) V5090 V5091))) (export shen.type-signature-of-preclude) (quote shen.type-signature-of-preclude))
(begin (register-function-arity (quote shen.type-signature-of-shen.proc-nl) 3) (define (kl:shen.type-signature-of-shen.proc-nl V5099 V5100 V5101) (begin (kl:shen.incinfs) (kl:unify! V5099 (cons (quote string) (cons (quote -->) (cons (quote string) (quote ())))) V5100 V5101))) (export shen.type-signature-of-shen.proc-nl) (quote shen.type-signature-of-shen.proc-nl))
(begin (register-function-arity (quote shen.type-signature-of-profile-results) 3) (define (kl:shen.type-signature-of-profile-results V5109 V5110 V5111) (let ((A (kl:shen.newpv V5110))) (let ((B (kl:shen.newpv V5110))) (begin (kl:shen.incinfs) (kl:unify! V5109 (cons (cons A (cons (quote -->) (cons B (quote ())))) (cons (quote -->) (cons (cons (cons A (cons (quote -->) (cons B (quote ())))) (cons (quote *) (cons (quote number) (quote ())))) (quote ())))) V5110 V5111))))) (export shen.type-signature-of-profile-results) (quote shen.type-signature-of-profile-results))
(begin (register-function-arity (quote shen.type-signature-of-protect) 3) (define (kl:shen.type-signature-of-protect V5119 V5120 V5121) (begin (kl:shen.incinfs) (kl:unify! V5119 (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ())))) V5120 V5121))) (export shen.type-signature-of-protect) (quote shen.type-signature-of-protect))
(begin (register-function-arity (quote shen.type-signature-of-preclude-all-but) 3) (define (kl:shen.type-signature-of-preclude-all-but V5129 V5130 V5131) (begin (kl:shen.incinfs) (kl:unify! V5129 (cons (cons (quote list) (cons (quote symbol) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (quote ())))) V5130 V5131))) (export shen.type-signature-of-preclude-all-but) (quote shen.type-signature-of-preclude-all-but))
(begin (register-function-arity (quote shen.type-signature-of-shen.prhush) 3) (define (kl:shen.type-signature-of-shen.prhush V5139 V5140 V5141) (begin (kl:shen.incinfs) (kl:unify! V5139 (cons (quote string) (cons (quote -->) (cons (cons (cons (quote stream) (cons (quote out) (quote ()))) (cons (quote -->) (cons (quote string) (quote ())))) (quote ())))) V5140 V5141))) (export shen.type-signature-of-shen.prhush) (quote shen.type-signature-of-shen.prhush))
(begin (register-function-arity (quote shen.type-signature-of-ps) 3) (define (kl:shen.type-signature-of-ps V5149 V5150 V5151) (begin (kl:shen.incinfs) (kl:unify! V5149 (cons (quote symbol) (cons (quote -->) (cons (cons (quote list) (cons (quote unit) (quote ()))) (quote ())))) V5150 V5151))) (export shen.type-signature-of-ps) (quote shen.type-signature-of-ps))
(begin (register-function-arity (quote shen.type-signature-of-read) 3) (define (kl:shen.type-signature-of-read V5159 V5160 V5161) (begin (kl:shen.incinfs) (kl:unify! V5159 (cons (cons (quote stream) (cons (quote in) (quote ()))) (cons (quote -->) (cons (quote unit) (quote ())))) V5160 V5161))) (export shen.type-signature-of-read) (quote shen.type-signature-of-read))
(begin (register-function-arity (quote shen.type-signature-of-read-byte) 3) (define (kl:shen.type-signature-of-read-byte V5169 V5170 V5171) (begin (kl:shen.incinfs) (kl:unify! V5169 (cons (cons (quote stream) (cons (quote in) (quote ()))) (cons (quote -->) (cons (quote number) (quote ())))) V5170 V5171))) (export shen.type-signature-of-read-byte) (quote shen.type-signature-of-read-byte))
(begin (register-function-arity (quote shen.type-signature-of-read-file-as-bytelist) 3) (define (kl:shen.type-signature-of-read-file-as-bytelist V5179 V5180 V5181) (begin (kl:shen.incinfs) (kl:unify! V5179 (cons (quote string) (cons (quote -->) (cons (cons (quote list) (cons (quote number) (quote ()))) (quote ())))) V5180 V5181))) (export shen.type-signature-of-read-file-as-bytelist) (quote shen.type-signature-of-read-file-as-bytelist))
(begin (register-function-arity (quote shen.type-signature-of-read-file-as-string) 3) (define (kl:shen.type-signature-of-read-file-as-string V5189 V5190 V5191) (begin (kl:shen.incinfs) (kl:unify! V5189 (cons (quote string) (cons (quote -->) (cons (quote string) (quote ())))) V5190 V5191))) (export shen.type-signature-of-read-file-as-string) (quote shen.type-signature-of-read-file-as-string))
(begin (register-function-arity (quote shen.type-signature-of-read-file) 3) (define (kl:shen.type-signature-of-read-file V5199 V5200 V5201) (begin (kl:shen.incinfs) (kl:unify! V5199 (cons (quote string) (cons (quote -->) (cons (cons (quote list) (cons (quote unit) (quote ()))) (quote ())))) V5200 V5201))) (export shen.type-signature-of-read-file) (quote shen.type-signature-of-read-file))
(begin (register-function-arity (quote shen.type-signature-of-read-from-string) 3) (define (kl:shen.type-signature-of-read-from-string V5209 V5210 V5211) (begin (kl:shen.incinfs) (kl:unify! V5209 (cons (quote string) (cons (quote -->) (cons (cons (quote list) (cons (quote unit) (quote ()))) (quote ())))) V5210 V5211))) (export shen.type-signature-of-read-from-string) (quote shen.type-signature-of-read-from-string))
(begin (register-function-arity (quote shen.type-signature-of-release) 3) (define (kl:shen.type-signature-of-release V5219 V5220 V5221) (begin (kl:shen.incinfs) (kl:unify! V5219 (cons (quote -->) (cons (quote string) (quote ()))) V5220 V5221))) (export shen.type-signature-of-release) (quote shen.type-signature-of-release))
(begin (register-function-arity (quote shen.type-signature-of-remove) 3) (define (kl:shen.type-signature-of-remove V5229 V5230 V5231) (let ((A (kl:shen.newpv V5230))) (begin (kl:shen.incinfs) (kl:unify! V5229 (cons A (cons (quote -->) (cons (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons A (quote ()))) (quote ())))) (quote ())))) V5230 V5231)))) (export shen.type-signature-of-remove) (quote shen.type-signature-of-remove))
(begin (register-function-arity (quote shen.type-signature-of-reverse) 3) (define (kl:shen.type-signature-of-reverse V5239 V5240 V5241) (let ((A (kl:shen.newpv V5240))) (begin (kl:shen.incinfs) (kl:unify! V5239 (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons A (quote ()))) (quote ())))) V5240 V5241)))) (export shen.type-signature-of-reverse) (quote shen.type-signature-of-reverse))
(begin (register-function-arity (quote shen.type-signature-of-simple-error) 3) (define (kl:shen.type-signature-of-simple-error V5249 V5250 V5251) (let ((A (kl:shen.newpv V5250))) (begin (kl:shen.incinfs) (kl:unify! V5249 (cons (quote string) (cons (quote -->) (cons A (quote ())))) V5250 V5251)))) (export shen.type-signature-of-simple-error) (quote shen.type-signature-of-simple-error))
(begin (register-function-arity (quote shen.type-signature-of-snd) 3) (define (kl:shen.type-signature-of-snd V5259 V5260 V5261) (let ((A (kl:shen.newpv V5260))) (let ((B (kl:shen.newpv V5260))) (begin (kl:shen.incinfs) (kl:unify! V5259 (cons (cons A (cons (quote *) (cons B (quote ())))) (cons (quote -->) (cons B (quote ())))) V5260 V5261))))) (export shen.type-signature-of-snd) (quote shen.type-signature-of-snd))
(begin (register-function-arity (quote shen.type-signature-of-specialise) 3) (define (kl:shen.type-signature-of-specialise V5269 V5270 V5271) (begin (kl:shen.incinfs) (kl:unify! V5269 (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ())))) V5270 V5271))) (export shen.type-signature-of-specialise) (quote shen.type-signature-of-specialise))
(begin (register-function-arity (quote shen.type-signature-of-spy) 3) (define (kl:shen.type-signature-of-spy V5279 V5280 V5281) (begin (kl:shen.incinfs) (kl:unify! V5279 (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ())))) V5280 V5281))) (export shen.type-signature-of-spy) (quote shen.type-signature-of-spy))
(begin (register-function-arity (quote shen.type-signature-of-step) 3) (define (kl:shen.type-signature-of-step V5289 V5290 V5291) (begin (kl:shen.incinfs) (kl:unify! V5289 (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ())))) V5290 V5291))) (export shen.type-signature-of-step) (quote shen.type-signature-of-step))
(begin (register-function-arity (quote shen.type-signature-of-stinput) 3) (define (kl:shen.type-signature-of-stinput V5299 V5300 V5301) (begin (kl:shen.incinfs) (kl:unify! V5299 (cons (quote -->) (cons (cons (quote stream) (cons (quote in) (quote ()))) (quote ()))) V5300 V5301))) (export shen.type-signature-of-stinput) (quote shen.type-signature-of-stinput))
(begin (register-function-arity (quote shen.type-signature-of-sterror) 3) (define (kl:shen.type-signature-of-sterror V5309 V5310 V5311) (begin (kl:shen.incinfs) (kl:unify! V5309 (cons (quote -->) (cons (cons (quote stream) (cons (quote out) (quote ()))) (quote ()))) V5310 V5311))) (export shen.type-signature-of-sterror) (quote shen.type-signature-of-sterror))
(begin (register-function-arity (quote shen.type-signature-of-stoutput) 3) (define (kl:shen.type-signature-of-stoutput V5319 V5320 V5321) (begin (kl:shen.incinfs) (kl:unify! V5319 (cons (quote -->) (cons (cons (quote stream) (cons (quote out) (quote ()))) (quote ()))) V5320 V5321))) (export shen.type-signature-of-stoutput) (quote shen.type-signature-of-stoutput))
(begin (register-function-arity (quote shen.type-signature-of-string?) 3) (define (kl:shen.type-signature-of-string? V5329 V5330 V5331) (let ((A (kl:shen.newpv V5330))) (begin (kl:shen.incinfs) (kl:unify! V5329 (cons A (cons (quote -->) (cons (quote boolean) (quote ())))) V5330 V5331)))) (export shen.type-signature-of-string?) (quote shen.type-signature-of-string?))
(begin (register-function-arity (quote shen.type-signature-of-str) 3) (define (kl:shen.type-signature-of-str V5339 V5340 V5341) (let ((A (kl:shen.newpv V5340))) (begin (kl:shen.incinfs) (kl:unify! V5339 (cons A (cons (quote -->) (cons (quote string) (quote ())))) V5340 V5341)))) (export shen.type-signature-of-str) (quote shen.type-signature-of-str))
(begin (register-function-arity (quote shen.type-signature-of-string->n) 3) (define (kl:shen.type-signature-of-string->n V5349 V5350 V5351) (begin (kl:shen.incinfs) (kl:unify! V5349 (cons (quote string) (cons (quote -->) (cons (quote number) (quote ())))) V5350 V5351))) (export shen.type-signature-of-string->n) (quote shen.type-signature-of-string->n))
(begin (register-function-arity (quote shen.type-signature-of-string->symbol) 3) (define (kl:shen.type-signature-of-string->symbol V5359 V5360 V5361) (begin (kl:shen.incinfs) (kl:unify! V5359 (cons (quote string) (cons (quote -->) (cons (quote symbol) (quote ())))) V5360 V5361))) (export shen.type-signature-of-string->symbol) (quote shen.type-signature-of-string->symbol))
(begin (register-function-arity (quote shen.type-signature-of-sum) 3) (define (kl:shen.type-signature-of-sum V5369 V5370 V5371) (begin (kl:shen.incinfs) (kl:unify! V5369 (cons (cons (quote list) (cons (quote number) (quote ()))) (cons (quote -->) (cons (quote number) (quote ())))) V5370 V5371))) (export shen.type-signature-of-sum) (quote shen.type-signature-of-sum))
(begin (register-function-arity (quote shen.type-signature-of-symbol?) 3) (define (kl:shen.type-signature-of-symbol? V5379 V5380 V5381) (let ((A (kl:shen.newpv V5380))) (begin (kl:shen.incinfs) (kl:unify! V5379 (cons A (cons (quote -->) (cons (quote boolean) (quote ())))) V5380 V5381)))) (export shen.type-signature-of-symbol?) (quote shen.type-signature-of-symbol?))
(begin (register-function-arity (quote shen.type-signature-of-systemf) 3) (define (kl:shen.type-signature-of-systemf V5389 V5390 V5391) (begin (kl:shen.incinfs) (kl:unify! V5389 (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ())))) V5390 V5391))) (export shen.type-signature-of-systemf) (quote shen.type-signature-of-systemf))
(begin (register-function-arity (quote shen.type-signature-of-tail) 3) (define (kl:shen.type-signature-of-tail V5399 V5400 V5401) (let ((A (kl:shen.newpv V5400))) (begin (kl:shen.incinfs) (kl:unify! V5399 (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons A (quote ()))) (quote ())))) V5400 V5401)))) (export shen.type-signature-of-tail) (quote shen.type-signature-of-tail))
(begin (register-function-arity (quote shen.type-signature-of-tlstr) 3) (define (kl:shen.type-signature-of-tlstr V5409 V5410 V5411) (begin (kl:shen.incinfs) (kl:unify! V5409 (cons (quote string) (cons (quote -->) (cons (quote string) (quote ())))) V5410 V5411))) (export shen.type-signature-of-tlstr) (quote shen.type-signature-of-tlstr))
(begin (register-function-arity (quote shen.type-signature-of-tlv) 3) (define (kl:shen.type-signature-of-tlv V5419 V5420 V5421) (let ((A (kl:shen.newpv V5420))) (begin (kl:shen.incinfs) (kl:unify! V5419 (cons (cons (quote vector) (cons A (quote ()))) (cons (quote -->) (cons (cons (quote vector) (cons A (quote ()))) (quote ())))) V5420 V5421)))) (export shen.type-signature-of-tlv) (quote shen.type-signature-of-tlv))
(begin (register-function-arity (quote shen.type-signature-of-tc) 3) (define (kl:shen.type-signature-of-tc V5429 V5430 V5431) (begin (kl:shen.incinfs) (kl:unify! V5429 (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ())))) V5430 V5431))) (export shen.type-signature-of-tc) (quote shen.type-signature-of-tc))
(begin (register-function-arity (quote shen.type-signature-of-tc?) 3) (define (kl:shen.type-signature-of-tc? V5439 V5440 V5441) (begin (kl:shen.incinfs) (kl:unify! V5439 (cons (quote -->) (cons (quote boolean) (quote ()))) V5440 V5441))) (export shen.type-signature-of-tc?) (quote shen.type-signature-of-tc?))
(begin (register-function-arity (quote shen.type-signature-of-thaw) 3) (define (kl:shen.type-signature-of-thaw V5449 V5450 V5451) (let ((A (kl:shen.newpv V5450))) (begin (kl:shen.incinfs) (kl:unify! V5449 (cons (cons (quote lazy) (cons A (quote ()))) (cons (quote -->) (cons A (quote ())))) V5450 V5451)))) (export shen.type-signature-of-thaw) (quote shen.type-signature-of-thaw))
(begin (register-function-arity (quote shen.type-signature-of-track) 3) (define (kl:shen.type-signature-of-track V5459 V5460 V5461) (begin (kl:shen.incinfs) (kl:unify! V5459 (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ())))) V5460 V5461))) (export shen.type-signature-of-track) (quote shen.type-signature-of-track))
(begin (register-function-arity (quote shen.type-signature-of-trap-error) 3) (define (kl:shen.type-signature-of-trap-error V5469 V5470 V5471) (let ((A (kl:shen.newpv V5470))) (begin (kl:shen.incinfs) (kl:unify! V5469 (cons A (cons (quote -->) (cons (cons (cons (quote exception) (cons (quote -->) (cons A (quote ())))) (cons (quote -->) (cons A (quote ())))) (quote ())))) V5470 V5471)))) (export shen.type-signature-of-trap-error) (quote shen.type-signature-of-trap-error))
(begin (register-function-arity (quote shen.type-signature-of-tuple?) 3) (define (kl:shen.type-signature-of-tuple? V5479 V5480 V5481) (let ((A (kl:shen.newpv V5480))) (begin (kl:shen.incinfs) (kl:unify! V5479 (cons A (cons (quote -->) (cons (quote boolean) (quote ())))) V5480 V5481)))) (export shen.type-signature-of-tuple?) (quote shen.type-signature-of-tuple?))
(begin (register-function-arity (quote shen.type-signature-of-undefmacro) 3) (define (kl:shen.type-signature-of-undefmacro V5489 V5490 V5491) (begin (kl:shen.incinfs) (kl:unify! V5489 (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ())))) V5490 V5491))) (export shen.type-signature-of-undefmacro) (quote shen.type-signature-of-undefmacro))
(begin (register-function-arity (quote shen.type-signature-of-union) 3) (define (kl:shen.type-signature-of-union V5499 V5500 V5501) (let ((A (kl:shen.newpv V5500))) (begin (kl:shen.incinfs) (kl:unify! V5499 (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons A (quote ()))) (quote ())))) (quote ())))) V5500 V5501)))) (export shen.type-signature-of-union) (quote shen.type-signature-of-union))
(begin (register-function-arity (quote shen.type-signature-of-unprofile) 3) (define (kl:shen.type-signature-of-unprofile V5509 V5510 V5511) (let ((A (kl:shen.newpv V5510))) (let ((B (kl:shen.newpv V5510))) (begin (kl:shen.incinfs) (kl:unify! V5509 (cons (cons A (cons (quote -->) (cons B (quote ())))) (cons (quote -->) (cons (cons A (cons (quote -->) (cons B (quote ())))) (quote ())))) V5510 V5511))))) (export shen.type-signature-of-unprofile) (quote shen.type-signature-of-unprofile))
(begin (register-function-arity (quote shen.type-signature-of-untrack) 3) (define (kl:shen.type-signature-of-untrack V5519 V5520 V5521) (begin (kl:shen.incinfs) (kl:unify! V5519 (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ())))) V5520 V5521))) (export shen.type-signature-of-untrack) (quote shen.type-signature-of-untrack))
(begin (register-function-arity (quote shen.type-signature-of-unspecialise) 3) (define (kl:shen.type-signature-of-unspecialise V5529 V5530 V5531) (begin (kl:shen.incinfs) (kl:unify! V5529 (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ())))) V5530 V5531))) (export shen.type-signature-of-unspecialise) (quote shen.type-signature-of-unspecialise))
(begin (register-function-arity (quote shen.type-signature-of-variable?) 3) (define (kl:shen.type-signature-of-variable? V5539 V5540 V5541) (let ((A (kl:shen.newpv V5540))) (begin (kl:shen.incinfs) (kl:unify! V5539 (cons A (cons (quote -->) (cons (quote boolean) (quote ())))) V5540 V5541)))) (export shen.type-signature-of-variable?) (quote shen.type-signature-of-variable?))
(begin (register-function-arity (quote shen.type-signature-of-vector?) 3) (define (kl:shen.type-signature-of-vector? V5549 V5550 V5551) (let ((A (kl:shen.newpv V5550))) (begin (kl:shen.incinfs) (kl:unify! V5549 (cons A (cons (quote -->) (cons (quote boolean) (quote ())))) V5550 V5551)))) (export shen.type-signature-of-vector?) (quote shen.type-signature-of-vector?))
(begin (register-function-arity (quote shen.type-signature-of-version) 3) (define (kl:shen.type-signature-of-version V5559 V5560 V5561) (begin (kl:shen.incinfs) (kl:unify! V5559 (cons (quote -->) (cons (quote string) (quote ()))) V5560 V5561))) (export shen.type-signature-of-version) (quote shen.type-signature-of-version))
(begin (register-function-arity (quote shen.type-signature-of-write-to-file) 3) (define (kl:shen.type-signature-of-write-to-file V5569 V5570 V5571) (let ((A (kl:shen.newpv V5570))) (begin (kl:shen.incinfs) (kl:unify! V5569 (cons (quote string) (cons (quote -->) (cons (cons A (cons (quote -->) (cons A (quote ())))) (quote ())))) V5570 V5571)))) (export shen.type-signature-of-write-to-file) (quote shen.type-signature-of-write-to-file))
(begin (register-function-arity (quote shen.type-signature-of-write-byte) 3) (define (kl:shen.type-signature-of-write-byte V5579 V5580 V5581) (begin (kl:shen.incinfs) (kl:unify! V5579 (cons (quote number) (cons (quote -->) (cons (cons (cons (quote stream) (cons (quote out) (quote ()))) (cons (quote -->) (cons (quote number) (quote ())))) (quote ())))) V5580 V5581))) (export shen.type-signature-of-write-byte) (quote shen.type-signature-of-write-byte))
(begin (register-function-arity (quote shen.type-signature-of-y-or-n?) 3) (define (kl:shen.type-signature-of-y-or-n? V5589 V5590 V5591) (begin (kl:shen.incinfs) (kl:unify! V5589 (cons (quote string) (cons (quote -->) (cons (quote boolean) (quote ())))) V5590 V5591))) (export shen.type-signature-of-y-or-n?) (quote shen.type-signature-of-y-or-n?))
(begin (register-function-arity (quote shen.type-signature-of->) 3) (define (kl:shen.type-signature-of-> V5599 V5600 V5601) (begin (kl:shen.incinfs) (kl:unify! V5599 (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ())))) V5600 V5601))) (export shen.type-signature-of->) (quote shen.type-signature-of->))
(begin (register-function-arity (quote shen.type-signature-of-<) 3) (define (kl:shen.type-signature-of-< V5609 V5610 V5611) (begin (kl:shen.incinfs) (kl:unify! V5609 (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ())))) V5610 V5611))) (export shen.type-signature-of-<) (quote shen.type-signature-of-<))
(begin (register-function-arity (quote shen.type-signature-of->=) 3) (define (kl:shen.type-signature-of->= V5619 V5620 V5621) (begin (kl:shen.incinfs) (kl:unify! V5619 (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ())))) V5620 V5621))) (export shen.type-signature-of->=) (quote shen.type-signature-of->=))
(begin (register-function-arity (quote shen.type-signature-of-<=) 3) (define (kl:shen.type-signature-of-<= V5629 V5630 V5631) (begin (kl:shen.incinfs) (kl:unify! V5629 (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ())))) V5630 V5631))) (export shen.type-signature-of-<=) (quote shen.type-signature-of-<=))
(begin (register-function-arity (quote shen.type-signature-of-=) 3) (define (kl:shen.type-signature-of-= V5639 V5640 V5641) (let ((A (kl:shen.newpv V5640))) (begin (kl:shen.incinfs) (kl:unify! V5639 (cons A (cons (quote -->) (cons (cons A (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ())))) V5640 V5641)))) (export shen.type-signature-of-=) (quote shen.type-signature-of-=))
(begin (register-function-arity (quote shen.type-signature-of-+) 3) (define (kl:shen.type-signature-of-+ V5649 V5650 V5651) (begin (kl:shen.incinfs) (kl:unify! V5649 (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote number) (quote ())))) (quote ())))) V5650 V5651))) (export shen.type-signature-of-+) (quote shen.type-signature-of-+))
(begin (register-function-arity (quote shen.type-signature-of-/) 3) (define (kl:shen.type-signature-of-/ V5659 V5660 V5661) (begin (kl:shen.incinfs) (kl:unify! V5659 (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote number) (quote ())))) (quote ())))) V5660 V5661))) (export shen.type-signature-of-/) (quote shen.type-signature-of-/))
(begin (register-function-arity (quote shen.type-signature-of--) 3) (define (kl:shen.type-signature-of-- V5669 V5670 V5671) (begin (kl:shen.incinfs) (kl:unify! V5669 (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote number) (quote ())))) (quote ())))) V5670 V5671))) (export shen.type-signature-of--) (quote shen.type-signature-of--))
(begin (register-function-arity (quote shen.type-signature-of-*) 3) (define (kl:shen.type-signature-of-* V5679 V5680 V5681) (begin (kl:shen.incinfs) (kl:unify! V5679 (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote number) (quote ())))) (quote ())))) V5680 V5681))) (export shen.type-signature-of-*) (quote shen.type-signature-of-*))
(begin (register-function-arity (quote shen.type-signature-of-==) 3) (define (kl:shen.type-signature-of-== V5689 V5690 V5691) (let ((A (kl:shen.newpv V5690))) (let ((B (kl:shen.newpv V5690))) (begin (kl:shen.incinfs) (kl:unify! V5689 (cons A (cons (quote -->) (cons (cons B (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ())))) V5690 V5691))))) (export shen.type-signature-of-==) (quote shen.type-signature-of-==))
