(module "compiled/init.kl")
"Copyright (c) 2010-2015, Mark Tarver\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation\nand/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
(begin (register-function-arity (quote shen.initialise) 0) (define (kl:shen.initialise) (begin (kl:set (quote shen.*installing-kl*) #f) (begin (kl:set (quote shen.*history*) (quote ())) (begin (kl:set (quote shen.*tc*) #f) (begin (kl:set (quote *property-vector*) (kl:shen.dict 20000)) (begin (kl:set (quote shen.*process-counter*) 0) (begin (kl:set (quote shen.*varcounter*) (kl:vector 10000)) (begin (kl:set (quote shen.*prologvectors*) (kl:vector 10000)) (begin (kl:set (quote shen.*demodulation-function*) (lambda (X) X)) (begin (kl:set (quote shen.*macroreg*) (cons (quote shen.timer-macro) (cons (quote shen.cases-macro) (cons (quote shen.abs-macro) (cons (quote shen.put/get-macro) (cons (quote shen.compile-macro) (cons (quote shen.datatype-macro) (cons (quote shen.let-macro) (cons (quote shen.assoc-macro) (cons (quote shen.make-string-macro) (cons (quote shen.output-macro) (cons (quote shen.input-macro) (cons (quote shen.error-macro) (cons (quote shen.prolog-macro) (cons (quote shen.synonyms-macro) (cons (quote shen.nl-macro) (cons (quote shen._waspvm_at_s-macro) (cons (quote shen.defprolog-macro) (cons (quote shen.function-macro) (quote ())))))))))))))))))))) (begin (kl:set (quote *macros*) (cons (lambda (X) (kl:shen.timer-macro X)) (cons (lambda (X) (kl:shen.cases-macro X)) (cons (lambda (X) (kl:shen.abs-macro X)) (cons (lambda (X) (kl:shen.put/get-macro X)) (cons (lambda (X) (kl:shen.compile-macro X)) (cons (lambda (X) (kl:shen.datatype-macro X)) (cons (lambda (X) (kl:shen.let-macro X)) (cons (lambda (X) (kl:shen.assoc-macro X)) (cons (lambda (X) (kl:shen.make-string-macro X)) (cons (lambda (X) (kl:shen.output-macro X)) (cons (lambda (X) (kl:shen.input-macro X)) (cons (lambda (X) (kl:shen.error-macro X)) (cons (lambda (X) (kl:shen.prolog-macro X)) (cons (lambda (X) (kl:shen.synonyms-macro X)) (cons (lambda (X) (kl:shen.nl-macro X)) (cons (lambda (X) (kl:shen._waspvm_at_s-macro X)) (cons (lambda (X) (kl:shen.defprolog-macro X)) (cons (lambda (X) (kl:shen.function-macro X)) (quote ())))))))))))))))))))) (begin (kl:set (quote shen.*gensym*) 0) (begin (kl:set (quote shen.*tracking*) (quote ())) (begin (kl:set (quote shen.*alphabet*) (cons (quote A) (cons (quote B) (cons (quote C) (cons (quote D) (cons (quote E) (cons (quote F) (cons (quote G) (cons (quote H) (cons (quote I) (cons (quote J) (cons (quote K) (cons (quote L) (cons (quote M) (cons (quote N) (cons (quote O) (cons (quote P) (cons (quote Q) (cons (quote R) (cons (quote S) (cons (quote T) (cons (quote U) (cons (quote V) (cons (quote W) (cons (quote X) (cons (quote Y) (cons (quote Z) (quote ())))))))))))))))))))))))))))) (begin (kl:set (quote shen.*special*) (cons (quote _waspvm_at_p) (cons (quote _waspvm_at_s) (cons (quote _waspvm_at_v) (cons (quote cons) (cons (quote lambda) (cons (quote let) (cons (quote where) (cons (quote set) (cons (quote open) (quote ()))))))))))) (begin (kl:set (quote shen.*extraspecial*) (cons (quote define) (cons (quote shen.process-datatype) (cons (quote input+) (cons (quote defcc) (cons (quote shen.read+) (cons (quote defmacro) (quote ())))))))) (begin (kl:set (quote shen.*spy*) #f) (begin (kl:set (quote shen.*datatypes*) (quote ())) (begin (kl:set (quote shen.*alldatatypes*) (quote ())) (begin (kl:set (quote shen.*shen-type-theory-enabled?*) #t) (begin (kl:set (quote shen.*synonyms*) (quote ())) (begin (kl:set (quote shen.*system*) (quote ())) (begin (kl:set (quote shen.*signedfuncs*) (quote ())) (begin (kl:set (quote shen.*maxcomplexity*) 128) (begin (kl:set (quote shen.*occurs*) #t) (begin (kl:set (quote shen.*maxinferences*) 1000000) (begin (kl:set (quote *maximum-print-sequence-size*) 20) (begin (kl:set (quote shen.*catch*) 0) (begin (kl:set (quote shen.*call*) 0) (begin (kl:set (quote shen.*infs*) 0) (begin (kl:set (quote *hush*) #f) (begin (kl:set (quote shen.*optimise*) #f) (begin (kl:set (quote *version*) "Shen 22.0") (begin (if (kl:not (kl:bound? (quote *home-directory*))) (kl:set (quote *home-directory*) "") (quote shen.skip)) (begin (if (kl:not (kl:bound? (quote *sterror*))) (kl:set (quote *sterror*) (kl:value (quote *stoutput*))) (quote shen.skip)) (begin (kl:shen.initialise_arity_table (cons (quote abort) (cons 0 (cons (quote absvector?) (cons 1 (cons (quote absvector) (cons 1 (cons (quote adjoin) (cons 2 (cons (quote and) (cons 2 (cons (quote append) (cons 2 (cons (quote arity) (cons 1 (cons (quote assoc) (cons 2 (cons (quote boolean?) (cons 1 (cons (quote bound?) (cons 1 (cons (quote cd) (cons 1 (cons (quote close) (cons 1 (cons (quote compile) (cons 3 (cons (quote concat) (cons 2 (cons (quote cons) (cons 2 (cons (quote cons?) (cons 1 (cons (quote cn) (cons 2 (cons (quote declare) (cons 2 (cons (quote destroy) (cons 1 (cons (quote difference) (cons 2 (cons (quote do) (cons 2 (cons (quote element?) (cons 2 (cons (quote empty?) (cons 1 (cons (quote enable-type-theory) (cons 1 (cons (quote error-to-string) (cons 1 (cons (quote shen.interror) (cons 2 (cons (quote eval) (cons 1 (cons (quote eval-kl) (cons 1 (cons (quote explode) (cons 1 (cons (quote external) (cons 1 (cons (quote fail-if) (cons 2 (cons (quote fail) (cons 0 (cons (quote fix) (cons 2 (cons (quote findall) (cons 5 (cons (quote freeze) (cons 1 (cons (quote fst) (cons 1 (cons (quote gensym) (cons 1 (cons (quote get) (cons 3 (cons (quote get-time) (cons 1 (cons (quote address->) (cons 3 (cons (quote <-address) (cons 2 (cons (quote <-vector) (cons 2 (cons (quote >) (cons 2 (cons (quote >=) (cons 2 (cons (quote =) (cons 2 (cons (quote hash) (cons 2 (cons (quote hd) (cons 1 (cons (quote hdv) (cons 1 (cons (quote hdstr) (cons 1 (cons (quote head) (cons 1 (cons (quote if) (cons 3 (cons (quote integer?) (cons 1 (cons (quote intern) (cons 1 (cons (quote identical) (cons 4 (cons (quote inferences) (cons 0 (cons (quote input) (cons 1 (cons (quote input+) (cons 2 (cons (quote implementation) (cons 0 (cons (quote intersection) (cons 2 (cons (quote internal) (cons 1 (cons (quote it) (cons 0 (cons (quote kill) (cons 0 (cons (quote language) (cons 0 (cons (quote length) (cons 1 (cons (quote limit) (cons 1 (cons (quote lineread) (cons 1 (cons (quote load) (cons 1 (cons (quote <) (cons 2 (cons (quote <=) (cons 2 (cons (quote vector) (cons 1 (cons (quote macroexpand) (cons 1 (cons (quote map) (cons 2 (cons (quote mapcan) (cons 2 (cons (quote maxinferences) (cons 1 (cons (quote nl) (cons 1 (cons (quote not) (cons 1 (cons (quote nth) (cons 2 (cons (quote n->string) (cons 1 (cons (quote number?) (cons 1 (cons (quote occurs-check) (cons 1 (cons (quote occurrences) (cons 2 (cons (quote occurs-check) (cons 1 (cons (quote open) (cons 2 (cons (quote optimise) (cons 1 (cons (quote or) (cons 2 (cons (quote os) (cons 0 (cons (quote package) (cons 3 (cons (quote package?) (cons 1 (cons (quote port) (cons 0 (cons (quote porters) (cons 0 (cons (quote pos) (cons 2 (cons (quote print) (cons 1 (cons (quote profile) (cons 1 (cons (quote profile-results) (cons 1 (cons (quote pr) (cons 2 (cons (quote ps) (cons 1 (cons (quote preclude) (cons 1 (cons (quote preclude-all-but) (cons 1 (cons (quote protect) (cons 1 (cons (quote address->) (cons 3 (cons (quote put) (cons 4 (cons (quote shen.reassemble) (cons 2 (cons (quote read-file-as-string) (cons 1 (cons (quote read-file) (cons 1 (cons (quote read-file-as-bytelist) (cons 1 (cons (quote read) (cons 1 (cons (quote read-byte) (cons 1 (cons (quote read-from-string) (cons 1 (cons (quote receive) (cons 1 (cons (quote release) (cons 0 (cons (quote remove) (cons 2 (cons (quote shen.require) (cons 3 (cons (quote reverse) (cons 1 (cons (quote set) (cons 2 (cons (quote simple-error) (cons 1 (cons (quote snd) (cons 1 (cons (quote specialise) (cons 1 (cons (quote spy) (cons 1 (cons (quote step) (cons 1 (cons (quote stinput) (cons 0 (cons (quote stoutput) (cons 0 (cons (quote sterror) (cons 0 (cons (quote string->n) (cons 1 (cons (quote string->symbol) (cons 1 (cons (quote string?) (cons 1 (cons (quote str) (cons 1 (cons (quote subst) (cons 3 (cons (quote sum) (cons 1 (cons (quote symbol?) (cons 1 (cons (quote systemf) (cons 1 (cons (quote tail) (cons 1 (cons (quote tl) (cons 1 (cons (quote tc) (cons 1 (cons (quote tc?) (cons 0 (cons (quote thaw) (cons 1 (cons (quote tlstr) (cons 1 (cons (quote track) (cons 1 (cons (quote trap-error) (cons 2 (cons (quote tuple?) (cons 1 (cons (quote type) (cons 2 (cons (quote return) (cons 3 (cons (quote undefmacro) (cons 1 (cons (quote unput) (cons 3 (cons (quote unprofile) (cons 1 (cons (quote unify) (cons 4 (cons (quote unify!) (cons 4 (cons (quote union) (cons 2 (cons (quote untrack) (cons 1 (cons (quote unspecialise) (cons 1 (cons (quote undefmacro) (cons 1 (cons (quote vector) (cons 1 (cons (quote vector?) (cons 1 (cons (quote vector->) (cons 3 (cons (quote value) (cons 1 (cons (quote variable?) (cons 1 (cons (quote version) (cons 0 (cons (quote write-byte) (cons 2 (cons (quote write-to-file) (cons 2 (cons (quote y-or-n?) (cons 1 (cons (quote +) (cons 2 (cons (quote *) (cons 2 (cons (quote /) (cons 2 (cons (quote -) (cons 2 (cons (quote ==) (cons 2 (cons (quote <e>) (cons 1 (cons (quote <!>) (cons 1 (cons (quote _waspvm_at_p) (cons 2 (cons (quote _waspvm_at_v) (cons 2 (cons (quote _waspvm_at_s) (cons 2 (cons (quote preclude) (cons 1 (cons (quote include) (cons 1 (cons (quote preclude-all-but) (cons 1 (cons (quote include-all-but) (cons 1 (quote ())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (begin (kl:put (kl:intern "shen") (quote shen.external-symbols) (cons (quote !) (cons (quote }) (cons (quote {) (cons (quote -->) (cons (quote <--) (cons (quote &&) (cons (quote :) (cons (quote _waspvm_sc_) (cons (quote :-) (cons (quote :=) (cons (quote _) (cons (string->symbol ",") (cons (quote *language*) (cons (quote *implementation*) (cons (quote *stinput*) (cons (quote *stoutput*) (cons (quote *sterror*) (cons (quote *home-directory*) (cons (quote *version*) (cons (quote *maximum-print-sequence-size*) (cons (quote *macros*) (cons (quote *os*) (cons (quote *release*) (cons (quote *property-vector*) (cons (quote *port*) (cons (quote *porters*) (cons (quote *hush*) (cons (quote _waspvm_at_v) (cons (quote _waspvm_at_p) (cons (quote _waspvm_at_s) (cons (quote <-) (cons (quote ->) (cons (quote <e>) (cons (quote <!>) (cons (quote ==) (cons (quote =) (cons (quote >=) (cons (quote >) (cons (quote /.) (cons (quote =!) (cons (quote _waspvm_dl_) (cons (quote -) (cons (quote /) (cons (quote *) (cons (quote +) (cons (quote <=) (cons (quote <) (cons (quote >>) (cons (quote y-or-n?) (cons (quote write-to-file) (cons (quote write-byte) (cons (quote where) (cons (quote when) (cons (quote warn) (cons (quote version) (cons (quote verified) (cons (quote variable?) (cons (quote value) (cons (quote vector->) (cons (quote <-vector) (cons (quote vector) (cons (quote vector?) (cons (quote unspecialise) (cons (quote untrack) (cons (quote unit) (cons (quote shen.unix) (cons (quote union) (cons (quote unify) (cons (quote unify!) (cons (quote unput) (cons (quote unprofile) (cons (quote undefmacro) (cons (quote return) (cons (quote type) (cons (quote tuple?) (cons #t (cons (quote trap-error) (cons (quote track) (cons (quote time) (cons (quote thaw) (cons (quote tc?) (cons (quote tc) (cons (quote tl) (cons (quote tlstr) (cons (quote tlv) (cons (quote tail) (cons (quote systemf) (cons (quote synonyms) (cons (quote symbol) (cons (quote symbol?) (cons (quote string->symbol) (cons (quote sum) (cons (quote subst) (cons (quote string?) (cons (quote string->n) (cons (quote stream) (cons (quote string) (cons (quote stinput) (cons (quote sterror) (cons (quote stoutput) (cons (quote step) (cons (quote spy) (cons (quote specialise) (cons (quote snd) (cons (quote simple-error) (cons (quote set) (cons (quote save) (cons (quote str) (cons (quote run) (cons (quote reverse) (cons (quote remove) (cons (quote release) (cons (quote read) (cons (quote receive) (cons (quote read-file) (cons (quote read-file-as-bytelist) (cons (quote read-file-as-string) (cons (quote read-byte) (cons (quote read-from-string) (cons (quote package?) (cons (quote put) (cons (quote preclude) (cons (quote preclude-all-but) (cons (quote ps) (cons (quote prolog?) (cons (quote protect) (cons (quote profile-results) (cons (quote profile) (cons (quote print) (cons (quote pr) (cons (quote pos) (cons (quote porters) (cons (quote port) (cons (quote package) (cons (quote output) (cons (quote out) (cons (quote os) (cons (quote or) (cons (quote optimise) (cons (quote open) (cons (quote occurrences) (cons (quote occurs-check) (cons (quote n->string) (cons (quote number?) (cons (quote number) (cons (quote null) (cons (quote nth) (cons (quote not) (cons (quote nl) (cons (quote mode) (cons (quote macroexpand) (cons (quote maxinferences) (cons (quote mapcan) (cons (quote map) (cons (quote make-string) (cons (quote load) (cons (quote loaded) (cons (quote list) (cons (quote lineread) (cons (quote limit) (cons (quote length) (cons (quote let) (cons (quote lazy) (cons (quote lambda) (cons (quote language) (cons (quote kill) (cons (quote is) (cons (quote intersection) (cons (quote inferences) (cons (quote intern) (cons (quote integer?) (cons (quote input) (cons (quote input+) (cons (quote include) (cons (quote include-all-but) (cons (quote it) (cons (quote in) (cons (quote internal) (cons (quote implementation) (cons (quote if) (cons (quote identical) (cons (quote head) (cons (quote hd) (cons (quote hdv) (cons (quote hdstr) (cons (quote hash) (cons (quote get) (cons (quote get-time) (cons (quote gensym) (cons (quote function) (cons (quote fst) (cons (quote freeze) (cons (quote fix) (cons (quote file) (cons (quote fail) (cons (quote fail-if) (cons (quote fwhen) (cons (quote findall) (cons #f (cons (quote enable-type-theory) (cons (quote explode) (cons (quote external) (cons (quote exception) (cons (quote eval-kl) (cons (quote eval) (cons (quote error-to-string) (cons (quote error) (cons (quote empty?) (cons (quote element?) (cons (quote do) (cons (quote difference) (cons (quote destroy) (cons (quote defun) (cons (quote define) (cons (quote defmacro) (cons (quote defcc) (cons (quote defprolog) (cons (quote declare) (cons (quote datatype) (cons (quote cut) (cons (quote cn) (cons (quote cons?) (cons (quote cons) (cons (quote cond) (cons (quote concat) (cons (quote compile) (cons (quote cd) (cons (quote cases) (cons (quote call) (cons (quote close) (cons (quote bind) (cons (quote bound?) (cons (quote boolean?) (cons (quote boolean) (cons (quote bar!) (cons (quote assoc) (cons (quote arity) (cons (quote abort) (cons (quote append) (cons (quote and) (cons (quote adjoin) (cons (quote <-address) (cons (quote address->) (cons (quote absvector?) (cons (quote absvector) (quote ())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (kl:value (quote *property-vector*))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.datatype-error) (lambda (X) (kl:shen.datatype-error X)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.tuple) (lambda (X) (kl:shen.tuple X)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.pvar) (lambda (X) (kl:shen.pvar X)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.dictionary) (lambda (X) (kl:shen.dictionary X)))) (begin (kl:shen.set-lambda-form-entry (cons (quote _waspvm_at_v) (lambda (V1579) (lambda (V1580) (kl:_waspvm_at_v V1579 V1580))))) (begin (kl:shen.set-lambda-form-entry (cons (quote _waspvm_at_p) (lambda (V1581) (lambda (V1582) (kl:_waspvm_at_p V1581 V1582))))) (begin (kl:shen.set-lambda-form-entry (cons (quote _waspvm_at_s) (lambda (V1583) (lambda (V1584) (kl:_waspvm_at_s V1583 V1584))))) (begin (kl:shen.set-lambda-form-entry (cons (quote <e>) (lambda (V1585) (kl:<e> V1585)))) (begin (kl:shen.set-lambda-form-entry (cons (quote <!>) (lambda (V1586) (kl:<!> V1586)))) (begin (kl:shen.set-lambda-form-entry (cons (quote ==) (lambda (V1587) (lambda (V1588) (kl:== V1587 V1588))))) (begin (kl:shen.set-lambda-form-entry (cons (quote =) (lambda (V1589) (lambda (V1590) (kl:= V1589 V1590))))) (begin (kl:shen.set-lambda-form-entry (cons (quote >=) (lambda (V1591) (lambda (V1592) (>= V1591 V1592))))) (begin (kl:shen.set-lambda-form-entry (cons (quote >) (lambda (V1593) (lambda (V1594) (> V1593 V1594))))) (begin (kl:shen.set-lambda-form-entry (cons (quote -) (lambda (V1595) (lambda (V1596) (- V1595 V1596))))) (begin (kl:shen.set-lambda-form-entry (cons (quote /) (lambda (V1597) (lambda (V1598) (/ V1597 V1598))))) (begin (kl:shen.set-lambda-form-entry (cons (quote *) (lambda (V1599) (lambda (V1600) (* V1599 V1600))))) (begin (kl:shen.set-lambda-form-entry (cons (quote +) (lambda (V1601) (lambda (V1602) (+ V1601 V1602))))) (begin (kl:shen.set-lambda-form-entry (cons (quote <=) (lambda (V1603) (lambda (V1604) (<= V1603 V1604))))) (begin (kl:shen.set-lambda-form-entry (cons (quote <) (lambda (V1605) (lambda (V1606) (< V1605 V1606))))) (begin (kl:shen.set-lambda-form-entry (cons (quote y-or-n?) (lambda (V1607) (kl:y-or-n? V1607)))) (begin (kl:shen.set-lambda-form-entry (cons (quote write-to-file) (lambda (V1608) (lambda (V1609) (kl:write-to-file V1608 V1609))))) (begin (kl:shen.set-lambda-form-entry (cons (quote write-byte) (lambda (V1610) (lambda (V1611) (write-u8 V1610 V1611))))) (begin (kl:shen.set-lambda-form-entry (cons (quote variable?) (lambda (V1612) (kl:variable? V1612)))) (begin (kl:shen.set-lambda-form-entry (cons (quote value) (lambda (V1613) (kl:value V1613)))) (begin (kl:shen.set-lambda-form-entry (cons (quote vector->) (lambda (V1614) (lambda (V1615) (lambda (V1616) (kl:vector-> V1614 V1615 V1616)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote <-vector) (lambda (V1617) (lambda (V1618) (kl:<-vector V1617 V1618))))) (begin (kl:shen.set-lambda-form-entry (cons (quote vector) (lambda (V1619) (kl:vector V1619)))) (begin (kl:shen.set-lambda-form-entry (cons (quote vector?) (lambda (V1620) (kl:vector? V1620)))) (begin (kl:shen.set-lambda-form-entry (cons (quote unspecialise) (lambda (V1621) (kl:unspecialise V1621)))) (begin (kl:shen.set-lambda-form-entry (cons (quote untrack) (lambda (V1622) (kl:untrack V1622)))) (begin (kl:shen.set-lambda-form-entry (cons (quote union) (lambda (V1623) (lambda (V1624) (kl:union V1623 V1624))))) (begin (kl:shen.set-lambda-form-entry (cons (quote unify) (lambda (V1625) (lambda (V1626) (lambda (V1627) (lambda (V1628) (kl:unify V1625 V1626 V1627 V1628))))))) (begin (kl:shen.set-lambda-form-entry (cons (quote unify!) (lambda (V1629) (lambda (V1630) (lambda (V1631) (lambda (V1632) (kl:unify! V1629 V1630 V1631 V1632))))))) (begin (kl:shen.set-lambda-form-entry (cons (quote unput) (lambda (V1633) (lambda (V1634) (lambda (V1635) (kl:unput V1633 V1634 V1635)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote unprofile) (lambda (V1636) (kl:unprofile V1636)))) (begin (kl:shen.set-lambda-form-entry (cons (quote undefmacro) (lambda (V1637) (kl:undefmacro V1637)))) (begin (kl:shen.set-lambda-form-entry (cons (quote return) (lambda (V1638) (lambda (V1639) (lambda (V1640) (kl:return V1638 V1639 V1640)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote type) (lambda (V1641) (lambda (V1642) V1641)))) (begin (kl:shen.set-lambda-form-entry (cons (quote tuple?) (lambda (V1643) (kl:tuple? V1643)))) (begin (kl:shen.set-lambda-form-entry (cons (quote trap-error) (lambda (V1644) (lambda (V1645) (guard (lambda (e) (V1645 e)) V1644))))) (begin (kl:shen.set-lambda-form-entry (cons (quote track) (lambda (V1646) (kl:track V1646)))) (begin (kl:shen.set-lambda-form-entry (cons (quote thaw) (lambda (V1647) (kl:thaw V1647)))) (begin (kl:shen.set-lambda-form-entry (cons (quote tc) (lambda (V1648) (kl:tc V1648)))) (begin (kl:shen.set-lambda-form-entry (cons (quote tl) (lambda (V1649) (cdr V1649)))) (begin (kl:shen.set-lambda-form-entry (cons (quote tlstr) (lambda (V1650) (string-tail V1650 1)))) (begin (kl:shen.set-lambda-form-entry (cons (quote tail) (lambda (V1651) (kl:tail V1651)))) (begin (kl:shen.set-lambda-form-entry (cons (quote systemf) (lambda (V1652) (kl:systemf V1652)))) (begin (kl:shen.set-lambda-form-entry (cons (quote symbol?) (lambda (V1653) (kl:symbol? V1653)))) (begin (kl:shen.set-lambda-form-entry (cons (quote string->symbol) (lambda (V1654) (kl:string->symbol V1654)))) (begin (kl:shen.set-lambda-form-entry (cons (quote sum) (lambda (V1655) (kl:sum V1655)))) (begin (kl:shen.set-lambda-form-entry (cons (quote subst) (lambda (V1656) (lambda (V1657) (lambda (V1658) (kl:subst V1656 V1657 V1658)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote string?) (lambda (V1659) (string? V1659)))) (begin (kl:shen.set-lambda-form-entry (cons (quote string->n) (lambda (V1660) (string-ref V1660 0)))) (begin (kl:shen.set-lambda-form-entry (cons (quote step) (lambda (V1661) (kl:step V1661)))) (begin (kl:shen.set-lambda-form-entry (cons (quote spy) (lambda (V1662) (kl:spy V1662)))) (begin (kl:shen.set-lambda-form-entry (cons (quote specialise) (lambda (V1663) (kl:specialise V1663)))) (begin (kl:shen.set-lambda-form-entry (cons (quote snd) (lambda (V1664) (kl:snd V1664)))) (begin (kl:shen.set-lambda-form-entry (cons (quote simple-error) (lambda (V1665) (simple-error V1665)))) (begin (kl:shen.set-lambda-form-entry (cons (quote set) (lambda (V1666) (lambda (V1667) (kl:set V1666 V1667))))) (begin (kl:shen.set-lambda-form-entry (cons (quote str) (lambda (V1668) (kl:str V1668)))) (begin (kl:shen.set-lambda-form-entry (cons (quote reverse) (lambda (V1669) (kl:reverse V1669)))) (begin (kl:shen.set-lambda-form-entry (cons (quote remove) (lambda (V1670) (lambda (V1671) (kl:remove V1670 V1671))))) (begin (kl:shen.set-lambda-form-entry (cons (quote read) (lambda (V1672) (kl:read V1672)))) (begin (kl:shen.set-lambda-form-entry (cons (quote read-file) (lambda (V1673) (kl:read-file V1673)))) (begin (kl:shen.set-lambda-form-entry (cons (quote read-file-as-bytelist) (lambda (V1674) (kl:read-file-as-bytelist V1674)))) (begin (kl:shen.set-lambda-form-entry (cons (quote read-file-as-string) (lambda (V1675) (kl:read-file-as-string V1675)))) (begin (kl:shen.set-lambda-form-entry (cons (quote read-byte) (lambda (V1676) (read-u8 V1676)))) (begin (kl:shen.set-lambda-form-entry (cons (quote read-from-string) (lambda (V1677) (kl:read-from-string V1677)))) (begin (kl:shen.set-lambda-form-entry (cons (quote package?) (lambda (V1678) (kl:package? V1678)))) (begin (kl:shen.set-lambda-form-entry (cons (quote put) (lambda (V1679) (lambda (V1680) (lambda (V1681) (lambda (V1682) (kl:put V1679 V1680 V1681 V1682))))))) (begin (kl:shen.set-lambda-form-entry (cons (quote preclude) (lambda (V1683) (kl:preclude V1683)))) (begin (kl:shen.set-lambda-form-entry (cons (quote preclude-all-but) (lambda (V1684) (kl:preclude-all-but V1684)))) (begin (kl:shen.set-lambda-form-entry (cons (quote ps) (lambda (V1685) (kl:ps V1685)))) (begin (kl:shen.set-lambda-form-entry (cons (quote protect) (lambda (V1686) (kl:protect V1686)))) (begin (kl:shen.set-lambda-form-entry (cons (quote profile-results) (lambda (V1687) (kl:profile-results V1687)))) (begin (kl:shen.set-lambda-form-entry (cons (quote profile) (lambda (V1688) (kl:profile V1688)))) (begin (kl:shen.set-lambda-form-entry (cons (quote print) (lambda (V1689) (kl:print V1689)))) (begin (kl:shen.set-lambda-form-entry (cons (quote pr) (lambda (V1690) (lambda (V1691) (kl:pr V1690 V1691))))) (begin (kl:shen.set-lambda-form-entry (cons (quote pos) (lambda (V1692) (lambda (V1693) (make-string 1 (string-ref V1692 V1693)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote or) (lambda (V1694) (lambda (V1695) (or (assert-boolean V1694) (assert-boolean V1695)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote optimise) (lambda (V1696) (kl:optimise V1696)))) (begin (kl:shen.set-lambda-form-entry (cons (quote open) (lambda (V1697) (lambda (V1698) (kl:open V1697 V1698))))) (begin (kl:shen.set-lambda-form-entry (cons (quote occurrences) (lambda (V1699) (lambda (V1700) (kl:occurrences V1699 V1700))))) (begin (kl:shen.set-lambda-form-entry (cons (quote occurs-check) (lambda (V1701) (kl:occurs-check V1701)))) (begin (kl:shen.set-lambda-form-entry (cons (quote n->string) (lambda (V1702) (make-string 1 V1702)))) (begin (kl:shen.set-lambda-form-entry (cons (quote number?) (lambda (V1703) (number? V1703)))) (begin (kl:shen.set-lambda-form-entry (cons (quote nth) (lambda (V1704) (lambda (V1705) (kl:nth V1704 V1705))))) (begin (kl:shen.set-lambda-form-entry (cons (quote not) (lambda (V1706) (kl:not V1706)))) (begin (kl:shen.set-lambda-form-entry (cons (quote nl) (lambda (V1707) (kl:nl V1707)))) (begin (kl:shen.set-lambda-form-entry (cons (quote macroexpand) (lambda (V1708) (kl:macroexpand V1708)))) (begin (kl:shen.set-lambda-form-entry (cons (quote maxinferences) (lambda (V1709) (kl:maxinferences V1709)))) (begin (kl:shen.set-lambda-form-entry (cons (quote mapcan) (lambda (V1710) (lambda (V1711) (kl:mapcan V1710 V1711))))) (begin (kl:shen.set-lambda-form-entry (cons (quote map) (lambda (V1712) (lambda (V1713) (kl:map V1712 V1713))))) (begin (kl:shen.set-lambda-form-entry (cons (quote load) (lambda (V1714) (kl:load V1714)))) (begin (kl:shen.set-lambda-form-entry (cons (quote lineread) (lambda (V1715) (kl:lineread V1715)))) (begin (kl:shen.set-lambda-form-entry (cons (quote limit) (lambda (V1716) (kl:limit V1716)))) (begin (kl:shen.set-lambda-form-entry (cons (quote length) (lambda (V1717) (kl:length V1717)))) (begin (kl:shen.set-lambda-form-entry (cons (quote intersection) (lambda (V1718) (lambda (V1719) (kl:intersection V1718 V1719))))) (begin (kl:shen.set-lambda-form-entry (cons (quote intern) (lambda (V1720) (kl:intern V1720)))) (begin (kl:shen.set-lambda-form-entry (cons (quote integer?) (lambda (V1721) (kl:integer? V1721)))) (begin (kl:shen.set-lambda-form-entry (cons (quote input) (lambda (V1722) (kl:input V1722)))) (begin (kl:shen.set-lambda-form-entry (cons (quote input+) (lambda (V1723) (lambda (V1724) (kl:input+ V1723 V1724))))) (begin (kl:shen.set-lambda-form-entry (cons (quote include) (lambda (V1725) (kl:include V1725)))) (begin (kl:shen.set-lambda-form-entry (cons (quote include-all-but) (lambda (V1726) (kl:include-all-but V1726)))) (begin (kl:shen.set-lambda-form-entry (cons (quote internal) (lambda (V1727) (kl:internal V1727)))) (begin (kl:shen.set-lambda-form-entry (cons (quote if) (lambda (V1728) (lambda (V1729) (lambda (V1730) (if (assert-boolean V1728) V1729 V1730)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote identical) (lambda (V1731) (lambda (V1732) (lambda (V1733) (lambda (V1734) (kl:identical V1731 V1732 V1733 V1734))))))) (begin (kl:shen.set-lambda-form-entry (cons (quote head) (lambda (V1735) (kl:head V1735)))) (begin (kl:shen.set-lambda-form-entry (cons (quote hd) (lambda (V1736) (car V1736)))) (begin (kl:shen.set-lambda-form-entry (cons (quote hdv) (lambda (V1737) (kl:hdv V1737)))) (begin (kl:shen.set-lambda-form-entry (cons (quote hdstr) (lambda (V1738) (kl:hdstr V1738)))) (begin (kl:shen.set-lambda-form-entry (cons (quote hash) (lambda (V1739) (lambda (V1740) (kl:hash V1739 V1740))))) (begin (kl:shen.set-lambda-form-entry (cons (quote get) (lambda (V1741) (lambda (V1742) (lambda (V1743) (kl:get V1741 V1742 V1743)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote get-time) (lambda (V1744) (kl:get-time V1744)))) (begin (kl:shen.set-lambda-form-entry (cons (quote gensym) (lambda (V1745) (kl:gensym V1745)))) (begin (kl:shen.set-lambda-form-entry (cons (quote fst) (lambda (V1746) (kl:fst V1746)))) (begin (kl:shen.set-lambda-form-entry (cons (quote freeze) (lambda (V1747) (lambda () V1747)))) (begin (kl:shen.set-lambda-form-entry (cons (quote fix) (lambda (V1748) (lambda (V1749) (kl:fix V1748 V1749))))) (begin (kl:shen.set-lambda-form-entry (cons (quote fail-if) (lambda (V1750) (lambda (V1751) (kl:fail-if V1750 V1751))))) (begin (kl:shen.set-lambda-form-entry (cons (quote findall) (lambda (V1752) (lambda (V1753) (lambda (V1754) (lambda (V1755) (lambda (V1756) (kl:findall V1752 V1753 V1754 V1755 V1756)))))))) (begin (kl:shen.set-lambda-form-entry (cons (quote enable-type-theory) (lambda (V1757) (kl:enable-type-theory V1757)))) (begin (kl:shen.set-lambda-form-entry (cons (quote explode) (lambda (V1758) (kl:explode V1758)))) (begin (kl:shen.set-lambda-form-entry (cons (quote external) (lambda (V1759) (kl:external V1759)))) (begin (kl:shen.set-lambda-form-entry (cons (quote eval-kl) (lambda (V1760) (kl:eval-kl V1760)))) (begin (kl:shen.set-lambda-form-entry (cons (quote eval) (lambda (V1761) (kl:eval V1761)))) (begin (kl:shen.set-lambda-form-entry (cons (quote error-to-string) (lambda (V1762) (kl:error-to-string V1762)))) (begin (kl:shen.set-lambda-form-entry (cons (quote empty?) (lambda (V1763) (kl:empty? V1763)))) (begin (kl:shen.set-lambda-form-entry (cons (quote element?) (lambda (V1764) (lambda (V1765) (kl:element? V1764 V1765))))) (begin (kl:shen.set-lambda-form-entry (cons (quote do) (lambda (V1766) (lambda (V1767) (begin V1766 V1767))))) (begin (kl:shen.set-lambda-form-entry (cons (quote difference) (lambda (V1768) (lambda (V1769) (kl:difference V1768 V1769))))) (begin (kl:shen.set-lambda-form-entry (cons (quote destroy) (lambda (V1770) (kl:destroy V1770)))) (begin (kl:shen.set-lambda-form-entry (cons (quote declare) (lambda (V1771) (lambda (V1772) (kl:declare V1771 V1772))))) (begin (kl:shen.set-lambda-form-entry (cons (quote cn) (lambda (V1773) (lambda (V1774) (string-append V1773 V1774))))) (begin (kl:shen.set-lambda-form-entry (cons (quote cons?) (lambda (V1775) (pair? V1775)))) (begin (kl:shen.set-lambda-form-entry (cons (quote cons) (lambda (V1776) (lambda (V1777) (cons V1776 V1777))))) (begin (kl:shen.set-lambda-form-entry (cons (quote concat) (lambda (V1778) (lambda (V1779) (kl:concat V1778 V1779))))) (begin (kl:shen.set-lambda-form-entry (cons (quote compile) (lambda (V1780) (lambda (V1781) (lambda (V1782) (kl:compile V1780 V1781 V1782)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote cd) (lambda (V1783) (kl:cd V1783)))) (begin (kl:shen.set-lambda-form-entry (cons (quote close) (lambda (V1784) (kl:close V1784)))) (begin (kl:shen.set-lambda-form-entry (cons (quote bound?) (lambda (V1785) (kl:bound? V1785)))) (begin (kl:shen.set-lambda-form-entry (cons (quote boolean?) (lambda (V1786) (kl:boolean? V1786)))) (begin (kl:shen.set-lambda-form-entry (cons (quote assoc) (lambda (V1787) (lambda (V1788) (kl:assoc V1787 V1788))))) (begin (kl:shen.set-lambda-form-entry (cons (quote arity) (lambda (V1789) (kl:arity V1789)))) (begin (kl:shen.set-lambda-form-entry (cons (quote append) (lambda (V1790) (lambda (V1791) (kl:append V1790 V1791))))) (begin (kl:shen.set-lambda-form-entry (cons (quote and) (lambda (V1792) (lambda (V1793) (and (assert-boolean V1792) (assert-boolean V1793)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote adjoin) (lambda (V1794) (lambda (V1795) (kl:adjoin V1794 V1795))))) (begin (kl:shen.set-lambda-form-entry (cons (quote <-address) (lambda (V1796) (lambda (V1797) (vector-ref V1796 V1797))))) (begin (kl:shen.set-lambda-form-entry (cons (quote address->) (lambda (V1798) (lambda (V1799) (lambda (V1800) (let ((_tmp V1798)) (vector-set! _tmp V1799 V1800) _tmp)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote absvector?) (lambda (V1801) (vector? V1801)))) (begin (kl:shen.set-lambda-form-entry (cons (quote absvector) (lambda (V1802) (make-vector V1802 (quote (quote shen.fail!)))))) (begin (kl:set (quote shen.*history*) (quote ())) (begin (kl:set (quote shen.*step*) #f) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote absvector?) (cons (quote A) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-absvector?) (lambda (V4342) (lambda (V4343) (lambda (V4344) (kl:shen.type-signature-of-absvector? V4342 V4343 V4344)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote adjoin) (cons (quote A) (cons (quote -->) (cons (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote A) (quote ()))) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-adjoin) (lambda (V4352) (lambda (V4353) (lambda (V4354) (kl:shen.type-signature-of-adjoin V4352 V4353 V4354)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote and) (cons (quote boolean) (cons (quote -->) (cons (cons (quote boolean) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-and) (lambda (V4362) (lambda (V4363) (lambda (V4364) (kl:shen.type-signature-of-and V4362 V4363 V4364)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote shen.app) (cons (quote A) (cons (quote -->) (cons (cons (quote string) (cons (quote -->) (cons (cons (quote symbol) (cons (quote -->) (cons (quote string) (quote ())))) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-shen.app) (lambda (V4372) (lambda (V4373) (lambda (V4374) (kl:shen.type-signature-of-shen.app V4372 V4373 V4374)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote append) (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote A) (quote ()))) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-append) (lambda (V4382) (lambda (V4383) (lambda (V4384) (kl:shen.type-signature-of-append V4382 V4383 V4384)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote arity) (cons (quote A) (cons (quote -->) (cons (quote number) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-arity) (lambda (V4392) (lambda (V4393) (lambda (V4394) (kl:shen.type-signature-of-arity V4392 V4393 V4394)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote assoc) (cons (quote A) (cons (quote -->) (cons (cons (cons (quote list) (cons (cons (quote list) (cons (quote A) (quote ()))) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote A) (quote ()))) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-assoc) (lambda (V4402) (lambda (V4403) (lambda (V4404) (kl:shen.type-signature-of-assoc V4402 V4403 V4404)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote boolean?) (cons (quote A) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-boolean?) (lambda (V4412) (lambda (V4413) (lambda (V4414) (kl:shen.type-signature-of-boolean? V4412 V4413 V4414)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote bound?) (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-bound?) (lambda (V4422) (lambda (V4423) (lambda (V4424) (kl:shen.type-signature-of-bound? V4422 V4423 V4424)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote cd) (cons (quote string) (cons (quote -->) (cons (quote string) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-cd) (lambda (V4432) (lambda (V4433) (lambda (V4434) (kl:shen.type-signature-of-cd V4432 V4433 V4434)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote close) (cons (cons (quote stream) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote B) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-close) (lambda (V4442) (lambda (V4443) (lambda (V4444) (kl:shen.type-signature-of-close V4442 V4443 V4444)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote cn) (cons (quote string) (cons (quote -->) (cons (cons (quote string) (cons (quote -->) (cons (quote string) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-cn) (lambda (V4452) (lambda (V4453) (lambda (V4454) (kl:shen.type-signature-of-cn V4452 V4453 V4454)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote compile) (cons (cons (quote A) (cons (quote shen.==>) (cons (quote B) (quote ())))) (cons (quote -->) (cons (cons (quote A) (cons (quote -->) (cons (cons (cons (quote A) (cons (quote -->) (cons (quote B) (quote ())))) (cons (quote -->) (cons (quote B) (quote ())))) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-compile) (lambda (V4462) (lambda (V4463) (lambda (V4464) (kl:shen.type-signature-of-compile V4462 V4463 V4464)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote cons?) (cons (quote A) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-cons?) (lambda (V4472) (lambda (V4473) (lambda (V4474) (kl:shen.type-signature-of-cons? V4472 V4473 V4474)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote destroy) (cons (cons (quote A) (cons (quote -->) (cons (quote B) (quote ())))) (cons (quote -->) (cons (quote symbol) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-destroy) (lambda (V4482) (lambda (V4483) (lambda (V4484) (kl:shen.type-signature-of-destroy V4482 V4483 V4484)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote difference) (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote A) (quote ()))) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-difference) (lambda (V4492) (lambda (V4493) (lambda (V4494) (kl:shen.type-signature-of-difference V4492 V4493 V4494)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote do) (cons (quote A) (cons (quote -->) (cons (cons (quote B) (cons (quote -->) (cons (quote B) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-do) (lambda (V4502) (lambda (V4503) (lambda (V4504) (kl:shen.type-signature-of-do V4502 V4503 V4504)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote <e>) (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote shen.==>) (cons (cons (quote list) (cons (quote B) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-<e>) (lambda (V4512) (lambda (V4513) (lambda (V4514) (kl:shen.type-signature-of-<e> V4512 V4513 V4514)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote <!>) (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote shen.==>) (cons (cons (quote list) (cons (quote A) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-<!>) (lambda (V4522) (lambda (V4523) (lambda (V4524) (kl:shen.type-signature-of-<!> V4522 V4523 V4524)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote element?) (cons (quote A) (cons (quote -->) (cons (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-element?) (lambda (V4532) (lambda (V4533) (lambda (V4534) (kl:shen.type-signature-of-element? V4532 V4533 V4534)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote empty?) (cons (quote A) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-empty?) (lambda (V4542) (lambda (V4543) (lambda (V4544) (kl:shen.type-signature-of-empty? V4542 V4543 V4544)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote enable-type-theory) (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-enable-type-theory) (lambda (V4552) (lambda (V4553) (lambda (V4554) (kl:shen.type-signature-of-enable-type-theory V4552 V4553 V4554)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote external) (cons (quote symbol) (cons (quote -->) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-external) (lambda (V4562) (lambda (V4563) (lambda (V4564) (kl:shen.type-signature-of-external V4562 V4563 V4564)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote error-to-string) (cons (quote exception) (cons (quote -->) (cons (quote string) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-error-to-string) (lambda (V4572) (lambda (V4573) (lambda (V4574) (kl:shen.type-signature-of-error-to-string V4572 V4573 V4574)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote explode) (cons (quote A) (cons (quote -->) (cons (cons (quote list) (cons (quote string) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-explode) (lambda (V4582) (lambda (V4583) (lambda (V4584) (kl:shen.type-signature-of-explode V4582 V4583 V4584)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote fail) (cons (quote -->) (cons (quote symbol) (quote ())))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-fail) (lambda (V4592) (lambda (V4593) (lambda (V4594) (kl:shen.type-signature-of-fail V4592 V4593 V4594)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote fail-if) (cons (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ())))) (cons (quote -->) (cons (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-fail-if) (lambda (V4602) (lambda (V4603) (lambda (V4604) (kl:shen.type-signature-of-fail-if V4602 V4603 V4604)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote fix) (cons (cons (quote A) (cons (quote -->) (cons (quote A) (quote ())))) (cons (quote -->) (cons (cons (quote A) (cons (quote -->) (cons (quote A) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-fix) (lambda (V4612) (lambda (V4613) (lambda (V4614) (kl:shen.type-signature-of-fix V4612 V4613 V4614)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote freeze) (cons (quote A) (cons (quote -->) (cons (cons (quote lazy) (cons (quote A) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-freeze) (lambda (V4622) (lambda (V4623) (lambda (V4624) (kl:shen.type-signature-of-freeze V4622 V4623 V4624)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote fst) (cons (cons (quote A) (cons (quote *) (cons (quote B) (quote ())))) (cons (quote -->) (cons (quote A) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-fst) (lambda (V4632) (lambda (V4633) (lambda (V4634) (kl:shen.type-signature-of-fst V4632 V4633 V4634)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote function) (cons (cons (quote A) (cons (quote -->) (cons (quote B) (quote ())))) (cons (quote -->) (cons (cons (quote A) (cons (quote -->) (cons (quote B) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-function) (lambda (V4642) (lambda (V4643) (lambda (V4644) (kl:shen.type-signature-of-function V4642 V4643 V4644)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote gensym) (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-gensym) (lambda (V4652) (lambda (V4653) (lambda (V4654) (kl:shen.type-signature-of-gensym V4652 V4653 V4654)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote <-vector) (cons (cons (quote vector) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote A) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-<-vector) (lambda (V4662) (lambda (V4663) (lambda (V4664) (kl:shen.type-signature-of-<-vector V4662 V4663 V4664)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote vector->) (cons (cons (quote vector) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (cons (quote A) (cons (quote -->) (cons (cons (quote vector) (cons (quote A) (quote ()))) (quote ())))) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-vector->) (lambda (V4672) (lambda (V4673) (lambda (V4674) (kl:shen.type-signature-of-vector-> V4672 V4673 V4674)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote vector) (cons (quote number) (cons (quote -->) (cons (cons (quote vector) (cons (quote A) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-vector) (lambda (V4682) (lambda (V4683) (lambda (V4684) (kl:shen.type-signature-of-vector V4682 V4683 V4684)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote get-time) (cons (quote symbol) (cons (quote -->) (cons (quote number) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-get-time) (lambda (V4692) (lambda (V4693) (lambda (V4694) (kl:shen.type-signature-of-get-time V4692 V4693 V4694)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote hash) (cons (quote A) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote number) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-hash) (lambda (V4702) (lambda (V4703) (lambda (V4704) (kl:shen.type-signature-of-hash V4702 V4703 V4704)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote head) (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (quote A) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-head) (lambda (V4712) (lambda (V4713) (lambda (V4714) (kl:shen.type-signature-of-head V4712 V4713 V4714)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote hdv) (cons (cons (quote vector) (cons (quote A) (quote ()))) (cons (quote -->) (cons (quote A) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-hdv) (lambda (V4722) (lambda (V4723) (lambda (V4724) (kl:shen.type-signature-of-hdv V4722 V4723 V4724)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote hdstr) (cons (quote string) (cons (quote -->) (cons (quote string) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-hdstr) (lambda (V4732) (lambda (V4733) (lambda (V4734) (kl:shen.type-signature-of-hdstr V4732 V4733 V4734)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote if) (cons (quote boolean) (cons (quote -->) (cons (cons (quote A) (cons (quote -->) (cons (cons (quote A) (cons (quote -->) (cons (quote A) (quote ())))) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-if) (lambda (V4742) (lambda (V4743) (lambda (V4744) (kl:shen.type-signature-of-if V4742 V4743 V4744)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote it) (cons (quote -->) (cons (quote string) (quote ())))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-it) (lambda (V4752) (lambda (V4753) (lambda (V4754) (kl:shen.type-signature-of-it V4752 V4753 V4754)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote implementation) (cons (quote -->) (cons (quote string) (quote ())))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-implementation) (lambda (V4762) (lambda (V4763) (lambda (V4764) (kl:shen.type-signature-of-implementation V4762 V4763 V4764)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote include) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-include) (lambda (V4772) (lambda (V4773) (lambda (V4774) (kl:shen.type-signature-of-include V4772 V4773 V4774)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote include-all-but) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-include-all-but) (lambda (V4782) (lambda (V4783) (lambda (V4784) (kl:shen.type-signature-of-include-all-but V4782 V4783 V4784)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote inferences) (cons (quote -->) (cons (quote number) (quote ())))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-inferences) (lambda (V4792) (lambda (V4793) (lambda (V4794) (kl:shen.type-signature-of-inferences V4792 V4793 V4794)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote shen.insert) (cons (quote A) (cons (quote -->) (cons (cons (quote string) (cons (quote -->) (cons (quote string) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-shen.insert) (lambda (V4802) (lambda (V4803) (lambda (V4804) (kl:shen.type-signature-of-shen.insert V4802 V4803 V4804)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote integer?) (cons (quote A) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-integer?) (lambda (V4812) (lambda (V4813) (lambda (V4814) (kl:shen.type-signature-of-integer? V4812 V4813 V4814)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote internal) (cons (quote symbol) (cons (quote -->) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-internal) (lambda (V4822) (lambda (V4823) (lambda (V4824) (kl:shen.type-signature-of-internal V4822 V4823 V4824)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote intersection) (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote A) (quote ()))) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-intersection) (lambda (V4832) (lambda (V4833) (lambda (V4834) (kl:shen.type-signature-of-intersection V4832 V4833 V4834)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote kill) (cons (quote -->) (cons (quote A) (quote ())))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-kill) (lambda (V4842) (lambda (V4843) (lambda (V4844) (kl:shen.type-signature-of-kill V4842 V4843 V4844)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote language) (cons (quote -->) (cons (quote string) (quote ())))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-language) (lambda (V4852) (lambda (V4853) (lambda (V4854) (kl:shen.type-signature-of-language V4852 V4853 V4854)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote length) (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (quote number) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-length) (lambda (V4862) (lambda (V4863) (lambda (V4864) (kl:shen.type-signature-of-length V4862 V4863 V4864)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote limit) (cons (cons (quote vector) (cons (quote A) (quote ()))) (cons (quote -->) (cons (quote number) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-limit) (lambda (V4872) (lambda (V4873) (lambda (V4874) (kl:shen.type-signature-of-limit V4872 V4873 V4874)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote load) (cons (quote string) (cons (quote -->) (cons (quote symbol) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-load) (lambda (V4882) (lambda (V4883) (lambda (V4884) (kl:shen.type-signature-of-load V4882 V4883 V4884)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote map) (cons (cons (quote A) (cons (quote -->) (cons (quote B) (quote ())))) (cons (quote -->) (cons (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote B) (quote ()))) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-map) (lambda (V4892) (lambda (V4893) (lambda (V4894) (kl:shen.type-signature-of-map V4892 V4893 V4894)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote mapcan) (cons (cons (quote A) (cons (quote -->) (cons (cons (quote list) (cons (quote B) (quote ()))) (quote ())))) (cons (quote -->) (cons (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote B) (quote ()))) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-mapcan) (lambda (V4902) (lambda (V4903) (lambda (V4904) (kl:shen.type-signature-of-mapcan V4902 V4903 V4904)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote maxinferences) (cons (quote number) (cons (quote -->) (cons (quote number) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-maxinferences) (lambda (V4912) (lambda (V4913) (lambda (V4914) (kl:shen.type-signature-of-maxinferences V4912 V4913 V4914)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote n->string) (cons (quote number) (cons (quote -->) (cons (quote string) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-n->string) (lambda (V4922) (lambda (V4923) (lambda (V4924) (kl:shen.type-signature-of-n->string V4922 V4923 V4924)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote nl) (cons (quote number) (cons (quote -->) (cons (quote number) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-nl) (lambda (V4932) (lambda (V4933) (lambda (V4934) (kl:shen.type-signature-of-nl V4932 V4933 V4934)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote not) (cons (quote boolean) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-not) (lambda (V4942) (lambda (V4943) (lambda (V4944) (kl:shen.type-signature-of-not V4942 V4943 V4944)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote nth) (cons (quote number) (cons (quote -->) (cons (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (quote A) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-nth) (lambda (V4952) (lambda (V4953) (lambda (V4954) (kl:shen.type-signature-of-nth V4952 V4953 V4954)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote number?) (cons (quote A) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-number?) (lambda (V4962) (lambda (V4963) (lambda (V4964) (kl:shen.type-signature-of-number? V4962 V4963 V4964)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote occurrences) (cons (quote A) (cons (quote -->) (cons (cons (quote B) (cons (quote -->) (cons (quote number) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-occurrences) (lambda (V4972) (lambda (V4973) (lambda (V4974) (kl:shen.type-signature-of-occurrences V4972 V4973 V4974)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote occurs-check) (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-occurs-check) (lambda (V4982) (lambda (V4983) (lambda (V4984) (kl:shen.type-signature-of-occurs-check V4982 V4983 V4984)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote optimise) (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-optimise) (lambda (V4992) (lambda (V4993) (lambda (V4994) (kl:shen.type-signature-of-optimise V4992 V4993 V4994)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote or) (cons (quote boolean) (cons (quote -->) (cons (cons (quote boolean) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-or) (lambda (V5002) (lambda (V5003) (lambda (V5004) (kl:shen.type-signature-of-or V5002 V5003 V5004)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote os) (cons (quote -->) (cons (quote string) (quote ())))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-os) (lambda (V5012) (lambda (V5013) (lambda (V5014) (kl:shen.type-signature-of-os V5012 V5013 V5014)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote package?) (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-package?) (lambda (V5022) (lambda (V5023) (lambda (V5024) (kl:shen.type-signature-of-package? V5022 V5023 V5024)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote port) (cons (quote -->) (cons (quote string) (quote ())))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-port) (lambda (V5032) (lambda (V5033) (lambda (V5034) (kl:shen.type-signature-of-port V5032 V5033 V5034)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote porters) (cons (quote -->) (cons (quote string) (quote ())))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-porters) (lambda (V5042) (lambda (V5043) (lambda (V5044) (kl:shen.type-signature-of-porters V5042 V5043 V5044)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote pos) (cons (quote string) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote string) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-pos) (lambda (V5052) (lambda (V5053) (lambda (V5054) (kl:shen.type-signature-of-pos V5052 V5053 V5054)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote pr) (cons (quote string) (cons (quote -->) (cons (cons (cons (quote stream) (cons (quote out) (quote ()))) (cons (quote -->) (cons (quote string) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-pr) (lambda (V5062) (lambda (V5063) (lambda (V5064) (kl:shen.type-signature-of-pr V5062 V5063 V5064)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote print) (cons (quote A) (cons (quote -->) (cons (quote A) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-print) (lambda (V5072) (lambda (V5073) (lambda (V5074) (kl:shen.type-signature-of-print V5072 V5073 V5074)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote profile) (cons (cons (quote A) (cons (quote -->) (cons (quote B) (quote ())))) (cons (quote -->) (cons (cons (quote A) (cons (quote -->) (cons (quote B) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-profile) (lambda (V5082) (lambda (V5083) (lambda (V5084) (kl:shen.type-signature-of-profile V5082 V5083 V5084)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote preclude) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-preclude) (lambda (V5092) (lambda (V5093) (lambda (V5094) (kl:shen.type-signature-of-preclude V5092 V5093 V5094)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote shen.proc-nl) (cons (quote string) (cons (quote -->) (cons (quote string) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-shen.proc-nl) (lambda (V5102) (lambda (V5103) (lambda (V5104) (kl:shen.type-signature-of-shen.proc-nl V5102 V5103 V5104)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote profile-results) (cons (cons (quote A) (cons (quote -->) (cons (quote B) (quote ())))) (cons (quote -->) (cons (cons (cons (quote A) (cons (quote -->) (cons (quote B) (quote ())))) (cons (quote *) (cons (quote number) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-profile-results) (lambda (V5112) (lambda (V5113) (lambda (V5114) (kl:shen.type-signature-of-profile-results V5112 V5113 V5114)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote protect) (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-protect) (lambda (V5122) (lambda (V5123) (lambda (V5124) (kl:shen.type-signature-of-protect V5122 V5123 V5124)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote preclude-all-but) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-preclude-all-but) (lambda (V5132) (lambda (V5133) (lambda (V5134) (kl:shen.type-signature-of-preclude-all-but V5132 V5133 V5134)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote shen.prhush) (cons (quote string) (cons (quote -->) (cons (cons (cons (quote stream) (cons (quote out) (quote ()))) (cons (quote -->) (cons (quote string) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-shen.prhush) (lambda (V5142) (lambda (V5143) (lambda (V5144) (kl:shen.type-signature-of-shen.prhush V5142 V5143 V5144)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote ps) (cons (quote symbol) (cons (quote -->) (cons (cons (quote list) (cons (quote unit) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-ps) (lambda (V5152) (lambda (V5153) (lambda (V5154) (kl:shen.type-signature-of-ps V5152 V5153 V5154)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote read) (cons (cons (quote stream) (cons (quote in) (quote ()))) (cons (quote -->) (cons (quote unit) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-read) (lambda (V5162) (lambda (V5163) (lambda (V5164) (kl:shen.type-signature-of-read V5162 V5163 V5164)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote read-byte) (cons (cons (quote stream) (cons (quote in) (quote ()))) (cons (quote -->) (cons (quote number) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-read-byte) (lambda (V5172) (lambda (V5173) (lambda (V5174) (kl:shen.type-signature-of-read-byte V5172 V5173 V5174)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote read-file-as-bytelist) (cons (quote string) (cons (quote -->) (cons (cons (quote list) (cons (quote number) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-read-file-as-bytelist) (lambda (V5182) (lambda (V5183) (lambda (V5184) (kl:shen.type-signature-of-read-file-as-bytelist V5182 V5183 V5184)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote read-file-as-string) (cons (quote string) (cons (quote -->) (cons (quote string) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-read-file-as-string) (lambda (V5192) (lambda (V5193) (lambda (V5194) (kl:shen.type-signature-of-read-file-as-string V5192 V5193 V5194)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote read-file) (cons (quote string) (cons (quote -->) (cons (cons (quote list) (cons (quote unit) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-read-file) (lambda (V5202) (lambda (V5203) (lambda (V5204) (kl:shen.type-signature-of-read-file V5202 V5203 V5204)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote read-from-string) (cons (quote string) (cons (quote -->) (cons (cons (quote list) (cons (quote unit) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-read-from-string) (lambda (V5212) (lambda (V5213) (lambda (V5214) (kl:shen.type-signature-of-read-from-string V5212 V5213 V5214)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote release) (cons (quote -->) (cons (quote string) (quote ())))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-release) (lambda (V5222) (lambda (V5223) (lambda (V5224) (kl:shen.type-signature-of-release V5222 V5223 V5224)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote remove) (cons (quote A) (cons (quote -->) (cons (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote A) (quote ()))) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-remove) (lambda (V5232) (lambda (V5233) (lambda (V5234) (kl:shen.type-signature-of-remove V5232 V5233 V5234)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote reverse) (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote A) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-reverse) (lambda (V5242) (lambda (V5243) (lambda (V5244) (kl:shen.type-signature-of-reverse V5242 V5243 V5244)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote simple-error) (cons (quote string) (cons (quote -->) (cons (quote A) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-simple-error) (lambda (V5252) (lambda (V5253) (lambda (V5254) (kl:shen.type-signature-of-simple-error V5252 V5253 V5254)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote snd) (cons (cons (quote A) (cons (quote *) (cons (quote B) (quote ())))) (cons (quote -->) (cons (quote B) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-snd) (lambda (V5262) (lambda (V5263) (lambda (V5264) (kl:shen.type-signature-of-snd V5262 V5263 V5264)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote specialise) (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-specialise) (lambda (V5272) (lambda (V5273) (lambda (V5274) (kl:shen.type-signature-of-specialise V5272 V5273 V5274)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote spy) (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-spy) (lambda (V5282) (lambda (V5283) (lambda (V5284) (kl:shen.type-signature-of-spy V5282 V5283 V5284)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote step) (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-step) (lambda (V5292) (lambda (V5293) (lambda (V5294) (kl:shen.type-signature-of-step V5292 V5293 V5294)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote stinput) (cons (quote -->) (cons (cons (quote stream) (cons (quote in) (quote ()))) (quote ())))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-stinput) (lambda (V5302) (lambda (V5303) (lambda (V5304) (kl:shen.type-signature-of-stinput V5302 V5303 V5304)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote sterror) (cons (quote -->) (cons (cons (quote stream) (cons (quote out) (quote ()))) (quote ())))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-sterror) (lambda (V5312) (lambda (V5313) (lambda (V5314) (kl:shen.type-signature-of-sterror V5312 V5313 V5314)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote stoutput) (cons (quote -->) (cons (cons (quote stream) (cons (quote out) (quote ()))) (quote ())))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-stoutput) (lambda (V5322) (lambda (V5323) (lambda (V5324) (kl:shen.type-signature-of-stoutput V5322 V5323 V5324)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote string?) (cons (quote A) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-string?) (lambda (V5332) (lambda (V5333) (lambda (V5334) (kl:shen.type-signature-of-string? V5332 V5333 V5334)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote str) (cons (quote A) (cons (quote -->) (cons (quote string) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-str) (lambda (V5342) (lambda (V5343) (lambda (V5344) (kl:shen.type-signature-of-str V5342 V5343 V5344)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote string->n) (cons (quote string) (cons (quote -->) (cons (quote number) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-string->n) (lambda (V5352) (lambda (V5353) (lambda (V5354) (kl:shen.type-signature-of-string->n V5352 V5353 V5354)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote string->symbol) (cons (quote string) (cons (quote -->) (cons (quote symbol) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-string->symbol) (lambda (V5362) (lambda (V5363) (lambda (V5364) (kl:shen.type-signature-of-string->symbol V5362 V5363 V5364)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote sum) (cons (cons (quote list) (cons (quote number) (quote ()))) (cons (quote -->) (cons (quote number) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-sum) (lambda (V5372) (lambda (V5373) (lambda (V5374) (kl:shen.type-signature-of-sum V5372 V5373 V5374)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote symbol?) (cons (quote A) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-symbol?) (lambda (V5382) (lambda (V5383) (lambda (V5384) (kl:shen.type-signature-of-symbol? V5382 V5383 V5384)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote systemf) (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-systemf) (lambda (V5392) (lambda (V5393) (lambda (V5394) (kl:shen.type-signature-of-systemf V5392 V5393 V5394)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote tail) (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote A) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-tail) (lambda (V5402) (lambda (V5403) (lambda (V5404) (kl:shen.type-signature-of-tail V5402 V5403 V5404)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote tlstr) (cons (quote string) (cons (quote -->) (cons (quote string) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-tlstr) (lambda (V5412) (lambda (V5413) (lambda (V5414) (kl:shen.type-signature-of-tlstr V5412 V5413 V5414)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote tlv) (cons (cons (quote vector) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (quote vector) (cons (quote A) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-tlv) (lambda (V5422) (lambda (V5423) (lambda (V5424) (kl:shen.type-signature-of-tlv V5422 V5423 V5424)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote tc) (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-tc) (lambda (V5432) (lambda (V5433) (lambda (V5434) (kl:shen.type-signature-of-tc V5432 V5433 V5434)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote tc?) (cons (quote -->) (cons (quote boolean) (quote ())))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-tc?) (lambda (V5442) (lambda (V5443) (lambda (V5444) (kl:shen.type-signature-of-tc? V5442 V5443 V5444)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote thaw) (cons (cons (quote lazy) (cons (quote A) (quote ()))) (cons (quote -->) (cons (quote A) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-thaw) (lambda (V5452) (lambda (V5453) (lambda (V5454) (kl:shen.type-signature-of-thaw V5452 V5453 V5454)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote track) (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-track) (lambda (V5462) (lambda (V5463) (lambda (V5464) (kl:shen.type-signature-of-track V5462 V5463 V5464)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote trap-error) (cons (quote A) (cons (quote -->) (cons (cons (cons (quote exception) (cons (quote -->) (cons (quote A) (quote ())))) (cons (quote -->) (cons (quote A) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-trap-error) (lambda (V5472) (lambda (V5473) (lambda (V5474) (kl:shen.type-signature-of-trap-error V5472 V5473 V5474)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote tuple?) (cons (quote A) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-tuple?) (lambda (V5482) (lambda (V5483) (lambda (V5484) (kl:shen.type-signature-of-tuple? V5482 V5483 V5484)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote undefmacro) (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-undefmacro) (lambda (V5492) (lambda (V5493) (lambda (V5494) (kl:shen.type-signature-of-undefmacro V5492 V5493 V5494)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote union) (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote A) (quote ()))) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-union) (lambda (V5502) (lambda (V5503) (lambda (V5504) (kl:shen.type-signature-of-union V5502 V5503 V5504)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote unprofile) (cons (cons (quote A) (cons (quote -->) (cons (quote B) (quote ())))) (cons (quote -->) (cons (cons (quote A) (cons (quote -->) (cons (quote B) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-unprofile) (lambda (V5512) (lambda (V5513) (lambda (V5514) (kl:shen.type-signature-of-unprofile V5512 V5513 V5514)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote untrack) (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-untrack) (lambda (V5522) (lambda (V5523) (lambda (V5524) (kl:shen.type-signature-of-untrack V5522 V5523 V5524)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote unspecialise) (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-unspecialise) (lambda (V5532) (lambda (V5533) (lambda (V5534) (kl:shen.type-signature-of-unspecialise V5532 V5533 V5534)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote variable?) (cons (quote A) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-variable?) (lambda (V5542) (lambda (V5543) (lambda (V5544) (kl:shen.type-signature-of-variable? V5542 V5543 V5544)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote vector?) (cons (quote A) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-vector?) (lambda (V5552) (lambda (V5553) (lambda (V5554) (kl:shen.type-signature-of-vector? V5552 V5553 V5554)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote version) (cons (quote -->) (cons (quote string) (quote ())))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-version) (lambda (V5562) (lambda (V5563) (lambda (V5564) (kl:shen.type-signature-of-version V5562 V5563 V5564)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote write-to-file) (cons (quote string) (cons (quote -->) (cons (cons (quote A) (cons (quote -->) (cons (quote A) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-write-to-file) (lambda (V5572) (lambda (V5573) (lambda (V5574) (kl:shen.type-signature-of-write-to-file V5572 V5573 V5574)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote write-byte) (cons (quote number) (cons (quote -->) (cons (cons (cons (quote stream) (cons (quote out) (quote ()))) (cons (quote -->) (cons (quote number) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-write-byte) (lambda (V5582) (lambda (V5583) (lambda (V5584) (kl:shen.type-signature-of-write-byte V5582 V5583 V5584)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote y-or-n?) (cons (quote string) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-y-or-n?) (lambda (V5592) (lambda (V5593) (lambda (V5594) (kl:shen.type-signature-of-y-or-n? V5592 V5593 V5594)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote >) (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of->) (lambda (V5602) (lambda (V5603) (lambda (V5604) (kl:shen.type-signature-of-> V5602 V5603 V5604)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote <) (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-<) (lambda (V5612) (lambda (V5613) (lambda (V5614) (kl:shen.type-signature-of-< V5612 V5613 V5614)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote >=) (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of->=) (lambda (V5622) (lambda (V5623) (lambda (V5624) (kl:shen.type-signature-of->= V5622 V5623 V5624)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote <=) (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-<=) (lambda (V5632) (lambda (V5633) (lambda (V5634) (kl:shen.type-signature-of-<= V5632 V5633 V5634)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote =) (cons (quote A) (cons (quote -->) (cons (cons (quote A) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-=) (lambda (V5642) (lambda (V5643) (lambda (V5644) (kl:shen.type-signature-of-= V5642 V5643 V5644)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote +) (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote number) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-+) (lambda (V5652) (lambda (V5653) (lambda (V5654) (kl:shen.type-signature-of-+ V5652 V5653 V5654)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote /) (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote number) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-/) (lambda (V5662) (lambda (V5663) (lambda (V5664) (kl:shen.type-signature-of-/ V5662 V5663 V5664)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote -) (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote number) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of--) (lambda (V5672) (lambda (V5673) (lambda (V5674) (kl:shen.type-signature-of-- V5672 V5673 V5674)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote *) (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote number) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-*) (lambda (V5682) (lambda (V5683) (lambda (V5684) (kl:shen.type-signature-of-* V5682 V5683 V5684)))))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote ==) (cons (quote A) (cons (quote -->) (cons (cons (quote B) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-==) (lambda (V5692) (lambda (V5693) (lambda (V5694) (kl:shen.type-signature-of-== V5692 V5693 V5694)))))) (kl:set (quote shen.*empty-absvector*) (make-vector 0 (quote (quote shen.fail!))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (export shen.initialise) (quote shen.initialise))
