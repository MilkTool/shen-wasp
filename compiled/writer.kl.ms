"Copyright (c) 2015, Mark Tarver\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n3. The name of Mark Tarver may not be used to endorse or promote products\n   derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
(begin (register-function-arity (quote pr) 2) (define (kl:pr V4012 V4013) (guard (lambda (E) V4012) (kl:shen.prh V4012 V4013 0))) (quote pr))
(begin (register-function-arity (quote shen.prh) 3) (define (kl:shen.prh V4017 V4018 V4019) (kl:shen.prh V4017 V4018 (kl:shen.write-char-and-inc V4017 V4018 V4019))) (quote shen.prh))
(begin (register-function-arity (quote shen.write-char-and-inc) 3) (define (kl:shen.write-char-and-inc V4023 V4024 V4025) (begin (write-u8 (string-ref (make-string 1 (string-ref V4023 V4025)) 0) V4024) (+ V4025 1))) (quote shen.write-char-and-inc))
(begin (register-function-arity (quote print) 1) (define (kl:print V4027) (let ((String (kl:shen.insert V4027 "~S"))) (let ((Print (kl:shen.prhush String (kl:stoutput)))) V4027))) (quote print))
(begin (register-function-arity (quote shen.prhush) 2) (define (kl:shen.prhush V4030 V4031) (if (assert-boolean (kl:value (quote *hush*))) V4030 (kl:pr V4030 V4031))) (quote shen.prhush))
(begin (register-function-arity (quote shen.mkstr) 2) (define (kl:shen.mkstr V4034 V4035) (cond ((string? V4034) (kl:shen.mkstr-l (kl:shen.proc-nl V4034) V4035)) (#t (kl:shen.mkstr-r (cons (quote shen.proc-nl) (cons V4034 (quote ()))) V4035)))) (quote shen.mkstr))
(begin (register-function-arity (quote shen.mkstr-l) 2) (define (kl:shen.mkstr-l V4038 V4039) (cond ((null? V4039) V4038) ((pair? V4039) (kl:shen.mkstr-l (kl:shen.insert-l (car V4039) V4038) (cdr V4039))) (#t (kl:shen.f_error (quote shen.mkstr-l))))) (quote shen.mkstr-l))
(begin (register-function-arity (quote shen.insert-l) 2) (define (kl:shen.insert-l V4044 V4045) (cond ((equal? "" V4045) "") ((and (assert-boolean (kl:shen.+string? V4045)) (and (equal? "~" (make-string 1 (string-ref V4045 0))) (and (assert-boolean (kl:shen.+string? (string-tail V4045 1))) (equal? "A" (make-string 1 (string-ref (string-tail V4045 1) 0)))))) (cons (quote shen.app) (cons V4044 (cons (string-tail (string-tail V4045 1) 1) (cons (quote shen.a) (quote ())))))) ((and (assert-boolean (kl:shen.+string? V4045)) (and (equal? "~" (make-string 1 (string-ref V4045 0))) (and (assert-boolean (kl:shen.+string? (string-tail V4045 1))) (equal? "R" (make-string 1 (string-ref (string-tail V4045 1) 0)))))) (cons (quote shen.app) (cons V4044 (cons (string-tail (string-tail V4045 1) 1) (cons (quote shen.r) (quote ())))))) ((and (assert-boolean (kl:shen.+string? V4045)) (and (equal? "~" (make-string 1 (string-ref V4045 0))) (and (assert-boolean (kl:shen.+string? (string-tail V4045 1))) (equal? "S" (make-string 1 (string-ref (string-tail V4045 1) 0)))))) (cons (quote shen.app) (cons V4044 (cons (string-tail (string-tail V4045 1) 1) (cons (quote shen.s) (quote ())))))) ((assert-boolean (kl:shen.+string? V4045)) (kl:shen.factor-cn (cons (quote cn) (cons (make-string 1 (string-ref V4045 0)) (cons (kl:shen.insert-l V4044 (string-tail V4045 1)) (quote ())))))) ((and (pair? V4045) (and (eq? (quote cn) (car V4045)) (and (pair? (cdr V4045)) (and (pair? (cdr (cdr V4045))) (null? (cdr (cdr (cdr V4045)))))))) (cons (quote cn) (cons (car (cdr V4045)) (cons (kl:shen.insert-l V4044 (car (cdr (cdr V4045)))) (quote ()))))) ((and (pair? V4045) (and (eq? (quote shen.app) (car V4045)) (and (pair? (cdr V4045)) (and (pair? (cdr (cdr V4045))) (and (pair? (cdr (cdr (cdr V4045)))) (null? (cdr (cdr (cdr (cdr V4045)))))))))) (cons (quote shen.app) (cons (car (cdr V4045)) (cons (kl:shen.insert-l V4044 (car (cdr (cdr V4045)))) (cdr (cdr (cdr V4045))))))) (#t (kl:shen.f_error (quote shen.insert-l))))) (quote shen.insert-l))
(begin (register-function-arity (quote shen.factor-cn) 1) (define (kl:shen.factor-cn V4047) (cond ((and (pair? V4047) (and (eq? (quote cn) (car V4047)) (and (pair? (cdr V4047)) (and (pair? (cdr (cdr V4047))) (and (pair? (car (cdr (cdr V4047)))) (and (eq? (quote cn) (car (car (cdr (cdr V4047))))) (and (pair? (cdr (car (cdr (cdr V4047))))) (and (pair? (cdr (cdr (car (cdr (cdr V4047)))))) (and (null? (cdr (cdr (cdr (car (cdr (cdr V4047))))))) (and (null? (cdr (cdr (cdr V4047)))) (and (string? (car (cdr V4047))) (string? (car (cdr (car (cdr (cdr V4047))))))))))))))))) (cons (quote cn) (cons (string-append (car (cdr V4047)) (car (cdr (car (cdr (cdr V4047)))))) (cdr (cdr (car (cdr (cdr V4047)))))))) (#t V4047))) (quote shen.factor-cn))
(begin (register-function-arity (quote shen.proc-nl) 1) (define (kl:shen.proc-nl V4049) (cond ((equal? "" V4049) "") ((and (assert-boolean (kl:shen.+string? V4049)) (and (equal? "~" (make-string 1 (string-ref V4049 0))) (and (assert-boolean (kl:shen.+string? (string-tail V4049 1))) (equal? "%" (make-string 1 (string-ref (string-tail V4049 1) 0)))))) (string-append (make-string 1 10) (kl:shen.proc-nl (string-tail (string-tail V4049 1) 1)))) ((assert-boolean (kl:shen.+string? V4049)) (string-append (make-string 1 (string-ref V4049 0)) (kl:shen.proc-nl (string-tail V4049 1)))) (#t (kl:shen.f_error (quote shen.proc-nl))))) (quote shen.proc-nl))
(begin (register-function-arity (quote shen.mkstr-r) 2) (define (kl:shen.mkstr-r V4052 V4053) (cond ((null? V4053) V4052) ((pair? V4053) (kl:shen.mkstr-r (cons (quote shen.insert) (cons (car V4053) (cons V4052 (quote ())))) (cdr V4053))) (#t (kl:shen.f_error (quote shen.mkstr-r))))) (quote shen.mkstr-r))
(begin (register-function-arity (quote shen.insert) 2) (define (kl:shen.insert V4056 V4057) (kl:shen.insert-h V4056 V4057 "")) (quote shen.insert))
(begin (register-function-arity (quote shen.insert-h) 3) (define (kl:shen.insert-h V4063 V4064 V4065) (cond ((equal? "" V4064) V4065) ((and (assert-boolean (kl:shen.+string? V4064)) (and (equal? "~" (make-string 1 (string-ref V4064 0))) (and (assert-boolean (kl:shen.+string? (string-tail V4064 1))) (equal? "A" (make-string 1 (string-ref (string-tail V4064 1) 0)))))) (string-append V4065 (kl:shen.app V4063 (string-tail (string-tail V4064 1) 1) (quote shen.a)))) ((and (assert-boolean (kl:shen.+string? V4064)) (and (equal? "~" (make-string 1 (string-ref V4064 0))) (and (assert-boolean (kl:shen.+string? (string-tail V4064 1))) (equal? "R" (make-string 1 (string-ref (string-tail V4064 1) 0)))))) (string-append V4065 (kl:shen.app V4063 (string-tail (string-tail V4064 1) 1) (quote shen.r)))) ((and (assert-boolean (kl:shen.+string? V4064)) (and (equal? "~" (make-string 1 (string-ref V4064 0))) (and (assert-boolean (kl:shen.+string? (string-tail V4064 1))) (equal? "S" (make-string 1 (string-ref (string-tail V4064 1) 0)))))) (string-append V4065 (kl:shen.app V4063 (string-tail (string-tail V4064 1) 1) (quote shen.s)))) ((assert-boolean (kl:shen.+string? V4064)) (kl:shen.insert-h V4063 (string-tail V4064 1) (string-append V4065 (make-string 1 (string-ref V4064 0))))) (#t (kl:shen.f_error (quote shen.insert-h))))) (quote shen.insert-h))
(begin (register-function-arity (quote shen.app) 3) (define (kl:shen.app V4069 V4070 V4071) (string-append (kl:shen.arg->str V4069 V4071) V4070)) (quote shen.app))
(begin (register-function-arity (quote shen.arg->str) 2) (define (kl:shen.arg->str V4079 V4080) (cond ((kl:= V4079 (kl:fail)) "...") ((assert-boolean (kl:shen.list? V4079)) (kl:shen.list->str V4079 V4080)) ((string? V4079) (kl:shen.str->str V4079 V4080)) ((vector? V4079) (kl:shen.vector->str V4079 V4080)) (#t (kl:shen.atom->str V4079)))) (quote shen.arg->str))
(begin (register-function-arity (quote shen.list->str) 2) (define (kl:shen.list->str V4083 V4084) (cond ((eq? (quote shen.r) V4084) (kl:_waspvm_at_s "(" (kl:_waspvm_at_s (kl:shen.iter-list V4083 (quote shen.r) (kl:shen.maxseq)) ")"))) (#t (kl:_waspvm_at_s "[" (kl:_waspvm_at_s (kl:shen.iter-list V4083 V4084 (kl:shen.maxseq)) "]"))))) (quote shen.list->str))
(begin (register-function-arity (quote shen.maxseq) 0) (define (kl:shen.maxseq) (kl:value (quote *maximum-print-sequence-size*))) (quote shen.maxseq))
(begin (register-function-arity (quote shen.iter-list) 3) (define (kl:shen.iter-list V4098 V4099 V4100) (cond ((null? V4098) "") ((kl:= 0 V4100) "... etc") ((and (pair? V4098) (null? (cdr V4098))) (kl:shen.arg->str (car V4098) V4099)) ((pair? V4098) (kl:_waspvm_at_s (kl:shen.arg->str (car V4098) V4099) (kl:_waspvm_at_s " " (kl:shen.iter-list (cdr V4098) V4099 (- V4100 1))))) (#t (kl:_waspvm_at_s "|" (kl:_waspvm_at_s " " (kl:shen.arg->str V4098 V4099)))))) (quote shen.iter-list))
(begin (register-function-arity (quote shen.str->str) 2) (define (kl:shen.str->str V4107 V4108) (cond ((eq? (quote shen.a) V4108) V4107) (#t (kl:_waspvm_at_s (make-string 1 34) (kl:_waspvm_at_s V4107 (make-string 1 34)))))) (quote shen.str->str))
(begin (register-function-arity (quote shen.vector->str) 2) (define (kl:shen.vector->str V4111 V4112) (if (assert-boolean (kl:shen.print-vector? V4111)) ((kl:function (vector-ref V4111 0)) V4111) (if (assert-boolean (kl:vector? V4111)) (kl:_waspvm_at_s "<" (kl:_waspvm_at_s (kl:shen.iter-vector V4111 1 V4112 (kl:shen.maxseq)) ">")) (kl:_waspvm_at_s "<" (kl:_waspvm_at_s "<" (kl:_waspvm_at_s (kl:shen.iter-vector V4111 0 V4112 (kl:shen.maxseq)) ">>")))))) (quote shen.vector->str))
(begin (register-function-arity (quote shen.print-vector?) 1) (define (kl:shen.print-vector? V4114) (let ((Zero (vector-ref V4114 0))) (if (eq? Zero (quote shen.tuple)) #t (if (eq? Zero (quote shen.pvar)) #t (if (eq? Zero (quote shen.dictionary)) #t (if (kl:not (number? Zero)) (kl:shen.fbound? Zero) #f)))))) (quote shen.print-vector?))
(begin (register-function-arity (quote shen.fbound?) 1) (define (kl:shen.fbound? V4116) (guard (lambda (E) #f) (begin (kl:shen.lookup-func V4116) #t))) (quote shen.fbound?))
(begin (register-function-arity (quote shen.tuple) 1) (define (kl:shen.tuple V4118) (string-append "(@p " (kl:shen.app (vector-ref V4118 1) (string-append " " (kl:shen.app (vector-ref V4118 2) ")" (quote shen.s))) (quote shen.s)))) (quote shen.tuple))
(begin (register-function-arity (quote shen.dictionary) 1) (define (kl:shen.dictionary V4120) "(dict ...)") (quote shen.dictionary))
(begin (register-function-arity (quote shen.iter-vector) 4) (define (kl:shen.iter-vector V4131 V4132 V4133 V4134) (cond ((kl:= 0 V4134) "... etc") (#t (let ((Item (kl:<-address/or V4131 V4132 (lambda () (quote shen.out-of-bounds))))) (let ((Next (kl:<-address/or V4131 (+ V4132 1) (lambda () (quote shen.out-of-bounds))))) (if (eq? Item (quote shen.out-of-bounds)) "" (if (eq? Next (quote shen.out-of-bounds)) (kl:shen.arg->str Item V4133) (kl:_waspvm_at_s (kl:shen.arg->str Item V4133) (kl:_waspvm_at_s " " (kl:shen.iter-vector V4131 (+ V4132 1) V4133 (- V4134 1))))))))))) (quote shen.iter-vector))
(begin (register-function-arity (quote shen.atom->str) 1) (define (kl:shen.atom->str V4136) (guard (lambda (E) (kl:shen.funexstring)) (kl:str V4136))) (quote shen.atom->str))
(begin (register-function-arity (quote shen.funexstring) 0) (define (kl:shen.funexstring) (kl:_waspvm_at_s "\016" (kl:_waspvm_at_s "f" (kl:_waspvm_at_s "u" (kl:_waspvm_at_s "n" (kl:_waspvm_at_s "e" (kl:_waspvm_at_s (kl:shen.arg->str (kl:gensym (kl:intern "x")) (quote shen.a)) "\017"))))))) (quote shen.funexstring))
(begin (register-function-arity (quote shen.list?) 1) (define (kl:shen.list? V4138) (or (kl:empty? V4138) (pair? V4138))) (quote shen.list?))
