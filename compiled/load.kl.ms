"Copyright (c) 2015, Mark Tarver\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n3. The name of Mark Tarver may not be used to endorse or promote products\n   derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
(begin (register-function-arity (quote load) 1) (define (kl:load V1482) (let ((Load (let ((Start (kl:get-time (quote run)))) (let ((Result (kl:shen.load-help (kl:value (quote shen.*tc*)) (kl:read-file V1482)))) (let ((Finish (kl:get-time (quote run)))) (let ((Time (- Finish Start))) (let ((Message (kl:shen.prhush (string-append "\nrun time: " (string-append (kl:str Time) " secs\n")) (kl:stoutput)))) Result))))))) (let ((Infs (if (assert-boolean (kl:value (quote shen.*tc*))) (kl:shen.prhush (string-append "\ntypechecked in " (kl:shen.app (kl:inferences) " inferences\n" (quote shen.a))) (kl:stoutput)) (quote shen.skip)))) (quote loaded)))) (quote load))
(begin (register-function-arity (quote shen.load-help) 2) (define (kl:shen.load-help V1489 V1490) (cond ((kl:= #f V1489) (kl:for-each (lambda (X) (kl:shen.prhush (kl:shen.app (kl:shen.eval-without-macros X) "\n" (quote shen.s)) (kl:stoutput))) V1490)) (#t (let ((RemoveSynonyms (kl:mapcan (lambda (X) (kl:shen.remove-synonyms X)) V1490))) (let ((Table (kl:mapcan (lambda (X) (kl:shen.typetable X)) RemoveSynonyms))) (let ((Assume (kl:for-each (lambda (X) (kl:shen.assumetype X)) Table))) (guard (lambda (E) (kl:shen.unwind-types E Table)) (kl:for-each (lambda (X) (kl:shen.typecheck-and-load X)) RemoveSynonyms)))))))) (quote shen.load-help))
(begin (register-function-arity (quote shen.remove-synonyms) 1) (define (kl:shen.remove-synonyms V1492) (cond ((and (pair? V1492) (eq? (quote shen.synonyms-help) (car V1492))) (begin (kl:eval V1492) (quote ()))) (#t (cons V1492 (quote ()))))) (quote shen.remove-synonyms))
(begin (register-function-arity (quote shen.typecheck-and-load) 1) (define (kl:shen.typecheck-and-load V1494) (begin (kl:nl 1) (kl:shen.typecheck-and-evaluate V1494 (kl:gensym (quote A))))) (quote shen.typecheck-and-load))
(begin (register-function-arity (quote shen.typetable) 1) (define (kl:shen.typetable V1500) (cond ((and (pair? V1500) (and (eq? (quote define) (car V1500)) (pair? (cdr V1500)))) (let ((Sig (kl:compile (lambda (Y) (kl:shen.<sig+rest> Y)) (cdr (cdr V1500)) (lambda (E) (simple-error (kl:shen.app (car (cdr V1500)) " lacks a proper signature.\n" (quote shen.a))))))) (cons (cons (car (cdr V1500)) Sig) (quote ())))) (#t (quote ())))) (quote shen.typetable))
(begin (register-function-arity (quote shen.assumetype) 1) (define (kl:shen.assumetype V1502) (cond ((pair? V1502) (kl:declare (car V1502) (cdr V1502))) (#t (kl:shen.f_error (quote shen.assumetype))))) (quote shen.assumetype))
(begin (register-function-arity (quote shen.unwind-types) 2) (define (kl:shen.unwind-types V1509 V1510) (cond ((null? V1510) (simple-error (kl:error-to-string V1509))) ((and (pair? V1510) (pair? (car V1510))) (begin (kl:shen.remtype (car (car V1510))) (kl:shen.unwind-types V1509 (cdr V1510)))) (#t (kl:shen.f_error (quote shen.unwind-types))))) (quote shen.unwind-types))
(begin (register-function-arity (quote shen.remtype) 1) (define (kl:shen.remtype V1512) (kl:set (quote shen.*signedfuncs*) (kl:shen.removetype V1512 (kl:value (quote shen.*signedfuncs*))))) (quote shen.remtype))
(begin (register-function-arity (quote shen.removetype) 2) (define (kl:shen.removetype V1520 V1521) (cond ((null? V1521) (quote ())) ((and (pair? V1521) (and (pair? (car V1521)) (kl:= (car (car V1521)) V1520))) (kl:shen.removetype (car (car V1521)) (cdr V1521))) ((pair? V1521) (cons (car V1521) (kl:shen.removetype V1520 (cdr V1521)))) (#t (kl:shen.f_error (quote shen.removetype))))) (quote shen.removetype))
(begin (register-function-arity (quote shen.<sig+rest>) 1) (define (kl:shen.<sig+rest> V1523) (let ((Parse_shen.<signature> (kl:shen.<signature> V1523))) (if (kl:not (kl:= (kl:fail) Parse_shen.<signature>)) (let ((Parse_<!> (kl:<!> Parse_shen.<signature>))) (if (kl:not (kl:= (kl:fail) Parse_<!>)) (kl:shen.pair (car Parse_<!>) (kl:shen.hdtl Parse_shen.<signature>)) (kl:fail))) (kl:fail)))) (quote shen.<sig+rest>))
(begin (register-function-arity (quote write-to-file) 2) (define (kl:write-to-file V1526 V1527) (let ((Stream (kl:open V1526 (quote out)))) (let ((String (if (string? V1527) (kl:shen.app V1527 "\n\n" (quote shen.a)) (kl:shen.app V1527 "\n\n" (quote shen.s))))) (let ((Write (kl:pr String Stream))) (let ((Close (kl:close Stream))) V1527))))) (quote write-to-file))
