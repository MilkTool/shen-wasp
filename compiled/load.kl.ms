(module "compiled/load.kl")
"Copyright (c) 2010-2015, Mark Tarver\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation\nand/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
(begin (register-function-arity (quote load) 1) (define (kl:load V1804) (let ((Load (let ((Start (kl:get-time (quote run)))) (let ((Result (kl:shen.load-help (kl:value (quote shen.*tc*)) (kl:read-file V1804)))) (let ((Finish (kl:get-time (quote run)))) (let ((Time (- Finish Start))) (let ((Message (kl:shen.prhush (string-append "\nrun time: " (string-append (kl:str Time) " secs\n")) (kl:stoutput)))) Result))))))) (let ((Infs (if (assert-boolean (kl:value (quote shen.*tc*))) (kl:shen.prhush (string-append "\ntypechecked in " (kl:shen.app (kl:inferences) " inferences\n" (quote shen.a))) (kl:stoutput)) (quote shen.skip)))) (quote loaded)))) (export load) (quote load))
(begin (register-function-arity (quote shen.load-help) 2) (define (kl:shen.load-help V1811 V1812) (cond ((kl:= #f V1811) (kl:shen.for-each (lambda (X) (kl:shen.prhush (kl:shen.app (kl:shen.eval-without-macros X) "\n" (quote shen.s)) (kl:stoutput))) V1812)) (#t (let ((RemoveSynonyms (kl:mapcan (lambda (X) (kl:shen.remove-synonyms X)) V1812))) (let ((Table (kl:mapcan (lambda (X) (kl:shen.typetable X)) RemoveSynonyms))) (let ((Assume (kl:shen.for-each (lambda (X) (kl:shen.assumetype X)) Table))) (guard (lambda (E) (kl:shen.unwind-types E Table)) (kl:shen.for-each (lambda (X) (kl:shen.typecheck-and-load X)) RemoveSynonyms)))))))) (export shen.load-help) (quote shen.load-help))
(begin (register-function-arity (quote shen.remove-synonyms) 1) (define (kl:shen.remove-synonyms V1814) (cond ((and (pair? V1814) (eq? (quote shen.synonyms-help) (car V1814))) (begin (kl:eval V1814) (quote ()))) (#t (cons V1814 (quote ()))))) (export shen.remove-synonyms) (quote shen.remove-synonyms))
(begin (register-function-arity (quote shen.typecheck-and-load) 1) (define (kl:shen.typecheck-and-load V1816) (begin (kl:nl 1) (kl:shen.typecheck-and-evaluate V1816 (kl:gensym (quote A))))) (export shen.typecheck-and-load) (quote shen.typecheck-and-load))
(begin (register-function-arity (quote shen.typetable) 1) (define (kl:shen.typetable V1822) (cond ((and (pair? V1822) (and (eq? (quote define) (car V1822)) (pair? (cdr V1822)))) (let ((Sig (kl:compile (lambda (Y) (kl:shen.<sig+rest> Y)) (cdr (cdr V1822)) (lambda (E) (simple-error (kl:shen.app (car (cdr V1822)) " lacks a proper signature.\n" (quote shen.a))))))) (cons (cons (car (cdr V1822)) Sig) (quote ())))) (#t (quote ())))) (export shen.typetable) (quote shen.typetable))
(begin (register-function-arity (quote shen.assumetype) 1) (define (kl:shen.assumetype V1824) (cond ((pair? V1824) (kl:declare (car V1824) (cdr V1824))) (#t (kl:shen.f_error (quote shen.assumetype))))) (export shen.assumetype) (quote shen.assumetype))
(begin (register-function-arity (quote shen.unwind-types) 2) (define (kl:shen.unwind-types V1831 V1832) (cond ((null? V1832) (simple-error (kl:error-to-string V1831))) ((and (pair? V1832) (pair? (car V1832))) (begin (kl:shen.remtype (car (car V1832))) (kl:shen.unwind-types V1831 (cdr V1832)))) (#t (kl:shen.f_error (quote shen.unwind-types))))) (export shen.unwind-types) (quote shen.unwind-types))
(begin (register-function-arity (quote shen.remtype) 1) (define (kl:shen.remtype V1834) (kl:set (quote shen.*signedfuncs*) (kl:shen.removetype V1834 (kl:value (quote shen.*signedfuncs*))))) (export shen.remtype) (quote shen.remtype))
(begin (register-function-arity (quote shen.removetype) 2) (define (kl:shen.removetype V1842 V1843) (cond ((null? V1843) (quote ())) ((and (pair? V1843) (and (pair? (car V1843)) (kl:= (car (car V1843)) V1842))) (kl:shen.removetype (car (car V1843)) (cdr V1843))) ((pair? V1843) (cons (car V1843) (kl:shen.removetype V1842 (cdr V1843)))) (#t (kl:shen.f_error (quote shen.removetype))))) (export shen.removetype) (quote shen.removetype))
(begin (register-function-arity (quote shen.<sig+rest>) 1) (define (kl:shen.<sig+rest> V1845) (let ((Parse_shen.<signature> (kl:shen.<signature> V1845))) (if (kl:not (kl:= (kl:fail) Parse_shen.<signature>)) (let ((Parse_<!> (kl:<!> Parse_shen.<signature>))) (if (kl:not (kl:= (kl:fail) Parse_<!>)) (kl:shen.pair (car Parse_<!>) (kl:shen.hdtl Parse_shen.<signature>)) (kl:fail))) (kl:fail)))) (export shen.<sig+rest>) (quote shen.<sig+rest>))
(begin (register-function-arity (quote write-to-file) 2) (define (kl:write-to-file V1848 V1849) (let ((Stream (kl:open V1848 (quote out)))) (let ((String (if (string? V1849) (kl:shen.app V1849 "\n\n" (quote shen.a)) (kl:shen.app V1849 "\n\n" (quote shen.s))))) (let ((Write (kl:pr String Stream))) (let ((Close (kl:close Stream))) V1849))))) (export write-to-file) (quote write-to-file))
