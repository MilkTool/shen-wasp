(module "compiled/extension-features.kl")
"Copyright (c) 2019 Bruno Deferrari.\nBSD 3-Clause License: http://opensource.org/licenses/BSD-3-Clause"
(begin (register-function-arity (quote shen.x.features.cond-expand-macro) 1) (define (kl:shen.x.features.cond-expand-macro V5988) (cond ((and (pair? V5988) (and (eq? (quote shen.x.features.cond-expand) (car V5988)) (null? (cdr V5988)))) (simple-error "Unfulfilled shen.x.features.cond-expand clause.")) ((and (pair? V5988) (and (eq? (quote shen.x.features.cond-expand) (car V5988)) (and (pair? (cdr V5988)) (and (kl:= #t (car (cdr V5988))) (and (pair? (cdr (cdr V5988))) (null? (cdr (cdr (cdr V5988))))))))) (car (cdr (cdr V5988)))) ((and (pair? V5988) (and (eq? (quote shen.x.features.cond-expand) (car V5988)) (and (pair? (cdr V5988)) (and (pair? (car (cdr V5988))) (and (eq? (quote and) (car (car (cdr V5988)))) (and (null? (cdr (car (cdr V5988)))) (pair? (cdr (cdr V5988))))))))) (car (cdr (cdr V5988)))) ((and (pair? V5988) (and (eq? (quote shen.x.features.cond-expand) (car V5988)) (and (pair? (cdr V5988)) (and (pair? (car (cdr V5988))) (and (eq? (quote and) (car (car (cdr V5988)))) (and (pair? (cdr (car (cdr V5988)))) (pair? (cdr (cdr V5988))))))))) (cons (quote shen.x.features.cond-expand) (cons (car (cdr (car (cdr V5988)))) (cons (cons (quote shen.x.features.cond-expand) (cons (cons (quote and) (cdr (cdr (car (cdr V5988))))) (cdr (cdr V5988)))) (cdr (cdr (cdr V5988))))))) ((and (pair? V5988) (and (eq? (quote shen.x.features.cond-expand) (car V5988)) (and (pair? (cdr V5988)) (and (pair? (car (cdr V5988))) (and (eq? (quote or) (car (car (cdr V5988)))) (and (null? (cdr (car (cdr V5988)))) (pair? (cdr (cdr V5988))))))))) (cons (quote shen.x.features.cond-expand) (cdr (cdr (cdr V5988))))) ((and (pair? V5988) (and (eq? (quote shen.x.features.cond-expand) (car V5988)) (and (pair? (cdr V5988)) (and (pair? (car (cdr V5988))) (and (eq? (quote or) (car (car (cdr V5988)))) (and (pair? (cdr (car (cdr V5988)))) (pair? (cdr (cdr V5988))))))))) (cons (quote shen.x.features.cond-expand) (cons (car (cdr (car (cdr V5988)))) (cons (car (cdr (cdr V5988))) (cons #t (cons (cons (quote shen.x.features.cond-expand) (cons (cons (quote or) (cdr (cdr (car (cdr V5988))))) (cdr (cdr V5988)))) (quote ()))))))) ((and (pair? V5988) (and (eq? (quote shen.x.features.cond-expand) (car V5988)) (and (pair? (cdr V5988)) (and (pair? (car (cdr V5988))) (and (eq? (quote not) (car (car (cdr V5988)))) (and (pair? (cdr (car (cdr V5988)))) (and (null? (cdr (cdr (car (cdr V5988))))) (pair? (cdr (cdr V5988)))))))))) (cons (quote shen.x.features.cond-expand) (cons (car (cdr (car (cdr V5988)))) (cons (cons (quote shen.x.features.cond-expand) (cdr (cdr (cdr V5988)))) (cons #t (cons (car (cdr (cdr V5988))) (quote ()))))))) ((and (pair? V5988) (and (eq? (quote shen.x.features.cond-expand) (car V5988)) (and (pair? (cdr V5988)) (and (pair? (cdr (cdr V5988))) (kl:element? (car (cdr V5988)) (kl:value (quote shen.x.features.*features*))))))) (car (cdr (cdr V5988)))) ((and (pair? V5988) (and (eq? (quote shen.x.features.cond-expand) (car V5988)) (and (pair? (cdr V5988)) (pair? (cdr (cdr V5988)))))) (cons (quote shen.x.features.cond-expand) (cdr (cdr (cdr V5988))))) (#t V5988))) (export shen.x.features.cond-expand-macro) (quote shen.x.features.cond-expand-macro))
(begin (register-function-arity (quote shen.x.features.current) 0) (define (kl:shen.x.features.current) (kl:value (quote shen.x.features.*features*))) (export shen.x.features.current) (quote shen.x.features.current))
(begin (register-function-arity (quote shen.x.features.initialise) 1) (define (kl:shen.x.features.initialise V5990) (let ((_ (guard (lambda (E) (begin (kl:set (quote shen.x.features.*features*) (quote ())) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.x.features.cond-expand-macro) (lambda (X) (kl:shen.x.features.cond-expand-macro X)))) (kl:shen.add-macro (quote shen.x.features.cond-expand-macro))))) (kl:value (quote shen.x.features.*features*))))) (let ((Old (kl:shen.x.features.current))) (let ((_ (kl:set (quote shen.x.features.*features*) V5990))) Old)))) (export shen.x.features.initialise) (quote shen.x.features.initialise))
(begin (register-function-arity (quote shen.x.features.add) 1) (define (kl:shen.x.features.add V5992) (let ((Old (kl:shen.x.features.current))) (let ((_ (kl:set (quote shen.x.features.*features*) (kl:adjoin V5992 Old)))) Old))) (export shen.x.features.add) (quote shen.x.features.add))
