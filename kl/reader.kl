"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun shen.read-char-code (V2533) (read-byte V2533))

(defun read-file-as-bytelist (V2535) (shen.read-file-as-Xlist V2535 (lambda S (read-byte S))))

(defun shen.read-file-as-charlist (V2537) (shen.read-file-as-Xlist V2537 (lambda S (shen.read-char-code S))))

(defun shen.read-file-as-Xlist (V2540 V2541) (let Stream (open V2540 in) (let X (V2541 Stream) (let Xs (shen.read-file-as-Xlist-help Stream V2541 X ()) (let Close (close Stream) (reverse Xs))))))

(defun shen.read-file-as-Xlist-help (V2546 V2547 V2548 V2549) (cond ((= -1 V2548) V2549) (true (shen.read-file-as-Xlist-help V2546 V2547 (V2547 V2546) (cons V2548 V2549)))))

(defun read-file-as-string (V2551) (let Stream (open V2551 in) (shen.rfas-h Stream (shen.read-char-code Stream) "")))

(defun shen.rfas-h (V2555 V2556 V2557) (cond ((= -1 V2556) (do (close V2555) V2557)) (true (shen.rfas-h V2555 (shen.read-char-code V2555) (cn V2557 (n->string V2556))))))

(defun input (V2559) (eval-kl (read V2559)))

(defun input+ (V2562 V2563) (let Mono? (shen.monotype V2562) (let Input (read V2563) (if (= false (shen.typecheck Input (shen.demodulate V2562))) (simple-error (cn "type error: " (shen.app Input (cn " is not of type " (shen.app V2562 "
" shen.r)) shen.r))) (eval-kl Input)))))

(defun shen.monotype (V2565) (cond ((cons? V2565) (map (lambda Z (shen.monotype Z)) V2565)) (true (if (variable? V2565) (simple-error (cn "input+ expects a monotype: not " (shen.app V2565 "
" shen.a))) V2565))))

(defun read (V2567) (hd (shen.read-loop V2567 (shen.read-char-code V2567) ())))

(defun it () (value shen.*it*))

(defun shen.read-loop (V2575 V2576 V2577) (cond ((= 94 V2576) (simple-error "read aborted")) ((= -1 V2576) (if (empty? V2577) (simple-error "error: empty stream") (compile (lambda X (shen.<st_input> X)) V2577 (lambda E E)))) ((shen.terminator? V2576) (let AllChars (append V2577 (cons V2576 ())) (let It (shen.record-it AllChars) (let Read (compile (lambda X (shen.<st_input> X)) AllChars (lambda E shen.nextbyte)) (if (or (= Read shen.nextbyte) (empty? Read)) (shen.read-loop V2575 (shen.read-char-code V2575) AllChars) Read))))) (true (shen.read-loop V2575 (shen.read-char-code V2575) (append V2577 (cons V2576 ()))))))

(defun shen.terminator? (V2579) (element? V2579 (cons 9 (cons 10 (cons 13 (cons 32 (cons 34 (cons 41 (cons 93 ())))))))))

(defun lineread (V2581) (shen.lineread-loop (shen.read-char-code V2581) () V2581))

(defun shen.lineread-loop (V2586 V2587 V2588) (cond ((= -1 V2586) (if (empty? V2587) (simple-error "empty stream") (compile (lambda X (shen.<st_input> X)) V2587 (lambda E E)))) ((= V2586 (shen.hat)) (simple-error "line read aborted")) ((element? V2586 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile (lambda X (shen.<st_input> X)) V2587 (lambda E shen.nextline)) (let It (shen.record-it V2587) (if (or (= Line shen.nextline) (empty? Line)) (shen.lineread-loop (shen.read-char-code V2588) (append V2587 (cons V2586 ())) V2588) Line)))) (true (shen.lineread-loop (shen.read-char-code V2588) (append V2587 (cons V2586 ())) V2588))))

(defun shen.record-it (V2590) (let TrimLeft (shen.trim-whitespace V2590) (let TrimRight (shen.trim-whitespace (reverse TrimLeft)) (let Trimmed (reverse TrimRight) (shen.record-it-h Trimmed)))))

(defun shen.trim-whitespace (V2592) (cond ((and (cons? V2592) (element? (hd V2592) (cons 9 (cons 10 (cons 13 (cons 32 ())))))) (shen.trim-whitespace (tl V2592))) (true V2592)))

(defun shen.record-it-h (V2594) (do (set shen.*it* (shen.cn-all (map (lambda X (n->string X)) V2594))) V2594))

(defun shen.cn-all (V2596) (cond ((= () V2596) "") ((cons? V2596) (cn (hd V2596) (shen.cn-all (tl V2596)))) (true (shen.f_error shen.cn-all))))

(defun read-file (V2598) (let Charlist (shen.read-file-as-charlist V2598) (compile (lambda X (shen.<st_input> X)) Charlist (lambda X (shen.read-error X)))))

(defun read-from-string (V2600) (let Ns (map (lambda X (string->n X)) (explode V2600)) (compile (lambda X (shen.<st_input> X)) Ns (lambda X (shen.read-error X)))))

(defun shen.read-error (V2608) (cond ((and (cons? V2608) (and (cons? (hd V2608)) (and (cons? (tl V2608)) (= () (tl (tl V2608)))))) (simple-error (cn "read error here:

 " (shen.app (shen.compress-50 50 (hd V2608)) "
" shen.a)))) (true (simple-error "read error
"))))

(defun shen.compress-50 (V2615 V2616) (cond ((= () V2616) "") ((= 0 V2615) "") ((cons? V2616) (cn (n->string (hd V2616)) (shen.compress-50 (- V2615 1) (tl V2616)))) (true (shen.f_error shen.compress-50))))

(defun shen.<st_input> (V2618) (let YaccParse (let Parse_shen.<lsb> (shen.<lsb> V2618) (if (not (= (fail) Parse_shen.<lsb>)) (let Parse_shen.<st_input1> (shen.<st_input1> Parse_shen.<lsb>) (if (not (= (fail) Parse_shen.<st_input1>)) (let Parse_shen.<rsb> (shen.<rsb> Parse_shen.<st_input1>) (if (not (= (fail) Parse_shen.<rsb>)) (let Parse_shen.<st_input2> (shen.<st_input2> Parse_shen.<rsb>) (if (not (= (fail) Parse_shen.<st_input2>)) (shen.pair (hd Parse_shen.<st_input2>) (cons (macroexpand (shen.cons_form (shen.hdtl Parse_shen.<st_input1>))) (shen.hdtl Parse_shen.<st_input2>))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<lrb> (shen.<lrb> V2618) (if (not (= (fail) Parse_shen.<lrb>)) (let Parse_shen.<st_input1> (shen.<st_input1> Parse_shen.<lrb>) (if (not (= (fail) Parse_shen.<st_input1>)) (let Parse_shen.<rrb> (shen.<rrb> Parse_shen.<st_input1>) (if (not (= (fail) Parse_shen.<rrb>)) (let Parse_shen.<st_input2> (shen.<st_input2> Parse_shen.<rrb>) (if (not (= (fail) Parse_shen.<st_input2>)) (shen.pair (hd Parse_shen.<st_input2>) (shen.package-macro (macroexpand (shen.hdtl Parse_shen.<st_input1>)) (shen.hdtl Parse_shen.<st_input2>))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<lcurly> (shen.<lcurly> V2618) (if (not (= (fail) Parse_shen.<lcurly>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<lcurly>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons { (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<rcurly> (shen.<rcurly> V2618) (if (not (= (fail) Parse_shen.<rcurly>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<rcurly>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons } (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<bar> (shen.<bar> V2618) (if (not (= (fail) Parse_shen.<bar>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<bar>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons bar! (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<semicolon> (shen.<semicolon> V2618) (if (not (= (fail) Parse_shen.<semicolon>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<semicolon>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons ; (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V2618) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<equal> (shen.<equal> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<equal>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<equal>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons := (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V2618) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<minus> (shen.<minus> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons :- (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V2618) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons : (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<comma> (shen.<comma> V2618) (if (not (= (fail) Parse_shen.<comma>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<comma>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons (intern ",") (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<comment> (shen.<comment> V2618) (if (not (= (fail) Parse_shen.<comment>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<comment>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<atom> (shen.<atom> V2618) (if (not (= (fail) Parse_shen.<atom>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<atom>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons (macroexpand (shen.hdtl Parse_shen.<atom>)) (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<whitespaces> (shen.<whitespaces> V2618) (if (not (= (fail) Parse_shen.<whitespaces>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<whitespaces>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2618) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)))

(defun shen.<lsb> (V2621) (if (and (cons? (hd V2621)) (= 91 (shen.hdhd V2621))) (let NewStream2619 (shen.pair (shen.tlhd V2621) (shen.hdtl V2621)) (shen.pair (hd NewStream2619) shen.skip)) (fail)))

(defun shen.<rsb> (V2624) (if (and (cons? (hd V2624)) (= 93 (shen.hdhd V2624))) (let NewStream2622 (shen.pair (shen.tlhd V2624) (shen.hdtl V2624)) (shen.pair (hd NewStream2622) shen.skip)) (fail)))

(defun shen.<lcurly> (V2627) (if (and (cons? (hd V2627)) (= 123 (shen.hdhd V2627))) (let NewStream2625 (shen.pair (shen.tlhd V2627) (shen.hdtl V2627)) (shen.pair (hd NewStream2625) shen.skip)) (fail)))

(defun shen.<rcurly> (V2630) (if (and (cons? (hd V2630)) (= 125 (shen.hdhd V2630))) (let NewStream2628 (shen.pair (shen.tlhd V2630) (shen.hdtl V2630)) (shen.pair (hd NewStream2628) shen.skip)) (fail)))

(defun shen.<bar> (V2633) (if (and (cons? (hd V2633)) (= 124 (shen.hdhd V2633))) (let NewStream2631 (shen.pair (shen.tlhd V2633) (shen.hdtl V2633)) (shen.pair (hd NewStream2631) shen.skip)) (fail)))

(defun shen.<semicolon> (V2636) (if (and (cons? (hd V2636)) (= 59 (shen.hdhd V2636))) (let NewStream2634 (shen.pair (shen.tlhd V2636) (shen.hdtl V2636)) (shen.pair (hd NewStream2634) shen.skip)) (fail)))

(defun shen.<colon> (V2639) (if (and (cons? (hd V2639)) (= 58 (shen.hdhd V2639))) (let NewStream2637 (shen.pair (shen.tlhd V2639) (shen.hdtl V2639)) (shen.pair (hd NewStream2637) shen.skip)) (fail)))

(defun shen.<comma> (V2642) (if (and (cons? (hd V2642)) (= 44 (shen.hdhd V2642))) (let NewStream2640 (shen.pair (shen.tlhd V2642) (shen.hdtl V2642)) (shen.pair (hd NewStream2640) shen.skip)) (fail)))

(defun shen.<equal> (V2645) (if (and (cons? (hd V2645)) (= 61 (shen.hdhd V2645))) (let NewStream2643 (shen.pair (shen.tlhd V2645) (shen.hdtl V2645)) (shen.pair (hd NewStream2643) shen.skip)) (fail)))

(defun shen.<minus> (V2648) (if (and (cons? (hd V2648)) (= 45 (shen.hdhd V2648))) (let NewStream2646 (shen.pair (shen.tlhd V2648) (shen.hdtl V2648)) (shen.pair (hd NewStream2646) shen.skip)) (fail)))

(defun shen.<lrb> (V2651) (if (and (cons? (hd V2651)) (= 40 (shen.hdhd V2651))) (let NewStream2649 (shen.pair (shen.tlhd V2651) (shen.hdtl V2651)) (shen.pair (hd NewStream2649) shen.skip)) (fail)))

(defun shen.<rrb> (V2654) (if (and (cons? (hd V2654)) (= 41 (shen.hdhd V2654))) (let NewStream2652 (shen.pair (shen.tlhd V2654) (shen.hdtl V2654)) (shen.pair (hd NewStream2652) shen.skip)) (fail)))

(defun shen.<atom> (V2656) (let YaccParse (let Parse_shen.<str> (shen.<str> V2656) (if (not (= (fail) Parse_shen.<str>)) (shen.pair (hd Parse_shen.<str>) (shen.control-chars (shen.hdtl Parse_shen.<str>))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<number> (shen.<number> V2656) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (shen.hdtl Parse_shen.<number>)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<sym> (shen.<sym> V2656) (if (not (= (fail) Parse_shen.<sym>)) (shen.pair (hd Parse_shen.<sym>) (if (= (shen.hdtl Parse_shen.<sym>) "<>") (cons vector (cons 0 ())) (intern (shen.hdtl Parse_shen.<sym>)))) (fail))) YaccParse)) YaccParse)))

(defun shen.control-chars (V2658) (cond ((= () V2658) "") ((and (cons? V2658) (and (= "c" (hd V2658)) (and (cons? (tl V2658)) (= "#" (hd (tl V2658)))))) (let CodePoint (shen.code-point (tl (tl V2658))) (let AfterCodePoint (shen.after-codepoint (tl (tl V2658))) (@s (n->string (shen.decimalise CodePoint)) (shen.control-chars AfterCodePoint))))) ((cons? V2658) (@s (hd V2658) (shen.control-chars (tl V2658)))) (true (shen.f_error shen.control-chars))))

(defun shen.code-point (V2662) (cond ((and (cons? V2662) (= ";" (hd V2662))) "") ((and (cons? V2662) (element? (hd V2662) (cons "0" (cons "1" (cons "2" (cons "3" (cons "4" (cons "5" (cons "6" (cons "7" (cons "8" (cons "9" (cons "0" ()))))))))))))) (cons (hd V2662) (shen.code-point (tl V2662)))) (true (simple-error (cn "code point parse error " (shen.app V2662 "
" shen.a))))))

(defun shen.after-codepoint (V2668) (cond ((= () V2668) ()) ((and (cons? V2668) (= ";" (hd V2668))) (tl V2668)) ((cons? V2668) (shen.after-codepoint (tl V2668))) (true (shen.f_error shen.after-codepoint))))

(defun shen.decimalise (V2670) (shen.pre (reverse (shen.digits->integers V2670)) 0))

(defun shen.digits->integers (V2676) (cond ((and (cons? V2676) (= "0" (hd V2676))) (cons 0 (shen.digits->integers (tl V2676)))) ((and (cons? V2676) (= "1" (hd V2676))) (cons 1 (shen.digits->integers (tl V2676)))) ((and (cons? V2676) (= "2" (hd V2676))) (cons 2 (shen.digits->integers (tl V2676)))) ((and (cons? V2676) (= "3" (hd V2676))) (cons 3 (shen.digits->integers (tl V2676)))) ((and (cons? V2676) (= "4" (hd V2676))) (cons 4 (shen.digits->integers (tl V2676)))) ((and (cons? V2676) (= "5" (hd V2676))) (cons 5 (shen.digits->integers (tl V2676)))) ((and (cons? V2676) (= "6" (hd V2676))) (cons 6 (shen.digits->integers (tl V2676)))) ((and (cons? V2676) (= "7" (hd V2676))) (cons 7 (shen.digits->integers (tl V2676)))) ((and (cons? V2676) (= "8" (hd V2676))) (cons 8 (shen.digits->integers (tl V2676)))) ((and (cons? V2676) (= "9" (hd V2676))) (cons 9 (shen.digits->integers (tl V2676)))) (true ())))

(defun shen.<sym> (V2678) (let Parse_shen.<alpha> (shen.<alpha> V2678) (if (not (= (fail) Parse_shen.<alpha>)) (let Parse_shen.<alphanums> (shen.<alphanums> Parse_shen.<alpha>) (if (not (= (fail) Parse_shen.<alphanums>)) (shen.pair (hd Parse_shen.<alphanums>) (@s (shen.hdtl Parse_shen.<alpha>) (shen.hdtl Parse_shen.<alphanums>))) (fail))) (fail))))

(defun shen.<alphanums> (V2680) (let YaccParse (let Parse_shen.<alphanum> (shen.<alphanum> V2680) (if (not (= (fail) Parse_shen.<alphanum>)) (let Parse_shen.<alphanums> (shen.<alphanums> Parse_shen.<alphanum>) (if (not (= (fail) Parse_shen.<alphanums>)) (shen.pair (hd Parse_shen.<alphanums>) (@s (shen.hdtl Parse_shen.<alphanum>) (shen.hdtl Parse_shen.<alphanums>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2680) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) "") (fail))) YaccParse)))

(defun shen.<alphanum> (V2682) (let YaccParse (let Parse_shen.<alpha> (shen.<alpha> V2682) (if (not (= (fail) Parse_shen.<alpha>)) (shen.pair (hd Parse_shen.<alpha>) (shen.hdtl Parse_shen.<alpha>)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<num> (shen.<num> V2682) (if (not (= (fail) Parse_shen.<num>)) (shen.pair (hd Parse_shen.<num>) (shen.hdtl Parse_shen.<num>)) (fail))) YaccParse)))

(defun shen.<num> (V2684) (if (cons? (hd V2684)) (let Parse_Char (shen.hdhd V2684) (if (shen.numbyte? Parse_Char) (shen.pair (hd (shen.pair (shen.tlhd V2684) (shen.hdtl V2684))) (n->string Parse_Char)) (fail))) (fail)))

(defun shen.numbyte? (V2690) (cond ((= 48 V2690) true) ((= 49 V2690) true) ((= 50 V2690) true) ((= 51 V2690) true) ((= 52 V2690) true) ((= 53 V2690) true) ((= 54 V2690) true) ((= 55 V2690) true) ((= 56 V2690) true) ((= 57 V2690) true) (true false)))

(defun shen.<alpha> (V2692) (if (cons? (hd V2692)) (let Parse_Char (shen.hdhd V2692) (if (shen.symbol-code? Parse_Char) (shen.pair (hd (shen.pair (shen.tlhd V2692) (shen.hdtl V2692))) (n->string Parse_Char)) (fail))) (fail)))

(defun shen.symbol-code? (V2694) (or (= V2694 126) (or (and (> V2694 94) (< V2694 123)) (or (and (> V2694 59) (< V2694 91)) (or (and (> V2694 41) (and (< V2694 58) (not (= V2694 44)))) (or (and (> V2694 34) (< V2694 40)) (= V2694 33)))))))

(defun shen.<str> (V2696) (let Parse_shen.<dbq> (shen.<dbq> V2696) (if (not (= (fail) Parse_shen.<dbq>)) (let Parse_shen.<strcontents> (shen.<strcontents> Parse_shen.<dbq>) (if (not (= (fail) Parse_shen.<strcontents>)) (let Parse_shen.<dbq> (shen.<dbq> Parse_shen.<strcontents>) (if (not (= (fail) Parse_shen.<dbq>)) (shen.pair (hd Parse_shen.<dbq>) (shen.hdtl Parse_shen.<strcontents>)) (fail))) (fail))) (fail))))

(defun shen.<dbq> (V2698) (if (cons? (hd V2698)) (let Parse_Char (shen.hdhd V2698) (if (= Parse_Char 34) (shen.pair (hd (shen.pair (shen.tlhd V2698) (shen.hdtl V2698))) Parse_Char) (fail))) (fail)))

(defun shen.<strcontents> (V2700) (let YaccParse (let Parse_shen.<strc> (shen.<strc> V2700) (if (not (= (fail) Parse_shen.<strc>)) (let Parse_shen.<strcontents> (shen.<strcontents> Parse_shen.<strc>) (if (not (= (fail) Parse_shen.<strcontents>)) (shen.pair (hd Parse_shen.<strcontents>) (cons (shen.hdtl Parse_shen.<strc>) (shen.hdtl Parse_shen.<strcontents>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2700) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<byte> (V2702) (if (cons? (hd V2702)) (let Parse_Char (shen.hdhd V2702) (shen.pair (hd (shen.pair (shen.tlhd V2702) (shen.hdtl V2702))) (n->string Parse_Char))) (fail)))

(defun shen.<strc> (V2704) (if (cons? (hd V2704)) (let Parse_Char (shen.hdhd V2704) (if (not (= Parse_Char 34)) (shen.pair (hd (shen.pair (shen.tlhd V2704) (shen.hdtl V2704))) (n->string Parse_Char)) (fail))) (fail)))

(defun shen.<number> (V2706) (let YaccParse (let Parse_shen.<minus> (shen.<minus> V2706) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<number> (shen.<number> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (- 0 (shen.hdtl Parse_shen.<number>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<plus> (shen.<plus> V2706) (if (not (= (fail) Parse_shen.<plus>)) (let Parse_shen.<number> (shen.<number> Parse_shen.<plus>) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (shen.hdtl Parse_shen.<number>)) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<predigits> (shen.<predigits> V2706) (if (not (= (fail) Parse_shen.<predigits>)) (let Parse_shen.<stop> (shen.<stop> Parse_shen.<predigits>) (if (not (= (fail) Parse_shen.<stop>)) (let Parse_shen.<postdigits> (shen.<postdigits> Parse_shen.<stop>) (if (not (= (fail) Parse_shen.<postdigits>)) (let Parse_shen.<E> (shen.<E> Parse_shen.<postdigits>) (if (not (= (fail) Parse_shen.<E>)) (let Parse_shen.<log10> (shen.<log10> Parse_shen.<E>) (if (not (= (fail) Parse_shen.<log10>)) (shen.pair (hd Parse_shen.<log10>) (* (shen.expt 10 (shen.hdtl Parse_shen.<log10>)) (+ (shen.pre (reverse (shen.hdtl Parse_shen.<predigits>)) 0) (shen.post (shen.hdtl Parse_shen.<postdigits>) 1)))) (fail))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<digits> (shen.<digits> V2706) (if (not (= (fail) Parse_shen.<digits>)) (let Parse_shen.<E> (shen.<E> Parse_shen.<digits>) (if (not (= (fail) Parse_shen.<E>)) (let Parse_shen.<log10> (shen.<log10> Parse_shen.<E>) (if (not (= (fail) Parse_shen.<log10>)) (shen.pair (hd Parse_shen.<log10>) (* (shen.expt 10 (shen.hdtl Parse_shen.<log10>)) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<predigits> (shen.<predigits> V2706) (if (not (= (fail) Parse_shen.<predigits>)) (let Parse_shen.<stop> (shen.<stop> Parse_shen.<predigits>) (if (not (= (fail) Parse_shen.<stop>)) (let Parse_shen.<postdigits> (shen.<postdigits> Parse_shen.<stop>) (if (not (= (fail) Parse_shen.<postdigits>)) (shen.pair (hd Parse_shen.<postdigits>) (+ (shen.pre (reverse (shen.hdtl Parse_shen.<predigits>)) 0) (shen.post (shen.hdtl Parse_shen.<postdigits>) 1))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digits> (shen.<digits> V2706) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0)) (fail))) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)))

(defun shen.<E> (V2709) (if (and (cons? (hd V2709)) (= 101 (shen.hdhd V2709))) (let NewStream2707 (shen.pair (shen.tlhd V2709) (shen.hdtl V2709)) (shen.pair (hd NewStream2707) shen.skip)) (fail)))

(defun shen.<log10> (V2711) (let YaccParse (let Parse_shen.<minus> (shen.<minus> V2711) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<digits> (shen.<digits> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (- 0 (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digits> (shen.<digits> V2711) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0)) (fail))) YaccParse)))

(defun shen.<plus> (V2713) (if (cons? (hd V2713)) (let Parse_Char (shen.hdhd V2713) (if (= Parse_Char 43) (shen.pair (hd (shen.pair (shen.tlhd V2713) (shen.hdtl V2713))) Parse_Char) (fail))) (fail)))

(defun shen.<stop> (V2715) (if (cons? (hd V2715)) (let Parse_Char (shen.hdhd V2715) (if (= Parse_Char 46) (shen.pair (hd (shen.pair (shen.tlhd V2715) (shen.hdtl V2715))) Parse_Char) (fail))) (fail)))

(defun shen.<predigits> (V2717) (let YaccParse (let Parse_shen.<digits> (shen.<digits> V2717) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.hdtl Parse_shen.<digits>)) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2717) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<postdigits> (V2719) (let Parse_shen.<digits> (shen.<digits> V2719) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.hdtl Parse_shen.<digits>)) (fail))))

(defun shen.<digits> (V2721) (let YaccParse (let Parse_shen.<digit> (shen.<digit> V2721) (if (not (= (fail) Parse_shen.<digit>)) (let Parse_shen.<digits> (shen.<digits> Parse_shen.<digit>) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (cons (shen.hdtl Parse_shen.<digit>) (shen.hdtl Parse_shen.<digits>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digit> (shen.<digit> V2721) (if (not (= (fail) Parse_shen.<digit>)) (shen.pair (hd Parse_shen.<digit>) (cons (shen.hdtl Parse_shen.<digit>) ())) (fail))) YaccParse)))

(defun shen.<digit> (V2723) (if (cons? (hd V2723)) (let Parse_X (shen.hdhd V2723) (if (shen.numbyte? Parse_X) (shen.pair (hd (shen.pair (shen.tlhd V2723) (shen.hdtl V2723))) (shen.byte->digit Parse_X)) (fail))) (fail)))

(defun shen.byte->digit (V2725) (cond ((= 48 V2725) 0) ((= 49 V2725) 1) ((= 50 V2725) 2) ((= 51 V2725) 3) ((= 52 V2725) 4) ((= 53 V2725) 5) ((= 54 V2725) 6) ((= 55 V2725) 7) ((= 56 V2725) 8) ((= 57 V2725) 9) (true (shen.f_error shen.byte->digit))))

(defun shen.pre (V2730 V2731) (cond ((= () V2730) 0) ((cons? V2730) (+ (* (shen.expt 10 V2731) (hd V2730)) (shen.pre (tl V2730) (+ V2731 1)))) (true (shen.f_error shen.pre))))

(defun shen.post (V2736 V2737) (cond ((= () V2736) 0) ((cons? V2736) (+ (* (shen.expt 10 (- 0 V2737)) (hd V2736)) (shen.post (tl V2736) (+ V2737 1)))) (true (shen.f_error shen.post))))

(defun shen.expt (V2742 V2743) (cond ((= 0 V2743) 1) ((> V2743 0) (* V2742 (shen.expt V2742 (- V2743 1)))) (true (* 1 (/ (shen.expt V2742 (+ V2743 1)) V2742)))))

(defun shen.<st_input1> (V2745) (let Parse_shen.<st_input> (shen.<st_input> V2745) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))))

(defun shen.<st_input2> (V2747) (let Parse_shen.<st_input> (shen.<st_input> V2747) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))))

(defun shen.<comment> (V2749) (let YaccParse (let Parse_shen.<singleline> (shen.<singleline> V2749) (if (not (= (fail) Parse_shen.<singleline>)) (shen.pair (hd Parse_shen.<singleline>) shen.skip) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<multiline> (shen.<multiline> V2749) (if (not (= (fail) Parse_shen.<multiline>)) (shen.pair (hd Parse_shen.<multiline>) shen.skip) (fail))) YaccParse)))

(defun shen.<singleline> (V2751) (let Parse_shen.<backslash> (shen.<backslash> V2751) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<backslash> (shen.<backslash> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<anysingle> (shen.<anysingle> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<anysingle>)) (let Parse_shen.<return> (shen.<return> Parse_shen.<anysingle>) (if (not (= (fail) Parse_shen.<return>)) (shen.pair (hd Parse_shen.<return>) shen.skip) (fail))) (fail))) (fail))) (fail))))

(defun shen.<backslash> (V2754) (if (and (cons? (hd V2754)) (= 92 (shen.hdhd V2754))) (let NewStream2752 (shen.pair (shen.tlhd V2754) (shen.hdtl V2754)) (shen.pair (hd NewStream2752) shen.skip)) (fail)))

(defun shen.<anysingle> (V2756) (let YaccParse (let Parse_shen.<non-return> (shen.<non-return> V2756) (if (not (= (fail) Parse_shen.<non-return>)) (let Parse_shen.<anysingle> (shen.<anysingle> Parse_shen.<non-return>) (if (not (= (fail) Parse_shen.<anysingle>)) (shen.pair (hd Parse_shen.<anysingle>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2756) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) shen.skip) (fail))) YaccParse)))

(defun shen.<non-return> (V2758) (if (cons? (hd V2758)) (let Parse_X (shen.hdhd V2758) (if (not (element? Parse_X (cons 10 (cons 13 ())))) (shen.pair (hd (shen.pair (shen.tlhd V2758) (shen.hdtl V2758))) shen.skip) (fail))) (fail)))

(defun shen.<return> (V2760) (if (cons? (hd V2760)) (let Parse_X (shen.hdhd V2760) (if (element? Parse_X (cons 10 (cons 13 ()))) (shen.pair (hd (shen.pair (shen.tlhd V2760) (shen.hdtl V2760))) shen.skip) (fail))) (fail)))

(defun shen.<multiline> (V2762) (let Parse_shen.<backslash> (shen.<backslash> V2762) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<times> (shen.<times> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<times>)) (let Parse_shen.<anymulti> (shen.<anymulti> Parse_shen.<times>) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail))) (fail))) (fail))))

(defun shen.<times> (V2765) (if (and (cons? (hd V2765)) (= 42 (shen.hdhd V2765))) (let NewStream2763 (shen.pair (shen.tlhd V2765) (shen.hdtl V2765)) (shen.pair (hd NewStream2763) shen.skip)) (fail)))

(defun shen.<anymulti> (V2767) (let YaccParse (let Parse_shen.<comment> (shen.<comment> V2767) (if (not (= (fail) Parse_shen.<comment>)) (let Parse_shen.<anymulti> (shen.<anymulti> Parse_shen.<comment>) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<times> (shen.<times> V2767) (if (not (= (fail) Parse_shen.<times>)) (let Parse_shen.<backslash> (shen.<backslash> Parse_shen.<times>) (if (not (= (fail) Parse_shen.<backslash>)) (shen.pair (hd Parse_shen.<backslash>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (if (cons? (hd V2767)) (let Parse_X (shen.hdhd V2767) (let Parse_shen.<anymulti> (shen.<anymulti> (shen.pair (shen.tlhd V2767) (shen.hdtl V2767))) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail)))) (fail)) YaccParse)) YaccParse)))

(defun shen.<whitespaces> (V2769) (let YaccParse (let Parse_shen.<whitespace> (shen.<whitespace> V2769) (if (not (= (fail) Parse_shen.<whitespace>)) (let Parse_shen.<whitespaces> (shen.<whitespaces> Parse_shen.<whitespace>) (if (not (= (fail) Parse_shen.<whitespaces>)) (shen.pair (hd Parse_shen.<whitespaces>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<whitespace> (shen.<whitespace> V2769) (if (not (= (fail) Parse_shen.<whitespace>)) (shen.pair (hd Parse_shen.<whitespace>) shen.skip) (fail))) YaccParse)))

(defun shen.<whitespace> (V2771) (if (cons? (hd V2771)) (let Parse_X (shen.hdhd V2771) (if (let Parse_Case Parse_X (or (= Parse_Case 32) (or (= Parse_Case 13) (or (= Parse_Case 10) (= Parse_Case 9))))) (shen.pair (hd (shen.pair (shen.tlhd V2771) (shen.hdtl V2771))) shen.skip) (fail))) (fail)))

(defun shen.cons_form (V2773) (cond ((= () V2773) ()) ((and (cons? V2773) (and (cons? (tl V2773)) (and (cons? (tl (tl V2773))) (and (= () (tl (tl (tl V2773)))) (= (hd (tl V2773)) bar!))))) (cons cons (cons (hd V2773) (tl (tl V2773))))) ((cons? V2773) (cons cons (cons (hd V2773) (cons (shen.cons_form (tl V2773)) ())))) (true (shen.f_error shen.cons_form))))

(defun shen.package-macro (V2778 V2779) (cond ((and (cons? V2778) (and (= $ (hd V2778)) (and (cons? (tl V2778)) (= () (tl (tl V2778)))))) (append (explode (hd (tl V2778))) V2779)) ((and (cons? V2778) (and (= package (hd V2778)) (and (cons? (tl V2778)) (and (= null (hd (tl V2778))) (cons? (tl (tl V2778))))))) (append (tl (tl (tl V2778))) V2779)) ((and (cons? V2778) (and (= package (hd V2778)) (and (cons? (tl V2778)) (cons? (tl (tl V2778)))))) (let ListofExceptions (shen.eval-without-macros (hd (tl (tl V2778)))) (let External (shen.record-exceptions ListofExceptions (hd (tl V2778))) (let PackageNameDot (intern (cn (str (hd (tl V2778))) ".")) (let ExpPackageNameDot (explode PackageNameDot) (let Packaged (shen.packageh PackageNameDot ListofExceptions (tl (tl (tl V2778))) ExpPackageNameDot) (let Internal (shen.record-internal (hd (tl V2778)) (shen.internal-symbols ExpPackageNameDot Packaged)) (append Packaged V2779)))))))) (true (cons V2778 V2779))))

(defun shen.record-exceptions (V2782 V2783) (let CurrExceptions (trap-error (get V2783 shen.external-symbols (value *property-vector*)) (lambda E ())) (let AllExceptions (union V2782 CurrExceptions) (put V2783 shen.external-symbols AllExceptions (value *property-vector*)))))

(defun shen.record-internal (V2786 V2787) (put V2786 shen.internal-symbols (union V2787 (trap-error (get V2786 shen.internal-symbols (value *property-vector*)) (lambda E ()))) (value *property-vector*)))

(defun shen.internal-symbols (V2798 V2799) (cond ((and (symbol? V2799) (shen.prefix? V2798 (explode V2799))) (cons V2799 ())) ((cons? V2799) (union (shen.internal-symbols V2798 (hd V2799)) (shen.internal-symbols V2798 (tl V2799)))) (true ())))

(defun shen.packageh (V2816 V2817 V2818 V2819) (cond ((cons? V2818) (cons (shen.packageh V2816 V2817 (hd V2818) V2819) (shen.packageh V2816 V2817 (tl V2818) V2819))) ((or (shen.sysfunc? V2818) (or (variable? V2818) (or (element? V2818 V2817) (or (shen.doubleunderline? V2818) (shen.singleunderline? V2818))))) V2818) ((and (symbol? V2818) (let ExplodeX (explode V2818) (and (not (shen.prefix? (cons "s" (cons "h" (cons "e" (cons "n" (cons "." ()))))) ExplodeX)) (not (shen.prefix? V2819 ExplodeX))))) (concat V2816 V2818)) (true V2818)))



