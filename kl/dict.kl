"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.dict (V3099) (cond ((< V3099 1) (simple-error (cn "invalid initial dict size: " (shen.app V3099 "" shen.s)))) (true (let D (absvector (+ 3 V3099)) (let Tag (address-> D 0 shen.dictionary) (let Capacity (address-> D 1 V3099) (let Count (address-> D 2 0) (let Fill (shen.fillvector D 3 (+ 2 V3099) ()) D))))))))

(defun shen.dict? (V3101) (and (absvector? V3101) (= (trap-error (<-address V3101 0) (lambda E shen.not-dictionary)) shen.dictionary)))

(defun shen.dict-capacity (V3103) (<-address V3103 1))

(defun shen.dict-count (V3105) (<-address V3105 2))

(defun shen.dict-count-> (V3108 V3109) (address-> V3108 2 V3109))

(defun shen.<-dict-bucket (V3112 V3113) (<-address V3112 (+ 3 V3113)))

(defun shen.dict-bucket-> (V3117 V3118 V3119) (address-> V3117 (+ 3 V3118) V3119))

(defun shen.dict-update-count (V3123 V3124 V3125) (let Diff (- (length V3125) (length V3124)) (shen.dict-count-> V3123 (+ Diff (shen.dict-count V3123)))))

(defun shen.dict-> (V3129 V3130 V3131) (let N (hash V3130 (shen.dict-capacity V3129)) (let Bucket (shen.<-dict-bucket V3129 N) (let NewBucket (shen.assoc-set V3130 V3131 Bucket) (let Change (shen.dict-bucket-> V3129 N NewBucket) (let Count (shen.dict-update-count V3129 Bucket NewBucket) V3131))))))

(defun shen.<-dict (V3134 V3135) (let N (hash V3135 (shen.dict-capacity V3134)) (let Bucket (shen.<-dict-bucket V3134 N) (let Result (assoc V3135 Bucket) (if (empty? Result) (simple-error (cn "value " (shen.app V3135 " not found in dict
" shen.a))) (tl Result))))))

(defun shen.dict-rm (V3138 V3139) (let N (hash V3139 (shen.dict-capacity V3138)) (let Bucket (shen.<-dict-bucket V3138 N) (let NewBucket (shen.assoc-rm V3139 Bucket) (let Change (shen.dict-bucket-> V3138 N NewBucket) (let Count (shen.dict-update-count V3138 Bucket NewBucket) V3139))))))

(defun shen.dict-fold (V3143 V3144 V3145) (let Limit (shen.dict-capacity V3144) (shen.dict-fold-h V3143 V3144 V3145 0 Limit)))

(defun shen.dict-fold-h (V3152 V3153 V3154 V3155 V3156) (cond ((= V3156 V3155) V3154) (true (let B (shen.<-dict-bucket V3153 V3155) (let Acc (shen.bucket-fold V3152 B V3154) (shen.dict-fold-h V3152 V3153 Acc (+ 1 V3155) V3156))))))

(defun shen.bucket-fold (V3160 V3161 V3162) (cond ((= () V3161) V3162) ((and (cons? V3161) (cons? (hd V3161))) (V3160 (hd (hd V3161)) (tl (hd V3161)) (shen.bucket-fold V3160 (tl V3161) V3162))) (true (shen.f_error shen.bucket-fold))))

(defun shen.dict-keys (V3164) (shen.dict-fold (lambda K (lambda _ (lambda Acc (cons K Acc)))) V3164 ()))

(defun shen.dict-values (V3166) (shen.dict-fold (lambda _ (lambda V (lambda Acc (cons V Acc)))) V3166 ()))



