"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun shen.dict (V3445) (cond ((< V3445 1) (simple-error (cn "invalid initial dict size: " (shen.app V3445 "" shen.s)))) (true (let D (absvector (+ 3 V3445)) (let Tag (address-> D 0 shen.dictionary) (let Capacity (address-> D 1 V3445) (let Count (address-> D 2 0) (let Fill (shen.fillvector D 3 (+ 2 V3445) ()) D))))))))

(defun shen.dict? (V3447) (and (absvector? V3447) (= (trap-error (<-address V3447 0) (lambda E shen.not-dictionary)) shen.dictionary)))

(defun shen.dict-capacity (V3449) (<-address V3449 1))

(defun shen.dict-count (V3451) (<-address V3451 2))

(defun shen.dict-count-> (V3454 V3455) (address-> V3454 2 V3455))

(defun shen.<-dict-bucket (V3458 V3459) (<-address V3458 (+ 3 V3459)))

(defun shen.dict-bucket-> (V3463 V3464 V3465) (address-> V3463 (+ 3 V3464) V3465))

(defun shen.dict-update-count (V3469 V3470 V3471) (let Diff (- (length V3471) (length V3470)) (shen.dict-count-> V3469 (+ Diff (shen.dict-count V3469)))))

(defun shen.dict-> (V3475 V3476 V3477) (let N (hash V3476 (shen.dict-capacity V3475)) (let Bucket (shen.<-dict-bucket V3475 N) (let NewBucket (shen.assoc-set V3476 V3477 Bucket) (let Change (shen.dict-bucket-> V3475 N NewBucket) (let Count (shen.dict-update-count V3475 Bucket NewBucket) V3477))))))

(defun shen.<-dict (V3480 V3481) (let N (hash V3481 (shen.dict-capacity V3480)) (let Bucket (shen.<-dict-bucket V3480 N) (let Result (assoc V3481 Bucket) (if (empty? Result) (simple-error (cn "value " (shen.app V3481 " not found in dict
" shen.a))) (tl Result))))))

(defun shen.dict-rm (V3484 V3485) (let N (hash V3485 (shen.dict-capacity V3484)) (let Bucket (shen.<-dict-bucket V3484 N) (let NewBucket (shen.assoc-rm V3485 Bucket) (let Change (shen.dict-bucket-> V3484 N NewBucket) (let Count (shen.dict-update-count V3484 Bucket NewBucket) V3485))))))

(defun shen.dict-fold (V3489 V3490 V3491) (let Limit (shen.dict-capacity V3490) (shen.dict-fold-h V3489 V3490 V3491 0 Limit)))

(defun shen.dict-fold-h (V3498 V3499 V3500 V3501 V3502) (cond ((= V3502 V3501) V3500) (true (let B (shen.<-dict-bucket V3499 V3501) (let Acc (shen.bucket-fold V3498 B V3500) (shen.dict-fold-h V3498 V3499 Acc (+ 1 V3501) V3502))))))

(defun shen.bucket-fold (V3506 V3507 V3508) (cond ((= () V3507) V3508) ((and (cons? V3507) (cons? (hd V3507))) (V3506 (hd (hd V3507)) (tl (hd V3507)) (shen.bucket-fold V3506 (tl V3507) V3508))) (true (shen.f_error shen.bucket-fold))))

(defun shen.dict-keys (V3510) (shen.dict-fold (lambda K (lambda _ (lambda Acc (cons K Acc)))) V3510 ()))

(defun shen.dict-values (V3512) (shen.dict-fold (lambda _ (lambda V (lambda Acc (cons V Acc)))) V3512 ()))



