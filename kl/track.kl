"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.f_error (V3892) (do (shen.prhush (cn "partial function " (shen.app V3892 ";
" shen.a)) (stoutput)) (do (if (and (not (shen.tracked? V3892)) (y-or-n? (cn "track " (shen.app V3892 "? " shen.a)))) (shen.track-function (ps V3892)) shen.ok) (simple-error "aborted"))))

(defun shen.tracked? (V3894) (element? V3894 (value shen.*tracking*)))

(defun track (V3896) (let Source (ps V3896) (shen.track-function Source)))

(defun shen.track-function (V3898) (cond ((and (cons? V3898) (and (= defun (hd V3898)) (and (cons? (tl V3898)) (and (cons? (tl (tl V3898))) (and (cons? (tl (tl (tl V3898)))) (= () (tl (tl (tl (tl V3898)))))))))) (let KL (cons defun (cons (hd (tl V3898)) (cons (hd (tl (tl V3898))) (cons (shen.insert-tracking-code (hd (tl V3898)) (hd (tl (tl V3898))) (hd (tl (tl (tl V3898))))) ())))) (let Ob (eval-kl KL) (let Tr (set shen.*tracking* (cons Ob (value shen.*tracking*))) Ob)))) (true (shen.f_error shen.track-function))))

(defun shen.insert-tracking-code (V3902 V3903 V3904) (cons do (cons (cons set (cons shen.*call* (cons (cons + (cons (cons value (cons shen.*call* ())) (cons 1 ()))) ()))) (cons (cons do (cons (cons shen.input-track (cons (cons value (cons shen.*call* ())) (cons V3902 (cons (shen.cons_form V3903) ())))) (cons (cons do (cons (cons shen.terpri-or-read-char ()) (cons (cons let (cons Result (cons V3904 (cons (cons do (cons (cons shen.output-track (cons (cons value (cons shen.*call* ())) (cons V3902 (cons Result ())))) (cons (cons do (cons (cons set (cons shen.*call* (cons (cons - (cons (cons value (cons shen.*call* ())) (cons 1 ()))) ()))) (cons (cons do (cons (cons shen.terpri-or-read-char ()) (cons Result ()))) ()))) ()))) ())))) ()))) ()))) ()))))

(set shen.*step* false)

(defun step (V3910) (cond ((= + V3910) (set shen.*step* true)) ((= - V3910) (set shen.*step* false)) (true (simple-error "step expects a + or a -.
"))))

(defun spy (V3916) (cond ((= + V3916) (set shen.*spy* true)) ((= - V3916) (set shen.*spy* false)) (true (simple-error "spy expects a + or a -.
"))))

(defun shen.terpri-or-read-char () (if (value shen.*step*) (shen.check-byte (read-byte (value *stinput*))) (nl 1)))

(defun shen.check-byte (V3922) (cond ((= V3922 (shen.hat)) (simple-error "aborted")) (true true)))

(defun shen.input-track (V3926 V3927 V3928) (do (shen.prhush (cn "
" (shen.app (shen.spaces V3926) (cn "<" (shen.app V3926 (cn "> Inputs to " (shen.app V3927 (cn " 
" (shen.app (shen.spaces V3926) "" shen.a)) shen.a)) shen.a)) shen.a)) (stoutput)) (shen.recursively-print V3928)))

(defun shen.recursively-print (V3930) (cond ((= () V3930) (shen.prhush " ==>" (stoutput))) ((cons? V3930) (do (print (hd V3930)) (do (shen.prhush ", " (stoutput)) (shen.recursively-print (tl V3930))))) (true (shen.f_error shen.recursively-print))))

(defun shen.spaces (V3932) (cond ((= 0 V3932) "") (true (cn " " (shen.spaces (- V3932 1))))))

(defun shen.output-track (V3936 V3937 V3938) (shen.prhush (cn "
" (shen.app (shen.spaces V3936) (cn "<" (shen.app V3936 (cn "> Output from " (shen.app V3937 (cn " 
" (shen.app (shen.spaces V3936) (cn "==> " (shen.app V3938 "" shen.s)) shen.a)) shen.a)) shen.a)) shen.a)) (stoutput)))

(defun untrack (V3940) (let Tracking (value shen.*tracking*) (let Tracking (set shen.*tracking* (remove V3940 Tracking)) (eval (ps V3940)))))

(defun profile (V3942) (shen.profile-help (ps V3942)))

(defun shen.profile-help (V3948) (cond ((and (cons? V3948) (and (= defun (hd V3948)) (and (cons? (tl V3948)) (and (cons? (tl (tl V3948))) (and (cons? (tl (tl (tl V3948)))) (= () (tl (tl (tl (tl V3948)))))))))) (let G (gensym shen.f) (let Profile (cons defun (cons (hd (tl V3948)) (cons (hd (tl (tl V3948))) (cons (shen.profile-func (hd (tl V3948)) (hd (tl (tl V3948))) (cons G (hd (tl (tl V3948))))) ())))) (let Def (cons defun (cons G (cons (hd (tl (tl V3948))) (cons (subst G (hd (tl V3948)) (hd (tl (tl (tl V3948))))) ())))) (let CompileProfile (shen.eval-without-macros Profile) (let CompileG (shen.eval-without-macros Def) (hd (tl V3948)))))))) (true (simple-error "Cannot profile.
"))))

(defun unprofile (V3950) (untrack V3950))

(defun shen.profile-func (V3954 V3955 V3956) (cons let (cons Start (cons (cons get-time (cons run ())) (cons (cons let (cons Result (cons V3956 (cons (cons let (cons Finish (cons (cons - (cons (cons get-time (cons run ())) (cons Start ()))) (cons (cons let (cons Record (cons (cons shen.put-profile (cons V3954 (cons (cons + (cons (cons shen.get-profile (cons V3954 ())) (cons Finish ()))) ()))) (cons Result ())))) ())))) ())))) ())))))

(defun profile-results (V3958) (let Results (shen.get-profile V3958) (let Initialise (shen.put-profile V3958 0) (@p V3958 Results))))

(defun shen.get-profile (V3960) (trap-error (get V3960 profile (value *property-vector*)) (lambda E 0)))

(defun shen.put-profile (V3963 V3964) (put V3963 profile V3964 (value *property-vector*)))



