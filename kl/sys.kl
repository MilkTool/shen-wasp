"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun thaw (V3023) (V3023))

(defun eval (V3025) (let Macroexpand (shen.walk (lambda Y (macroexpand Y)) V3025) (if (shen.packaged? Macroexpand) (map (lambda Z (shen.eval-without-macros Z)) (shen.package-contents Macroexpand)) (shen.eval-without-macros Macroexpand))))

(defun shen.eval-without-macros (V3027) (eval-kl (shen.elim-def (shen.proc-input+ V3027))))

(defun shen.proc-input+ (V3029) (cond ((and (cons? V3029) (and (= input+ (hd V3029)) (and (cons? (tl V3029)) (and (cons? (tl (tl V3029))) (= () (tl (tl (tl V3029)))))))) (cons input+ (cons (shen.rcons_form (hd (tl V3029))) (tl (tl V3029))))) ((and (cons? V3029) (and (= shen.read+ (hd V3029)) (and (cons? (tl V3029)) (and (cons? (tl (tl V3029))) (= () (tl (tl (tl V3029)))))))) (cons shen.read+ (cons (shen.rcons_form (hd (tl V3029))) (tl (tl V3029))))) ((cons? V3029) (map (lambda Z (shen.proc-input+ Z)) V3029)) (true V3029)))

(defun shen.elim-def (V3031) (cond ((and (cons? V3031) (and (= define (hd V3031)) (cons? (tl V3031)))) (shen.shen->kl (hd (tl V3031)) (tl (tl V3031)))) ((and (cons? V3031) (and (= defmacro (hd V3031)) (cons? (tl V3031)))) (let Default (cons X (cons -> (cons X ()))) (let Def (shen.elim-def (cons define (cons (hd (tl V3031)) (append (tl (tl V3031)) Default)))) (let MacroAdd (shen.add-macro (hd (tl V3031))) Def)))) ((and (cons? V3031) (and (= defcc (hd V3031)) (cons? (tl V3031)))) (shen.elim-def (shen.yacc V3031))) ((cons? V3031) (map (lambda Z (shen.elim-def Z)) V3031)) (true V3031)))

(defun shen.add-macro (V3033) (let MacroReg (value shen.*macroreg*) (let NewMacroReg (set shen.*macroreg* (adjoin V3033 (value shen.*macroreg*))) (if (= MacroReg NewMacroReg) shen.skip (set *macros* (cons (function V3033) (value *macros*)))))))

(defun shen.packaged? (V3041) (cond ((and (cons? V3041) (and (= package (hd V3041)) (and (cons? (tl V3041)) (cons? (tl (tl V3041)))))) true) (true false)))

(defun external (V3043) (trap-error (get V3043 shen.external-symbols (value *property-vector*)) (lambda E (simple-error (cn "package " (shen.app V3043 " has not been used.
" shen.a))))))

(defun internal (V3045) (trap-error (get V3045 shen.internal-symbols (value *property-vector*)) (lambda E (simple-error (cn "package " (shen.app V3045 " has not been used.
" shen.a))))))

(defun shen.package-contents (V3049) (cond ((and (cons? V3049) (and (= package (hd V3049)) (and (cons? (tl V3049)) (and (= null (hd (tl V3049))) (cons? (tl (tl V3049))))))) (tl (tl (tl V3049)))) ((and (cons? V3049) (and (= package (hd V3049)) (and (cons? (tl V3049)) (cons? (tl (tl V3049)))))) (let PackageNameDot (intern (cn (str (hd (tl V3049))) ".")) (let ExpPackageNameDot (explode PackageNameDot) (shen.packageh (hd (tl V3049)) (hd (tl (tl V3049))) (tl (tl (tl V3049))) ExpPackageNameDot)))) (true (shen.f_error shen.package-contents))))

(defun shen.walk (V3052 V3053) (cond ((cons? V3053) (V3052 (map (lambda Z (shen.walk V3052 Z)) V3053))) (true (V3052 V3053))))

(defun compile (V3057 V3058 V3059) (let O (V3057 (cons V3058 (cons () ()))) (if (or (= (fail) O) (not (empty? (hd O)))) (V3059 O) (shen.hdtl O))))

(defun fail-if (V3062 V3063) (if (V3062 V3063) (fail) V3063))

(defun @s (V3066 V3067) (cn V3066 V3067))

(defun tc? () (value shen.*tc*))

(defun ps (V3069) (trap-error (get V3069 shen.source (value *property-vector*)) (lambda E (simple-error (shen.app V3069 " not found.
" shen.a)))))

(defun stinput () (value *stinput*))

(defun vector (V3071) (let Vector (absvector (+ V3071 1)) (let ZeroStamp (address-> Vector 0 V3071) (let Standard (if (= V3071 0) ZeroStamp (shen.fillvector ZeroStamp 1 V3071 (fail))) Standard))))

(defun shen.fillvector (V3077 V3078 V3079 V3080) (cond ((= V3079 V3078) (address-> V3077 V3079 V3080)) (true (shen.fillvector (address-> V3077 V3078 V3080) (+ 1 V3078) V3079 V3080))))

(defun vector? (V3082) (and (absvector? V3082) (let X (trap-error (<-address V3082 0) (lambda E -1)) (and (number? X) (>= X 0)))))

(defun vector-> (V3086 V3087 V3088) (if (= V3087 0) (simple-error "cannot access 0th element of a vector
") (address-> V3086 V3087 V3088)))

(defun <-vector (V3091 V3092) (if (= V3092 0) (simple-error "cannot access 0th element of a vector
") (let VectorElement (<-address V3091 V3092) (if (= VectorElement (fail)) (simple-error "vector element not found
") VectorElement))))

(defun shen.posint? (V3094) (and (integer? V3094) (>= V3094 0)))

(defun limit (V3096) (<-address V3096 0))

(defun symbol? (V3098) (cond ((or (boolean? V3098) (or (number? V3098) (string? V3098))) false) (true (trap-error (let String (str V3098) (shen.analyse-symbol? String)) (lambda E false)))))

(defun shen.analyse-symbol? (V3100) (cond ((= "" V3100) false) ((shen.+string? V3100) (and (shen.alpha? (pos V3100 0)) (shen.alphanums? (tlstr V3100)))) (true (shen.f_error shen.analyse-symbol?))))

(defun shen.alpha? (V3102) (element? V3102 (cons "A" (cons "B" (cons "C" (cons "D" (cons "E" (cons "F" (cons "G" (cons "H" (cons "I" (cons "J" (cons "K" (cons "L" (cons "M" (cons "N" (cons "O" (cons "P" (cons "Q" (cons "R" (cons "S" (cons "T" (cons "U" (cons "V" (cons "W" (cons "X" (cons "Y" (cons "Z" (cons "a" (cons "b" (cons "c" (cons "d" (cons "e" (cons "f" (cons "g" (cons "h" (cons "i" (cons "j" (cons "k" (cons "l" (cons "m" (cons "n" (cons "o" (cons "p" (cons "q" (cons "r" (cons "s" (cons "t" (cons "u" (cons "v" (cons "w" (cons "x" (cons "y" (cons "z" (cons "=" (cons "*" (cons "/" (cons "+" (cons "-" (cons "_" (cons "?" (cons "$" (cons "!" (cons "@" (cons "~" (cons ">" (cons "<" (cons "&" (cons "%" (cons "{" (cons "}" (cons ":" (cons ";" (cons "`" (cons "#" (cons "'" (cons "." ())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(defun shen.alphanums? (V3104) (cond ((= "" V3104) true) ((shen.+string? V3104) (and (shen.alphanum? (pos V3104 0)) (shen.alphanums? (tlstr V3104)))) (true (shen.f_error shen.alphanums?))))

(defun shen.alphanum? (V3106) (or (shen.alpha? V3106) (shen.digit? V3106)))

(defun shen.digit? (V3108) (element? V3108 (cons "1" (cons "2" (cons "3" (cons "4" (cons "5" (cons "6" (cons "7" (cons "8" (cons "9" (cons "0" ()))))))))))))

(defun variable? (V3110) (cond ((or (boolean? V3110) (or (number? V3110) (string? V3110))) false) (true (trap-error (let String (str V3110) (shen.analyse-variable? String)) (lambda E false)))))

(defun shen.analyse-variable? (V3112) (cond ((shen.+string? V3112) (and (shen.uppercase? (pos V3112 0)) (shen.alphanums? (tlstr V3112)))) (true (shen.f_error shen.analyse-variable?))))

(defun shen.uppercase? (V3114) (element? V3114 (cons "A" (cons "B" (cons "C" (cons "D" (cons "E" (cons "F" (cons "G" (cons "H" (cons "I" (cons "J" (cons "K" (cons "L" (cons "M" (cons "N" (cons "O" (cons "P" (cons "Q" (cons "R" (cons "S" (cons "T" (cons "U" (cons "V" (cons "W" (cons "X" (cons "Y" (cons "Z" ()))))))))))))))))))))))))))))

(defun gensym (V3116) (concat V3116 (set shen.*gensym* (+ 1 (value shen.*gensym*)))))

(defun concat (V3119 V3120) (intern (cn (str V3119) (str V3120))))

(defun @p (V3123 V3124) (let Vector (absvector 3) (let Tag (address-> Vector 0 shen.tuple) (let Fst (address-> Vector 1 V3123) (let Snd (address-> Vector 2 V3124) Vector)))))

(defun fst (V3126) (<-address V3126 1))

(defun snd (V3128) (<-address V3128 2))

(defun tuple? (V3130) (and (absvector? V3130) (= shen.tuple (trap-error (<-address V3130 0) (lambda E shen.not-tuple)))))

(defun append (V3133 V3134) (cond ((= () V3133) V3134) ((cons? V3133) (cons (hd V3133) (append (tl V3133) V3134))) (true (shen.f_error append))))

(defun @v (V3137 V3138) (let Limit (limit V3138) (let NewVector (vector (+ Limit 1)) (let X+NewVector (vector-> NewVector 1 V3137) (if (= Limit 0) X+NewVector (shen.@v-help V3138 1 Limit X+NewVector))))))

(defun shen.@v-help (V3144 V3145 V3146 V3147) (cond ((= V3146 V3145) (shen.copyfromvector V3144 V3147 V3146 (+ V3146 1))) (true (shen.@v-help V3144 (+ V3145 1) V3146 (shen.copyfromvector V3144 V3147 V3145 (+ V3145 1))))))

(defun shen.copyfromvector (V3152 V3153 V3154 V3155) (trap-error (vector-> V3153 V3155 (<-vector V3152 V3154)) (lambda E V3153)))

(defun hdv (V3157) (trap-error (<-vector V3157 1) (lambda E (simple-error (cn "hdv needs a non-empty vector as an argument; not " (shen.app V3157 "
" shen.s))))))

(defun tlv (V3159) (let Limit (limit V3159) (if (= Limit 0) (simple-error "cannot take the tail of the empty vector
") (if (= Limit 1) (vector 0) (let NewVector (vector (- Limit 1)) (shen.tlv-help V3159 2 Limit (vector (- Limit 1))))))))

(defun shen.tlv-help (V3165 V3166 V3167 V3168) (cond ((= V3167 V3166) (shen.copyfromvector V3165 V3168 V3167 (- V3167 1))) (true (shen.tlv-help V3165 (+ V3166 1) V3167 (shen.copyfromvector V3165 V3168 V3166 (- V3166 1))))))

(defun assoc (V3180 V3181) (cond ((= () V3181) ()) ((and (cons? V3181) (and (cons? (hd V3181)) (= (hd (hd V3181)) V3180))) (hd V3181)) ((cons? V3181) (assoc V3180 (tl V3181))) (true (shen.f_error assoc))))

(defun shen.assoc-set (V3188 V3189 V3190) (cond ((= () V3190) (cons (cons V3188 V3189) ())) ((and (cons? V3190) (and (cons? (hd V3190)) (= (hd (hd V3190)) V3188))) (cons (cons (hd (hd V3190)) V3189) (tl V3190))) ((cons? V3190) (cons (hd V3190) (shen.assoc-set V3188 V3189 (tl V3190)))) (true (shen.f_error shen.assoc-set))))

(defun shen.assoc-rm (V3196 V3197) (cond ((= () V3197) ()) ((and (cons? V3197) (and (cons? (hd V3197)) (= (hd (hd V3197)) V3196))) (tl V3197)) ((cons? V3197) (cons (hd V3197) (shen.assoc-rm V3196 (tl V3197)))) (true (shen.f_error shen.assoc-rm))))

(defun boolean? (V3203) (cond ((= true V3203) true) ((= false V3203) true) (true false)))

(defun nl (V3205) (cond ((= 0 V3205) 0) (true (do (shen.prhush "
" (stoutput)) (nl (- V3205 1))))))

(defun difference (V3210 V3211) (cond ((= () V3210) ()) ((cons? V3210) (if (element? (hd V3210) V3211) (difference (tl V3210) V3211) (cons (hd V3210) (difference (tl V3210) V3211)))) (true (shen.f_error difference))))

(defun do (V3214 V3215) V3215)

(defun element? (V3227 V3228) (cond ((= () V3228) false) ((and (cons? V3228) (= (hd V3228) V3227)) true) ((cons? V3228) (element? V3227 (tl V3228))) (true (shen.f_error element?))))

(defun empty? (V3234) (cond ((= () V3234) true) (true false)))

(defun fix (V3237 V3238) (shen.fix-help V3237 V3238 (V3237 V3238)))

(defun shen.fix-help (V3249 V3250 V3251) (cond ((= V3251 V3250) V3251) (true (shen.fix-help V3249 V3251 (V3249 V3251)))))

(defun put (V3256 V3257 V3258 V3259) (let Curr (trap-error (shen.<-dict V3259 V3256) (lambda E ())) (let Added (shen.assoc-set V3257 V3258 Curr) (let Update (shen.dict-> V3259 V3256 Added) V3258))))

(defun unput (V3263 V3264 V3265) (let Curr (trap-error (shen.<-dict V3265 V3263) (lambda E ())) (let Removed (shen.assoc-rm V3264 Curr) (let Update (shen.dict-> V3265 V3263 Removed) V3263))))

(defun get (V3269 V3270 V3271) (let Entry (trap-error (shen.<-dict V3271 V3269) (lambda E ())) (let Result (assoc V3270 Entry) (if (empty? Result) (simple-error "value not found
") (tl Result)))))

(defun hash (V3274 V3275) (shen.mod (sum (map (lambda X (string->n X)) (explode V3274))) V3275))

(defun shen.mod (V3278 V3279) (shen.modh V3278 (shen.multiples V3278 (cons V3279 ()))))

(defun shen.multiples (V3282 V3283) (cond ((and (cons? V3283) (> (hd V3283) V3282)) (tl V3283)) ((cons? V3283) (shen.multiples V3282 (cons (* 2 (hd V3283)) V3283))) (true (shen.f_error shen.multiples))))

(defun shen.modh (V3288 V3289) (cond ((= 0 V3288) 0) ((= () V3289) V3288) ((and (cons? V3289) (> (hd V3289) V3288)) (if (empty? (tl V3289)) V3288 (shen.modh V3288 (tl V3289)))) ((cons? V3289) (shen.modh (- V3288 (hd V3289)) V3289)) (true (shen.f_error shen.modh))))

(defun sum (V3291) (cond ((= () V3291) 0) ((cons? V3291) (+ (hd V3291) (sum (tl V3291)))) (true (shen.f_error sum))))

(defun head (V3299) (cond ((cons? V3299) (hd V3299)) (true (simple-error "head expects a non-empty list"))))

(defun tail (V3307) (cond ((cons? V3307) (tl V3307)) (true (simple-error "tail expects a non-empty list"))))

(defun hdstr (V3309) (pos V3309 0))

(defun intersection (V3314 V3315) (cond ((= () V3314) ()) ((cons? V3314) (if (element? (hd V3314) V3315) (cons (hd V3314) (intersection (tl V3314) V3315)) (intersection (tl V3314) V3315))) (true (shen.f_error intersection))))

(defun reverse (V3317) (shen.reverse_help V3317 ()))

(defun shen.reverse_help (V3320 V3321) (cond ((= () V3320) V3321) ((cons? V3320) (shen.reverse_help (tl V3320) (cons (hd V3320) V3321))) (true (shen.f_error shen.reverse_help))))

(defun union (V3324 V3325) (cond ((= () V3324) V3325) ((cons? V3324) (if (element? (hd V3324) V3325) (union (tl V3324) V3325) (cons (hd V3324) (union (tl V3324) V3325)))) (true (shen.f_error union))))

(defun y-or-n? (V3327) (let Message (shen.prhush (shen.proc-nl V3327) (stoutput)) (let Y-or-N (shen.prhush " (y/n) " (stoutput)) (let Input (shen.app (read (stinput)) "" shen.s) (if (= "y" Input) true (if (= "n" Input) false (do (shen.prhush "please answer y or n
" (stoutput)) (y-or-n? V3327))))))))

(defun not (V3329) (if V3329 false true))

(defun subst (V3342 V3343 V3344) (cond ((= V3344 V3343) V3342) ((cons? V3344) (map (lambda W (subst V3342 V3343 W)) V3344)) (true V3344)))

(defun explode (V3346) (shen.explode-h (shen.app V3346 "" shen.a)))

(defun shen.explode-h (V3348) (cond ((= "" V3348) ()) ((shen.+string? V3348) (cons (pos V3348 0) (shen.explode-h (tlstr V3348)))) (true (shen.f_error shen.explode-h))))

(defun cd (V3350) (set *home-directory* (if (= V3350 "") "" (shen.app V3350 "/" shen.a))))

(defun shen.for-each (V3353 V3354) (cond ((= () V3354) true) ((cons? V3354) (let _ (V3353 (hd V3354)) (shen.for-each V3353 (tl V3354)))) (true (shen.f_error shen.for-each))))

(defun map (V3359 V3360) (cond ((= () V3360) ()) ((cons? V3360) (cons (V3359 (hd V3360)) (map V3359 (tl V3360)))) (true (V3359 V3360))))

(defun length (V3362) (shen.length-h V3362 0))

(defun shen.length-h (V3365 V3366) (cond ((= () V3365) V3366) (true (shen.length-h (tl V3365) (+ V3366 1)))))

(defun occurrences (V3378 V3379) (cond ((= V3379 V3378) 1) ((cons? V3379) (+ (occurrences V3378 (hd V3379)) (occurrences V3378 (tl V3379)))) (true 0)))

(defun nth (V3386 V3387) (cond ((and (= 1 V3386) (cons? V3387)) (hd V3387)) ((cons? V3387) (nth (- V3386 1) (tl V3387))) (true (simple-error (cn "nth applied to " (shen.app V3386 (cn ", " (shen.app V3387 "
" shen.a)) shen.a))))))

(defun integer? (V3389) (and (number? V3389) (let Abs (shen.abs V3389) (shen.integer-test? Abs (shen.magless Abs 1)))))

(defun shen.abs (V3391) (if (> V3391 0) V3391 (- 0 V3391)))

(defun shen.magless (V3394 V3395) (let Nx2 (* V3395 2) (if (> Nx2 V3394) V3395 (shen.magless V3394 Nx2))))

(defun shen.integer-test? (V3401 V3402) (cond ((= 0 V3401) true) ((> 1 V3401) false) (true (let Abs-N (- V3401 V3402) (if (> 0 Abs-N) (integer? V3401) (shen.integer-test? Abs-N V3402))))))

(defun mapcan (V3407 V3408) (cond ((= () V3408) ()) ((cons? V3408) (append (V3407 (hd V3408)) (mapcan V3407 (tl V3408)))) (true (shen.f_error mapcan))))

(defun == (V3420 V3421) (cond ((= V3421 V3420) true) (true false)))

(defun abort () (simple-error ""))

(defun bound? (V3423) (and (symbol? V3423) (let Val (trap-error (value V3423) (lambda E shen.this-symbol-is-unbound)) (if (= Val shen.this-symbol-is-unbound) false true))))

(defun shen.string->bytes (V3425) (cond ((= "" V3425) ()) (true (cons (string->n (pos V3425 0)) (shen.string->bytes (tlstr V3425))))))

(defun maxinferences (V3427) (set shen.*maxinferences* V3427))

(defun inferences () (value shen.*infs*))

(defun protect (V3429) V3429)

(defun stoutput () (value *stoutput*))

(defun sterror () (value *sterror*))

(defun string->symbol (V3431) (let Symbol (intern V3431) (if (symbol? Symbol) Symbol (simple-error (cn "cannot intern " (shen.app V3431 " to a symbol" shen.s))))))

(defun optimise (V3437) (cond ((= + V3437) (set shen.*optimise* true)) ((= - V3437) (set shen.*optimise* false)) (true (simple-error "optimise expects a + or a -.
"))))

(defun os () (value *os*))

(defun language () (value *language*))

(defun version () (value *version*))

(defun port () (value *port*))

(defun porters () (value *porters*))

(defun implementation () (value *implementation*))

(defun release () (value *release*))

(defun package? (V3439) (trap-error (do (external V3439) true) (lambda E false)))

(defun function (V3441) (shen.lookup-func V3441))

(defun shen.lookup-func (V3443) (trap-error (get V3443 shen.lambda-form (value *property-vector*)) (lambda E (simple-error (shen.app V3443 " has no lambda expansion
" shen.a)))))



