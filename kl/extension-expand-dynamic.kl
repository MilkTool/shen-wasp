"Copyright (c) 2019 Bruno Deferrari.
BSD 3-Clause License: http://opensource.org/licenses/BSD-3-Clause"

(defun shen.x.expand-dynamic.initialise () (do (set shen.x.expand-dynamic.*external-symbols* ()) (set shen.x.expand-dynamic.*arities* ())))

(defun shen.x.expand-dynamic.expand-dynamic (V6035) (cond ((= () V6035) ()) ((and (cons? V6035) (and (cons? (hd V6035)) (and (= declare (hd (hd V6035))) (and (cons? (tl (hd V6035))) (and (cons? (tl (tl (hd V6035)))) (= () (tl (tl (tl (hd V6035)))))))))) (append (shen.x.expand-dynamic.expand-declare (hd V6035)) (shen.x.expand-dynamic.expand-dynamic (tl V6035)))) ((and (cons? V6035) (and (cons? (hd V6035)) (and (= put (hd (hd V6035))) (and (cons? (tl (hd V6035))) (and (cons? (hd (tl (hd V6035)))) (and (= intern (hd (hd (tl (hd V6035))))) (and (cons? (tl (hd (tl (hd V6035))))) (and (= "shen" (hd (tl (hd (tl (hd V6035)))))) (and (= () (tl (tl (hd (tl (hd V6035)))))) (and (cons? (tl (tl (hd V6035)))) (and (= shen.external-symbols (hd (tl (tl (hd V6035))))) (and (cons? (tl (tl (tl (hd V6035))))) (and (cons? (tl (tl (tl (tl (hd V6035)))))) (= () (tl (tl (tl (tl (tl (hd V6035)))))))))))))))))))) (do (set shen.x.expand-dynamic.*external-symbols* (eval-kl (hd (tl (tl (tl (hd V6035))))))) (cons (hd V6035) (shen.x.expand-dynamic.expand-dynamic (tl V6035))))) ((and (cons? V6035) (and (cons? (hd V6035)) (and (= shen.initialise_arity_table (hd (hd V6035))) (and (cons? (tl (hd V6035))) (= () (tl (tl (hd V6035)))))))) (do (set shen.x.expand-dynamic.*arities* (eval-kl (hd (tl (hd V6035))))) (cons (hd V6035) (shen.x.expand-dynamic.expand-dynamic (tl V6035))))) ((and (cons? V6035) (and (cons? (hd V6035)) (and (= shen.for-each (hd (hd V6035))) (and (cons? (tl (hd V6035))) (and (cons? (hd (tl (hd V6035)))) (and (= lambda (hd (hd (tl (hd V6035))))) (and (cons? (tl (hd (tl (hd V6035))))) (and (cons? (tl (tl (hd (tl (hd V6035)))))) (and (cons? (hd (tl (tl (hd (tl (hd V6035))))))) (and (= shen.set-lambda-form-entry (hd (hd (tl (tl (hd (tl (hd V6035)))))))) (and (cons? (tl (hd (tl (tl (hd (tl (hd V6035)))))))) (and (= () (tl (tl (hd (tl (tl (hd (tl (hd V6035))))))))) (and (= () (tl (tl (tl (hd (tl (hd V6035))))))) (and (cons? (tl (tl (hd V6035)))) (and (= () (tl (tl (tl (hd V6035))))) (= (hd (tl (hd (tl (tl (hd (tl (hd V6035)))))))) (hd (tl (hd (tl (hd V6035))))))))))))))))))))) (append (shen.x.expand-dynamic.expand-lambda-entries (hd (tl (tl (hd V6035))))) (shen.x.expand-dynamic.expand-dynamic (tl V6035)))) ((cons? V6035) (cons (hd V6035) (shen.x.expand-dynamic.expand-dynamic (tl V6035)))) (true (shen.f_error shen.x.expand-dynamic.expand-dynamic))))

(defun shen.x.expand-dynamic.expand-declare (V6037) (cond ((and (cons? V6037) (and (= declare (hd V6037)) (and (cons? (tl V6037)) (and (cons? (tl (tl V6037))) (= () (tl (tl (tl V6037)))))))) (let Eval (eval-kl V6037) (let F* (concat shen.type-signature-of- (hd (tl V6037))) (let KlDef (ps F*) (let RecordSig (cons set (cons shen.*signedfuncs* (cons (cons cons (cons (cons cons (tl V6037)) (cons (cons value (cons shen.*signedfuncs* ())) ()))) ()))) (let RecordLambda (cons shen.set-lambda-form-entry (cons (cons cons (cons F* (cons (shen.lambda-form F* 3) ()))) ())) (cons KlDef (cons RecordSig (cons RecordLambda ()))))))))) (true (shen.f_error shen.x.expand-dynamic.expand-declare))))

(defun shen.x.expand-dynamic.expand-lambda-entries (V6040) (cond ((= () V6040) ()) ((and (cons? V6040) (and (= mapcan (hd V6040)) (and (cons? (tl V6040)) (and (cons? (hd (tl V6040))) (and (= lambda (hd (hd (tl V6040)))) (and (cons? (tl (hd (tl V6040)))) (and (cons? (tl (tl (hd (tl V6040))))) (and (cons? (hd (tl (tl (hd (tl V6040)))))) (and (= shen.lambda-form-entry (hd (hd (tl (tl (hd (tl V6040))))))) (and (cons? (tl (hd (tl (tl (hd (tl V6040))))))) (and (= () (tl (tl (hd (tl (tl (hd (tl V6040)))))))) (and (= () (tl (tl (tl (hd (tl V6040)))))) (and (cons? (tl (tl V6040))) (and (cons? (hd (tl (tl V6040)))) (and (= external (hd (hd (tl (tl V6040))))) (and (cons? (tl (hd (tl (tl V6040))))) (and (cons? (hd (tl (hd (tl (tl V6040)))))) (and (= intern (hd (hd (tl (hd (tl (tl V6040))))))) (and (cons? (tl (hd (tl (hd (tl (tl V6040))))))) (and (= "shen" (hd (tl (hd (tl (hd (tl (tl V6040)))))))) (and (= () (tl (tl (hd (tl (hd (tl (tl V6040)))))))) (and (= () (tl (tl (hd (tl (tl V6040)))))) (and (= () (tl (tl (tl V6040)))) (= (hd (tl (hd (tl (tl (hd (tl V6040))))))) (hd (tl (hd (tl V6040)))))))))))))))))))))))))))) (mapcan (lambda F (shen.x.expand-dynamic.expand-lambda-form-entry F)) (value shen.x.expand-dynamic.*external-symbols*))) ((and (cons? V6040) (and (= cons (hd V6040)) (and (cons? (tl V6040)) (and (cons? (hd (tl V6040))) (and (= cons (hd (hd (tl V6040)))) (and (cons? (tl (hd (tl V6040)))) (and (cons? (tl (tl (hd (tl V6040))))) (and (= () (tl (tl (tl (hd (tl V6040)))))) (and (cons? (tl (tl V6040))) (= () (tl (tl (tl V6040))))))))))))) (cons (cons shen.set-lambda-form-entry (cons (hd (tl V6040)) ())) (shen.x.expand-dynamic.expand-lambda-entries (hd (tl (tl V6040)))))) (true (shen.f_error shen.x.expand-dynamic.expand-lambda-entries))))

(defun shen.x.expand-dynamic.get-arity (V6052 V6053) (cond ((= () V6053) -1) ((and (cons? V6053) (and (cons? (tl V6053)) (= (hd V6053) V6052))) (hd (tl V6053))) ((and (cons? V6053) (cons? (tl V6053))) (shen.x.expand-dynamic.get-arity V6052 (tl (tl V6053)))) (true (shen.f_error shen.x.expand-dynamic.get-arity))))

(defun shen.x.expand-dynamic.expand-lambda-form-entry (V6055) (cond ((= package V6055) ()) ((= receive V6055) ()) (true (let ArityF (shen.x.expand-dynamic.get-arity V6055 (value shen.x.expand-dynamic.*arities*)) (if (= ArityF -1) () (if (= ArityF 0) () (cons (cons shen.set-lambda-form-entry (cons (cons cons (cons V6055 (cons (shen.lambda-form V6055 ArityF) ()))) ())) ())))))))

(defun shen.x.expand-dynamic.split-defuns-h (V6058 V6059) (cond ((and (cons? V6058) (and (cons? (hd V6058)) (and (= defun (hd (hd V6058))) (tuple? V6059)))) (shen.x.expand-dynamic.split-defuns-h (tl V6058) (@p (cons (hd V6058) (fst V6059)) (snd V6059)))) ((and (cons? V6058) (tuple? V6059)) (shen.x.expand-dynamic.split-defuns-h (tl V6058) (@p (fst V6059) (cons (hd V6058) (snd V6059))))) ((and (= () V6058) (tuple? V6059)) (@p (reverse (fst V6059)) (reverse (snd V6059)))) (true (shen.f_error shen.x.expand-dynamic.split-defuns-h))))

(defun shen.x.expand-dynamic.split-defuns (V6061) (shen.x.expand-dynamic.split-defuns-h V6061 (@p () ())))

(defun shen.x.expand-dynamic.wrap-in-defun (V6065 V6066 V6067) (cons defun (cons V6065 (cons V6066 (cons (shen.x.expand-dynamic.to-single-expression V6067) ())))))

(defun shen.x.expand-dynamic.to-single-expression (V6069) (cond ((and (cons? V6069) (= () (tl V6069))) (hd V6069)) ((cons? V6069) (cons do (cons (hd V6069) (cons (shen.x.expand-dynamic.to-single-expression (tl V6069)) ())))) (true (shen.f_error shen.x.expand-dynamic.to-single-expression))))



