"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun shen.initialise () (do (set shen.*installing-kl* false) (do (set shen.*history* ()) (do (set shen.*tc* false) (do (set *property-vector* (shen.dict 20000)) (do (set shen.*process-counter* 0) (do (set shen.*varcounter* (vector 10000)) (do (set shen.*prologvectors* (vector 10000)) (do (set shen.*demodulation-function* (lambda X X)) (do (set shen.*macroreg* (cons shen.timer-macro (cons shen.cases-macro (cons shen.abs-macro (cons shen.put/get-macro (cons shen.compile-macro (cons shen.datatype-macro (cons shen.let-macro (cons shen.assoc-macro (cons shen.make-string-macro (cons shen.output-macro (cons shen.input-macro (cons shen.error-macro (cons shen.prolog-macro (cons shen.synonyms-macro (cons shen.nl-macro (cons shen.@s-macro (cons shen.defprolog-macro (cons shen.function-macro ()))))))))))))))))))) (do (set *macros* (cons (lambda X (shen.timer-macro X)) (cons (lambda X (shen.cases-macro X)) (cons (lambda X (shen.abs-macro X)) (cons (lambda X (shen.put/get-macro X)) (cons (lambda X (shen.compile-macro X)) (cons (lambda X (shen.datatype-macro X)) (cons (lambda X (shen.let-macro X)) (cons (lambda X (shen.assoc-macro X)) (cons (lambda X (shen.make-string-macro X)) (cons (lambda X (shen.output-macro X)) (cons (lambda X (shen.input-macro X)) (cons (lambda X (shen.error-macro X)) (cons (lambda X (shen.prolog-macro X)) (cons (lambda X (shen.synonyms-macro X)) (cons (lambda X (shen.nl-macro X)) (cons (lambda X (shen.@s-macro X)) (cons (lambda X (shen.defprolog-macro X)) (cons (lambda X (shen.function-macro X)) ()))))))))))))))))))) (do (set shen.*gensym* 0) (do (set shen.*tracking* ()) (do (set shen.*alphabet* (cons A (cons B (cons C (cons D (cons E (cons F (cons G (cons H (cons I (cons J (cons K (cons L (cons M (cons N (cons O (cons P (cons Q (cons R (cons S (cons T (cons U (cons V (cons W (cons X (cons Y (cons Z ()))))))))))))))))))))))))))) (do (set shen.*special* (cons @p (cons @s (cons @v (cons cons (cons lambda (cons let (cons where (cons set (cons open ())))))))))) (do (set shen.*extraspecial* (cons define (cons shen.process-datatype (cons input+ (cons defcc (cons shen.read+ (cons defmacro ()))))))) (do (set shen.*spy* false) (do (set shen.*datatypes* ()) (do (set shen.*alldatatypes* ()) (do (set shen.*shen-type-theory-enabled?* true) (do (set shen.*synonyms* ()) (do (set shen.*system* ()) (do (set shen.*signedfuncs* ()) (do (set shen.*maxcomplexity* 128) (do (set shen.*occurs* true) (do (set shen.*maxinferences* 1000000) (do (set *maximum-print-sequence-size* 20) (do (set shen.*catch* 0) (do (set shen.*call* 0) (do (set shen.*infs* 0) (do (set *hush* false) (do (set shen.*optimise* false) (do (set *version* "Shen 22.0") (do (if (not (bound? *home-directory*)) (set *home-directory* "") shen.skip) (do (if (not (bound? *sterror*)) (set *sterror* (value *stoutput*)) shen.skip) (do (shen.initialise_arity_table (cons abort (cons 0 (cons absvector? (cons 1 (cons absvector (cons 1 (cons adjoin (cons 2 (cons and (cons 2 (cons append (cons 2 (cons arity (cons 1 (cons assoc (cons 2 (cons boolean? (cons 1 (cons bound? (cons 1 (cons cd (cons 1 (cons close (cons 1 (cons compile (cons 3 (cons concat (cons 2 (cons cons (cons 2 (cons cons? (cons 1 (cons cn (cons 2 (cons declare (cons 2 (cons destroy (cons 1 (cons difference (cons 2 (cons do (cons 2 (cons element? (cons 2 (cons empty? (cons 1 (cons enable-type-theory (cons 1 (cons error-to-string (cons 1 (cons shen.interror (cons 2 (cons eval (cons 1 (cons eval-kl (cons 1 (cons explode (cons 1 (cons external (cons 1 (cons fail-if (cons 2 (cons fail (cons 0 (cons fix (cons 2 (cons findall (cons 5 (cons freeze (cons 1 (cons fst (cons 1 (cons gensym (cons 1 (cons get (cons 3 (cons get-time (cons 1 (cons address-> (cons 3 (cons <-address (cons 2 (cons <-vector (cons 2 (cons > (cons 2 (cons >= (cons 2 (cons = (cons 2 (cons hash (cons 2 (cons hd (cons 1 (cons hdv (cons 1 (cons hdstr (cons 1 (cons head (cons 1 (cons if (cons 3 (cons integer? (cons 1 (cons intern (cons 1 (cons identical (cons 4 (cons inferences (cons 0 (cons input (cons 1 (cons input+ (cons 2 (cons implementation (cons 0 (cons intersection (cons 2 (cons internal (cons 1 (cons it (cons 0 (cons kill (cons 0 (cons language (cons 0 (cons length (cons 1 (cons limit (cons 1 (cons lineread (cons 1 (cons load (cons 1 (cons < (cons 2 (cons <= (cons 2 (cons vector (cons 1 (cons macroexpand (cons 1 (cons map (cons 2 (cons mapcan (cons 2 (cons maxinferences (cons 1 (cons nl (cons 1 (cons not (cons 1 (cons nth (cons 2 (cons n->string (cons 1 (cons number? (cons 1 (cons occurs-check (cons 1 (cons occurrences (cons 2 (cons occurs-check (cons 1 (cons open (cons 2 (cons optimise (cons 1 (cons or (cons 2 (cons os (cons 0 (cons package (cons 3 (cons package? (cons 1 (cons port (cons 0 (cons porters (cons 0 (cons pos (cons 2 (cons print (cons 1 (cons profile (cons 1 (cons profile-results (cons 1 (cons pr (cons 2 (cons ps (cons 1 (cons preclude (cons 1 (cons preclude-all-but (cons 1 (cons protect (cons 1 (cons address-> (cons 3 (cons put (cons 4 (cons shen.reassemble (cons 2 (cons read-file-as-string (cons 1 (cons read-file (cons 1 (cons read-file-as-bytelist (cons 1 (cons read (cons 1 (cons read-byte (cons 1 (cons read-from-string (cons 1 (cons receive (cons 1 (cons release (cons 0 (cons remove (cons 2 (cons shen.require (cons 3 (cons reverse (cons 1 (cons set (cons 2 (cons simple-error (cons 1 (cons snd (cons 1 (cons specialise (cons 1 (cons spy (cons 1 (cons step (cons 1 (cons stinput (cons 0 (cons stoutput (cons 0 (cons sterror (cons 0 (cons string->n (cons 1 (cons string->symbol (cons 1 (cons string? (cons 1 (cons str (cons 1 (cons subst (cons 3 (cons sum (cons 1 (cons symbol? (cons 1 (cons systemf (cons 1 (cons tail (cons 1 (cons tl (cons 1 (cons tc (cons 1 (cons tc? (cons 0 (cons thaw (cons 1 (cons tlstr (cons 1 (cons track (cons 1 (cons trap-error (cons 2 (cons tuple? (cons 1 (cons type (cons 2 (cons return (cons 3 (cons undefmacro (cons 1 (cons unput (cons 3 (cons unprofile (cons 1 (cons unify (cons 4 (cons unify! (cons 4 (cons union (cons 2 (cons untrack (cons 1 (cons unspecialise (cons 1 (cons undefmacro (cons 1 (cons vector (cons 1 (cons vector? (cons 1 (cons vector-> (cons 3 (cons value (cons 1 (cons variable? (cons 1 (cons version (cons 0 (cons write-byte (cons 2 (cons write-to-file (cons 2 (cons y-or-n? (cons 1 (cons + (cons 2 (cons * (cons 2 (cons / (cons 2 (cons - (cons 2 (cons == (cons 2 (cons <e> (cons 1 (cons <!> (cons 1 (cons @p (cons 2 (cons @v (cons 2 (cons @s (cons 2 (cons preclude (cons 1 (cons include (cons 1 (cons preclude-all-but (cons 1 (cons include-all-but (cons 1 ()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (do (put (intern "shen") shen.external-symbols (cons ! (cons } (cons { (cons --> (cons <-- (cons && (cons : (cons ; (cons :- (cons := (cons _ (cons , (cons *language* (cons *implementation* (cons *stinput* (cons *stoutput* (cons *sterror* (cons *home-directory* (cons *version* (cons *maximum-print-sequence-size* (cons *macros* (cons *os* (cons *release* (cons *property-vector* (cons *port* (cons *porters* (cons *hush* (cons @v (cons @p (cons @s (cons <- (cons -> (cons <e> (cons <!> (cons == (cons = (cons >= (cons > (cons /. (cons =! (cons $ (cons - (cons / (cons * (cons + (cons <= (cons < (cons >> (cons y-or-n? (cons write-to-file (cons write-byte (cons where (cons when (cons warn (cons version (cons verified (cons variable? (cons value (cons vector-> (cons <-vector (cons vector (cons vector? (cons unspecialise (cons untrack (cons unit (cons shen.unix (cons union (cons unify (cons unify! (cons unput (cons unprofile (cons undefmacro (cons return (cons type (cons tuple? (cons true (cons trap-error (cons track (cons time (cons thaw (cons tc? (cons tc (cons tl (cons tlstr (cons tlv (cons tail (cons systemf (cons synonyms (cons symbol (cons symbol? (cons string->symbol (cons sum (cons subst (cons string? (cons string->n (cons stream (cons string (cons stinput (cons sterror (cons stoutput (cons step (cons spy (cons specialise (cons snd (cons simple-error (cons set (cons save (cons str (cons run (cons reverse (cons remove (cons release (cons read (cons receive (cons read-file (cons read-file-as-bytelist (cons read-file-as-string (cons read-byte (cons read-from-string (cons package? (cons put (cons preclude (cons preclude-all-but (cons ps (cons prolog? (cons protect (cons profile-results (cons profile (cons print (cons pr (cons pos (cons porters (cons port (cons package (cons output (cons out (cons os (cons or (cons optimise (cons open (cons occurrences (cons occurs-check (cons n->string (cons number? (cons number (cons null (cons nth (cons not (cons nl (cons mode (cons macroexpand (cons maxinferences (cons mapcan (cons map (cons make-string (cons load (cons loaded (cons list (cons lineread (cons limit (cons length (cons let (cons lazy (cons lambda (cons language (cons kill (cons is (cons intersection (cons inferences (cons intern (cons integer? (cons input (cons input+ (cons include (cons include-all-but (cons it (cons in (cons internal (cons implementation (cons if (cons identical (cons head (cons hd (cons hdv (cons hdstr (cons hash (cons get (cons get-time (cons gensym (cons function (cons fst (cons freeze (cons fix (cons file (cons fail (cons fail-if (cons fwhen (cons findall (cons false (cons enable-type-theory (cons explode (cons external (cons exception (cons eval-kl (cons eval (cons error-to-string (cons error (cons empty? (cons element? (cons do (cons difference (cons destroy (cons defun (cons define (cons defmacro (cons defcc (cons defprolog (cons declare (cons datatype (cons cut (cons cn (cons cons? (cons cons (cons cond (cons concat (cons compile (cons cd (cons cases (cons call (cons close (cons bind (cons bound? (cons boolean? (cons boolean (cons bar! (cons assoc (cons arity (cons abort (cons append (cons and (cons adjoin (cons <-address (cons address-> (cons absvector? (cons absvector ()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (value *property-vector*)) (do (shen.set-lambda-form-entry (cons shen.datatype-error (lambda X (shen.datatype-error X)))) (do (shen.set-lambda-form-entry (cons shen.tuple (lambda X (shen.tuple X)))) (do (shen.set-lambda-form-entry (cons shen.pvar (lambda X (shen.pvar X)))) (do (shen.set-lambda-form-entry (cons shen.dictionary (lambda X (shen.dictionary X)))) (do (shen.set-lambda-form-entry (cons @v (lambda V1579 (lambda V1580 (@v V1579 V1580))))) (do (shen.set-lambda-form-entry (cons @p (lambda V1581 (lambda V1582 (@p V1581 V1582))))) (do (shen.set-lambda-form-entry (cons @s (lambda V1583 (lambda V1584 (@s V1583 V1584))))) (do (shen.set-lambda-form-entry (cons <e> (lambda V1585 (<e> V1585)))) (do (shen.set-lambda-form-entry (cons <!> (lambda V1586 (<!> V1586)))) (do (shen.set-lambda-form-entry (cons == (lambda V1587 (lambda V1588 (== V1587 V1588))))) (do (shen.set-lambda-form-entry (cons = (lambda V1589 (lambda V1590 (= V1589 V1590))))) (do (shen.set-lambda-form-entry (cons >= (lambda V1591 (lambda V1592 (>= V1591 V1592))))) (do (shen.set-lambda-form-entry (cons > (lambda V1593 (lambda V1594 (> V1593 V1594))))) (do (shen.set-lambda-form-entry (cons - (lambda V1595 (lambda V1596 (- V1595 V1596))))) (do (shen.set-lambda-form-entry (cons / (lambda V1597 (lambda V1598 (/ V1597 V1598))))) (do (shen.set-lambda-form-entry (cons * (lambda V1599 (lambda V1600 (* V1599 V1600))))) (do (shen.set-lambda-form-entry (cons + (lambda V1601 (lambda V1602 (+ V1601 V1602))))) (do (shen.set-lambda-form-entry (cons <= (lambda V1603 (lambda V1604 (<= V1603 V1604))))) (do (shen.set-lambda-form-entry (cons < (lambda V1605 (lambda V1606 (< V1605 V1606))))) (do (shen.set-lambda-form-entry (cons y-or-n? (lambda V1607 (y-or-n? V1607)))) (do (shen.set-lambda-form-entry (cons write-to-file (lambda V1608 (lambda V1609 (write-to-file V1608 V1609))))) (do (shen.set-lambda-form-entry (cons write-byte (lambda V1610 (lambda V1611 (write-byte V1610 V1611))))) (do (shen.set-lambda-form-entry (cons variable? (lambda V1612 (variable? V1612)))) (do (shen.set-lambda-form-entry (cons value (lambda V1613 (value V1613)))) (do (shen.set-lambda-form-entry (cons vector-> (lambda V1614 (lambda V1615 (lambda V1616 (vector-> V1614 V1615 V1616)))))) (do (shen.set-lambda-form-entry (cons <-vector (lambda V1617 (lambda V1618 (<-vector V1617 V1618))))) (do (shen.set-lambda-form-entry (cons vector (lambda V1619 (vector V1619)))) (do (shen.set-lambda-form-entry (cons vector? (lambda V1620 (vector? V1620)))) (do (shen.set-lambda-form-entry (cons unspecialise (lambda V1621 (unspecialise V1621)))) (do (shen.set-lambda-form-entry (cons untrack (lambda V1622 (untrack V1622)))) (do (shen.set-lambda-form-entry (cons union (lambda V1623 (lambda V1624 (union V1623 V1624))))) (do (shen.set-lambda-form-entry (cons unify (lambda V1625 (lambda V1626 (lambda V1627 (lambda V1628 (unify V1625 V1626 V1627 V1628))))))) (do (shen.set-lambda-form-entry (cons unify! (lambda V1629 (lambda V1630 (lambda V1631 (lambda V1632 (unify! V1629 V1630 V1631 V1632))))))) (do (shen.set-lambda-form-entry (cons unput (lambda V1633 (lambda V1634 (lambda V1635 (unput V1633 V1634 V1635)))))) (do (shen.set-lambda-form-entry (cons unprofile (lambda V1636 (unprofile V1636)))) (do (shen.set-lambda-form-entry (cons undefmacro (lambda V1637 (undefmacro V1637)))) (do (shen.set-lambda-form-entry (cons return (lambda V1638 (lambda V1639 (lambda V1640 (return V1638 V1639 V1640)))))) (do (shen.set-lambda-form-entry (cons type (lambda V1641 (lambda V1642 (type V1641 V1642))))) (do (shen.set-lambda-form-entry (cons tuple? (lambda V1643 (tuple? V1643)))) (do (shen.set-lambda-form-entry (cons trap-error (lambda V1644 (lambda V1645 (trap-error V1644 V1645))))) (do (shen.set-lambda-form-entry (cons track (lambda V1646 (track V1646)))) (do (shen.set-lambda-form-entry (cons thaw (lambda V1647 (thaw V1647)))) (do (shen.set-lambda-form-entry (cons tc (lambda V1648 (tc V1648)))) (do (shen.set-lambda-form-entry (cons tl (lambda V1649 (tl V1649)))) (do (shen.set-lambda-form-entry (cons tlstr (lambda V1650 (tlstr V1650)))) (do (shen.set-lambda-form-entry (cons tail (lambda V1651 (tail V1651)))) (do (shen.set-lambda-form-entry (cons systemf (lambda V1652 (systemf V1652)))) (do (shen.set-lambda-form-entry (cons symbol? (lambda V1653 (symbol? V1653)))) (do (shen.set-lambda-form-entry (cons string->symbol (lambda V1654 (string->symbol V1654)))) (do (shen.set-lambda-form-entry (cons sum (lambda V1655 (sum V1655)))) (do (shen.set-lambda-form-entry (cons subst (lambda V1656 (lambda V1657 (lambda V1658 (subst V1656 V1657 V1658)))))) (do (shen.set-lambda-form-entry (cons string? (lambda V1659 (string? V1659)))) (do (shen.set-lambda-form-entry (cons string->n (lambda V1660 (string->n V1660)))) (do (shen.set-lambda-form-entry (cons step (lambda V1661 (step V1661)))) (do (shen.set-lambda-form-entry (cons spy (lambda V1662 (spy V1662)))) (do (shen.set-lambda-form-entry (cons specialise (lambda V1663 (specialise V1663)))) (do (shen.set-lambda-form-entry (cons snd (lambda V1664 (snd V1664)))) (do (shen.set-lambda-form-entry (cons simple-error (lambda V1665 (simple-error V1665)))) (do (shen.set-lambda-form-entry (cons set (lambda V1666 (lambda V1667 (set V1666 V1667))))) (do (shen.set-lambda-form-entry (cons str (lambda V1668 (str V1668)))) (do (shen.set-lambda-form-entry (cons reverse (lambda V1669 (reverse V1669)))) (do (shen.set-lambda-form-entry (cons remove (lambda V1670 (lambda V1671 (remove V1670 V1671))))) (do (shen.set-lambda-form-entry (cons read (lambda V1672 (read V1672)))) (do (shen.set-lambda-form-entry (cons read-file (lambda V1673 (read-file V1673)))) (do (shen.set-lambda-form-entry (cons read-file-as-bytelist (lambda V1674 (read-file-as-bytelist V1674)))) (do (shen.set-lambda-form-entry (cons read-file-as-string (lambda V1675 (read-file-as-string V1675)))) (do (shen.set-lambda-form-entry (cons read-byte (lambda V1676 (read-byte V1676)))) (do (shen.set-lambda-form-entry (cons read-from-string (lambda V1677 (read-from-string V1677)))) (do (shen.set-lambda-form-entry (cons package? (lambda V1678 (package? V1678)))) (do (shen.set-lambda-form-entry (cons put (lambda V1679 (lambda V1680 (lambda V1681 (lambda V1682 (put V1679 V1680 V1681 V1682))))))) (do (shen.set-lambda-form-entry (cons preclude (lambda V1683 (preclude V1683)))) (do (shen.set-lambda-form-entry (cons preclude-all-but (lambda V1684 (preclude-all-but V1684)))) (do (shen.set-lambda-form-entry (cons ps (lambda V1685 (ps V1685)))) (do (shen.set-lambda-form-entry (cons protect (lambda V1686 (protect V1686)))) (do (shen.set-lambda-form-entry (cons profile-results (lambda V1687 (profile-results V1687)))) (do (shen.set-lambda-form-entry (cons profile (lambda V1688 (profile V1688)))) (do (shen.set-lambda-form-entry (cons print (lambda V1689 (print V1689)))) (do (shen.set-lambda-form-entry (cons pr (lambda V1690 (lambda V1691 (pr V1690 V1691))))) (do (shen.set-lambda-form-entry (cons pos (lambda V1692 (lambda V1693 (pos V1692 V1693))))) (do (shen.set-lambda-form-entry (cons or (lambda V1694 (lambda V1695 (or V1694 V1695))))) (do (shen.set-lambda-form-entry (cons optimise (lambda V1696 (optimise V1696)))) (do (shen.set-lambda-form-entry (cons open (lambda V1697 (lambda V1698 (open V1697 V1698))))) (do (shen.set-lambda-form-entry (cons occurrences (lambda V1699 (lambda V1700 (occurrences V1699 V1700))))) (do (shen.set-lambda-form-entry (cons occurs-check (lambda V1701 (occurs-check V1701)))) (do (shen.set-lambda-form-entry (cons n->string (lambda V1702 (n->string V1702)))) (do (shen.set-lambda-form-entry (cons number? (lambda V1703 (number? V1703)))) (do (shen.set-lambda-form-entry (cons nth (lambda V1704 (lambda V1705 (nth V1704 V1705))))) (do (shen.set-lambda-form-entry (cons not (lambda V1706 (not V1706)))) (do (shen.set-lambda-form-entry (cons nl (lambda V1707 (nl V1707)))) (do (shen.set-lambda-form-entry (cons macroexpand (lambda V1708 (macroexpand V1708)))) (do (shen.set-lambda-form-entry (cons maxinferences (lambda V1709 (maxinferences V1709)))) (do (shen.set-lambda-form-entry (cons mapcan (lambda V1710 (lambda V1711 (mapcan V1710 V1711))))) (do (shen.set-lambda-form-entry (cons map (lambda V1712 (lambda V1713 (map V1712 V1713))))) (do (shen.set-lambda-form-entry (cons load (lambda V1714 (load V1714)))) (do (shen.set-lambda-form-entry (cons lineread (lambda V1715 (lineread V1715)))) (do (shen.set-lambda-form-entry (cons limit (lambda V1716 (limit V1716)))) (do (shen.set-lambda-form-entry (cons length (lambda V1717 (length V1717)))) (do (shen.set-lambda-form-entry (cons intersection (lambda V1718 (lambda V1719 (intersection V1718 V1719))))) (do (shen.set-lambda-form-entry (cons intern (lambda V1720 (intern V1720)))) (do (shen.set-lambda-form-entry (cons integer? (lambda V1721 (integer? V1721)))) (do (shen.set-lambda-form-entry (cons input (lambda V1722 (input V1722)))) (do (shen.set-lambda-form-entry (cons input+ (lambda V1723 (lambda V1724 (input+ V1723 V1724))))) (do (shen.set-lambda-form-entry (cons include (lambda V1725 (include V1725)))) (do (shen.set-lambda-form-entry (cons include-all-but (lambda V1726 (include-all-but V1726)))) (do (shen.set-lambda-form-entry (cons internal (lambda V1727 (internal V1727)))) (do (shen.set-lambda-form-entry (cons if (lambda V1728 (lambda V1729 (lambda V1730 (if V1728 V1729 V1730)))))) (do (shen.set-lambda-form-entry (cons identical (lambda V1731 (lambda V1732 (lambda V1733 (lambda V1734 (identical V1731 V1732 V1733 V1734))))))) (do (shen.set-lambda-form-entry (cons head (lambda V1735 (head V1735)))) (do (shen.set-lambda-form-entry (cons hd (lambda V1736 (hd V1736)))) (do (shen.set-lambda-form-entry (cons hdv (lambda V1737 (hdv V1737)))) (do (shen.set-lambda-form-entry (cons hdstr (lambda V1738 (hdstr V1738)))) (do (shen.set-lambda-form-entry (cons hash (lambda V1739 (lambda V1740 (hash V1739 V1740))))) (do (shen.set-lambda-form-entry (cons get (lambda V1741 (lambda V1742 (lambda V1743 (get V1741 V1742 V1743)))))) (do (shen.set-lambda-form-entry (cons get-time (lambda V1744 (get-time V1744)))) (do (shen.set-lambda-form-entry (cons gensym (lambda V1745 (gensym V1745)))) (do (shen.set-lambda-form-entry (cons fst (lambda V1746 (fst V1746)))) (do (shen.set-lambda-form-entry (cons freeze (lambda V1747 (freeze V1747)))) (do (shen.set-lambda-form-entry (cons fix (lambda V1748 (lambda V1749 (fix V1748 V1749))))) (do (shen.set-lambda-form-entry (cons fail-if (lambda V1750 (lambda V1751 (fail-if V1750 V1751))))) (do (shen.set-lambda-form-entry (cons findall (lambda V1752 (lambda V1753 (lambda V1754 (lambda V1755 (lambda V1756 (findall V1752 V1753 V1754 V1755 V1756)))))))) (do (shen.set-lambda-form-entry (cons enable-type-theory (lambda V1757 (enable-type-theory V1757)))) (do (shen.set-lambda-form-entry (cons explode (lambda V1758 (explode V1758)))) (do (shen.set-lambda-form-entry (cons external (lambda V1759 (external V1759)))) (do (shen.set-lambda-form-entry (cons eval-kl (lambda V1760 (eval-kl V1760)))) (do (shen.set-lambda-form-entry (cons eval (lambda V1761 (eval V1761)))) (do (shen.set-lambda-form-entry (cons error-to-string (lambda V1762 (error-to-string V1762)))) (do (shen.set-lambda-form-entry (cons empty? (lambda V1763 (empty? V1763)))) (do (shen.set-lambda-form-entry (cons element? (lambda V1764 (lambda V1765 (element? V1764 V1765))))) (do (shen.set-lambda-form-entry (cons do (lambda V1766 (lambda V1767 (do V1766 V1767))))) (do (shen.set-lambda-form-entry (cons difference (lambda V1768 (lambda V1769 (difference V1768 V1769))))) (do (shen.set-lambda-form-entry (cons destroy (lambda V1770 (destroy V1770)))) (do (shen.set-lambda-form-entry (cons declare (lambda V1771 (lambda V1772 (declare V1771 V1772))))) (do (shen.set-lambda-form-entry (cons cn (lambda V1773 (lambda V1774 (cn V1773 V1774))))) (do (shen.set-lambda-form-entry (cons cons? (lambda V1775 (cons? V1775)))) (do (shen.set-lambda-form-entry (cons cons (lambda V1776 (lambda V1777 (cons V1776 V1777))))) (do (shen.set-lambda-form-entry (cons concat (lambda V1778 (lambda V1779 (concat V1778 V1779))))) (do (shen.set-lambda-form-entry (cons compile (lambda V1780 (lambda V1781 (lambda V1782 (compile V1780 V1781 V1782)))))) (do (shen.set-lambda-form-entry (cons cd (lambda V1783 (cd V1783)))) (do (shen.set-lambda-form-entry (cons close (lambda V1784 (close V1784)))) (do (shen.set-lambda-form-entry (cons bound? (lambda V1785 (bound? V1785)))) (do (shen.set-lambda-form-entry (cons boolean? (lambda V1786 (boolean? V1786)))) (do (shen.set-lambda-form-entry (cons assoc (lambda V1787 (lambda V1788 (assoc V1787 V1788))))) (do (shen.set-lambda-form-entry (cons arity (lambda V1789 (arity V1789)))) (do (shen.set-lambda-form-entry (cons append (lambda V1790 (lambda V1791 (append V1790 V1791))))) (do (shen.set-lambda-form-entry (cons and (lambda V1792 (lambda V1793 (and V1792 V1793))))) (do (shen.set-lambda-form-entry (cons adjoin (lambda V1794 (lambda V1795 (adjoin V1794 V1795))))) (do (shen.set-lambda-form-entry (cons <-address (lambda V1796 (lambda V1797 (<-address V1796 V1797))))) (do (shen.set-lambda-form-entry (cons address-> (lambda V1798 (lambda V1799 (lambda V1800 (address-> V1798 V1799 V1800)))))) (do (shen.set-lambda-form-entry (cons absvector? (lambda V1801 (absvector? V1801)))) (do (shen.set-lambda-form-entry (cons absvector (lambda V1802 (absvector V1802)))) (do (set shen.*history* ()) (do (set shen.*step* false) (do (set shen.*signedfuncs* (cons (cons absvector? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-absvector? (lambda V4342 (lambda V4343 (lambda V4344 (shen.type-signature-of-absvector? V4342 V4343 V4344)))))) (do (set shen.*signedfuncs* (cons (cons adjoin (cons A (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-adjoin (lambda V4352 (lambda V4353 (lambda V4354 (shen.type-signature-of-adjoin V4352 V4353 V4354)))))) (do (set shen.*signedfuncs* (cons (cons and (cons boolean (cons --> (cons (cons boolean (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-and (lambda V4362 (lambda V4363 (lambda V4364 (shen.type-signature-of-and V4362 V4363 V4364)))))) (do (set shen.*signedfuncs* (cons (cons shen.app (cons A (cons --> (cons (cons string (cons --> (cons (cons symbol (cons --> (cons string ()))) ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-shen.app (lambda V4372 (lambda V4373 (lambda V4374 (shen.type-signature-of-shen.app V4372 V4373 V4374)))))) (do (set shen.*signedfuncs* (cons (cons append (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-append (lambda V4382 (lambda V4383 (lambda V4384 (shen.type-signature-of-append V4382 V4383 V4384)))))) (do (set shen.*signedfuncs* (cons (cons arity (cons A (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-arity (lambda V4392 (lambda V4393 (lambda V4394 (shen.type-signature-of-arity V4392 V4393 V4394)))))) (do (set shen.*signedfuncs* (cons (cons assoc (cons A (cons --> (cons (cons (cons list (cons (cons list (cons A ())) ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-assoc (lambda V4402 (lambda V4403 (lambda V4404 (shen.type-signature-of-assoc V4402 V4403 V4404)))))) (do (set shen.*signedfuncs* (cons (cons boolean? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-boolean? (lambda V4412 (lambda V4413 (lambda V4414 (shen.type-signature-of-boolean? V4412 V4413 V4414)))))) (do (set shen.*signedfuncs* (cons (cons bound? (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-bound? (lambda V4422 (lambda V4423 (lambda V4424 (shen.type-signature-of-bound? V4422 V4423 V4424)))))) (do (set shen.*signedfuncs* (cons (cons cd (cons string (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-cd (lambda V4432 (lambda V4433 (lambda V4434 (shen.type-signature-of-cd V4432 V4433 V4434)))))) (do (set shen.*signedfuncs* (cons (cons close (cons (cons stream (cons A ())) (cons --> (cons (cons list (cons B ())) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-close (lambda V4442 (lambda V4443 (lambda V4444 (shen.type-signature-of-close V4442 V4443 V4444)))))) (do (set shen.*signedfuncs* (cons (cons cn (cons string (cons --> (cons (cons string (cons --> (cons string ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-cn (lambda V4452 (lambda V4453 (lambda V4454 (shen.type-signature-of-cn V4452 V4453 V4454)))))) (do (set shen.*signedfuncs* (cons (cons compile (cons (cons A (cons shen.==> (cons B ()))) (cons --> (cons (cons A (cons --> (cons (cons (cons A (cons --> (cons B ()))) (cons --> (cons B ()))) ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-compile (lambda V4462 (lambda V4463 (lambda V4464 (shen.type-signature-of-compile V4462 V4463 V4464)))))) (do (set shen.*signedfuncs* (cons (cons cons? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-cons? (lambda V4472 (lambda V4473 (lambda V4474 (shen.type-signature-of-cons? V4472 V4473 V4474)))))) (do (set shen.*signedfuncs* (cons (cons destroy (cons (cons A (cons --> (cons B ()))) (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-destroy (lambda V4482 (lambda V4483 (lambda V4484 (shen.type-signature-of-destroy V4482 V4483 V4484)))))) (do (set shen.*signedfuncs* (cons (cons difference (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-difference (lambda V4492 (lambda V4493 (lambda V4494 (shen.type-signature-of-difference V4492 V4493 V4494)))))) (do (set shen.*signedfuncs* (cons (cons do (cons A (cons --> (cons (cons B (cons --> (cons B ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-do (lambda V4502 (lambda V4503 (lambda V4504 (shen.type-signature-of-do V4502 V4503 V4504)))))) (do (set shen.*signedfuncs* (cons (cons <e> (cons (cons list (cons A ())) (cons shen.==> (cons (cons list (cons B ())) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-<e> (lambda V4512 (lambda V4513 (lambda V4514 (shen.type-signature-of-<e> V4512 V4513 V4514)))))) (do (set shen.*signedfuncs* (cons (cons <!> (cons (cons list (cons A ())) (cons shen.==> (cons (cons list (cons A ())) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-<!> (lambda V4522 (lambda V4523 (lambda V4524 (shen.type-signature-of-<!> V4522 V4523 V4524)))))) (do (set shen.*signedfuncs* (cons (cons element? (cons A (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-element? (lambda V4532 (lambda V4533 (lambda V4534 (shen.type-signature-of-element? V4532 V4533 V4534)))))) (do (set shen.*signedfuncs* (cons (cons empty? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-empty? (lambda V4542 (lambda V4543 (lambda V4544 (shen.type-signature-of-empty? V4542 V4543 V4544)))))) (do (set shen.*signedfuncs* (cons (cons enable-type-theory (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-enable-type-theory (lambda V4552 (lambda V4553 (lambda V4554 (shen.type-signature-of-enable-type-theory V4552 V4553 V4554)))))) (do (set shen.*signedfuncs* (cons (cons external (cons symbol (cons --> (cons (cons list (cons symbol ())) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-external (lambda V4562 (lambda V4563 (lambda V4564 (shen.type-signature-of-external V4562 V4563 V4564)))))) (do (set shen.*signedfuncs* (cons (cons error-to-string (cons exception (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-error-to-string (lambda V4572 (lambda V4573 (lambda V4574 (shen.type-signature-of-error-to-string V4572 V4573 V4574)))))) (do (set shen.*signedfuncs* (cons (cons explode (cons A (cons --> (cons (cons list (cons string ())) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-explode (lambda V4582 (lambda V4583 (lambda V4584 (shen.type-signature-of-explode V4582 V4583 V4584)))))) (do (set shen.*signedfuncs* (cons (cons fail (cons --> (cons symbol ()))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-fail (lambda V4592 (lambda V4593 (lambda V4594 (shen.type-signature-of-fail V4592 V4593 V4594)))))) (do (set shen.*signedfuncs* (cons (cons fail-if (cons (cons symbol (cons --> (cons boolean ()))) (cons --> (cons (cons symbol (cons --> (cons symbol ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-fail-if (lambda V4602 (lambda V4603 (lambda V4604 (shen.type-signature-of-fail-if V4602 V4603 V4604)))))) (do (set shen.*signedfuncs* (cons (cons fix (cons (cons A (cons --> (cons A ()))) (cons --> (cons (cons A (cons --> (cons A ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-fix (lambda V4612 (lambda V4613 (lambda V4614 (shen.type-signature-of-fix V4612 V4613 V4614)))))) (do (set shen.*signedfuncs* (cons (cons freeze (cons A (cons --> (cons (cons lazy (cons A ())) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-freeze (lambda V4622 (lambda V4623 (lambda V4624 (shen.type-signature-of-freeze V4622 V4623 V4624)))))) (do (set shen.*signedfuncs* (cons (cons fst (cons (cons A (cons * (cons B ()))) (cons --> (cons A ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-fst (lambda V4632 (lambda V4633 (lambda V4634 (shen.type-signature-of-fst V4632 V4633 V4634)))))) (do (set shen.*signedfuncs* (cons (cons function (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons A (cons --> (cons B ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-function (lambda V4642 (lambda V4643 (lambda V4644 (shen.type-signature-of-function V4642 V4643 V4644)))))) (do (set shen.*signedfuncs* (cons (cons gensym (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-gensym (lambda V4652 (lambda V4653 (lambda V4654 (shen.type-signature-of-gensym V4652 V4653 V4654)))))) (do (set shen.*signedfuncs* (cons (cons <-vector (cons (cons vector (cons A ())) (cons --> (cons (cons number (cons --> (cons A ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-<-vector (lambda V4662 (lambda V4663 (lambda V4664 (shen.type-signature-of-<-vector V4662 V4663 V4664)))))) (do (set shen.*signedfuncs* (cons (cons vector-> (cons (cons vector (cons A ())) (cons --> (cons (cons number (cons --> (cons (cons A (cons --> (cons (cons vector (cons A ())) ()))) ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-vector-> (lambda V4672 (lambda V4673 (lambda V4674 (shen.type-signature-of-vector-> V4672 V4673 V4674)))))) (do (set shen.*signedfuncs* (cons (cons vector (cons number (cons --> (cons (cons vector (cons A ())) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-vector (lambda V4682 (lambda V4683 (lambda V4684 (shen.type-signature-of-vector V4682 V4683 V4684)))))) (do (set shen.*signedfuncs* (cons (cons get-time (cons symbol (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-get-time (lambda V4692 (lambda V4693 (lambda V4694 (shen.type-signature-of-get-time V4692 V4693 V4694)))))) (do (set shen.*signedfuncs* (cons (cons hash (cons A (cons --> (cons (cons number (cons --> (cons number ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-hash (lambda V4702 (lambda V4703 (lambda V4704 (shen.type-signature-of-hash V4702 V4703 V4704)))))) (do (set shen.*signedfuncs* (cons (cons head (cons (cons list (cons A ())) (cons --> (cons A ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-head (lambda V4712 (lambda V4713 (lambda V4714 (shen.type-signature-of-head V4712 V4713 V4714)))))) (do (set shen.*signedfuncs* (cons (cons hdv (cons (cons vector (cons A ())) (cons --> (cons A ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-hdv (lambda V4722 (lambda V4723 (lambda V4724 (shen.type-signature-of-hdv V4722 V4723 V4724)))))) (do (set shen.*signedfuncs* (cons (cons hdstr (cons string (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-hdstr (lambda V4732 (lambda V4733 (lambda V4734 (shen.type-signature-of-hdstr V4732 V4733 V4734)))))) (do (set shen.*signedfuncs* (cons (cons if (cons boolean (cons --> (cons (cons A (cons --> (cons (cons A (cons --> (cons A ()))) ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-if (lambda V4742 (lambda V4743 (lambda V4744 (shen.type-signature-of-if V4742 V4743 V4744)))))) (do (set shen.*signedfuncs* (cons (cons it (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-it (lambda V4752 (lambda V4753 (lambda V4754 (shen.type-signature-of-it V4752 V4753 V4754)))))) (do (set shen.*signedfuncs* (cons (cons implementation (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-implementation (lambda V4762 (lambda V4763 (lambda V4764 (shen.type-signature-of-implementation V4762 V4763 V4764)))))) (do (set shen.*signedfuncs* (cons (cons include (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-include (lambda V4772 (lambda V4773 (lambda V4774 (shen.type-signature-of-include V4772 V4773 V4774)))))) (do (set shen.*signedfuncs* (cons (cons include-all-but (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-include-all-but (lambda V4782 (lambda V4783 (lambda V4784 (shen.type-signature-of-include-all-but V4782 V4783 V4784)))))) (do (set shen.*signedfuncs* (cons (cons inferences (cons --> (cons number ()))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-inferences (lambda V4792 (lambda V4793 (lambda V4794 (shen.type-signature-of-inferences V4792 V4793 V4794)))))) (do (set shen.*signedfuncs* (cons (cons shen.insert (cons A (cons --> (cons (cons string (cons --> (cons string ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-shen.insert (lambda V4802 (lambda V4803 (lambda V4804 (shen.type-signature-of-shen.insert V4802 V4803 V4804)))))) (do (set shen.*signedfuncs* (cons (cons integer? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-integer? (lambda V4812 (lambda V4813 (lambda V4814 (shen.type-signature-of-integer? V4812 V4813 V4814)))))) (do (set shen.*signedfuncs* (cons (cons internal (cons symbol (cons --> (cons (cons list (cons symbol ())) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-internal (lambda V4822 (lambda V4823 (lambda V4824 (shen.type-signature-of-internal V4822 V4823 V4824)))))) (do (set shen.*signedfuncs* (cons (cons intersection (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-intersection (lambda V4832 (lambda V4833 (lambda V4834 (shen.type-signature-of-intersection V4832 V4833 V4834)))))) (do (set shen.*signedfuncs* (cons (cons kill (cons --> (cons A ()))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-kill (lambda V4842 (lambda V4843 (lambda V4844 (shen.type-signature-of-kill V4842 V4843 V4844)))))) (do (set shen.*signedfuncs* (cons (cons language (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-language (lambda V4852 (lambda V4853 (lambda V4854 (shen.type-signature-of-language V4852 V4853 V4854)))))) (do (set shen.*signedfuncs* (cons (cons length (cons (cons list (cons A ())) (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-length (lambda V4862 (lambda V4863 (lambda V4864 (shen.type-signature-of-length V4862 V4863 V4864)))))) (do (set shen.*signedfuncs* (cons (cons limit (cons (cons vector (cons A ())) (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-limit (lambda V4872 (lambda V4873 (lambda V4874 (shen.type-signature-of-limit V4872 V4873 V4874)))))) (do (set shen.*signedfuncs* (cons (cons load (cons string (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-load (lambda V4882 (lambda V4883 (lambda V4884 (shen.type-signature-of-load V4882 V4883 V4884)))))) (do (set shen.*signedfuncs* (cons (cons map (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons B ())) ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-map (lambda V4892 (lambda V4893 (lambda V4894 (shen.type-signature-of-map V4892 V4893 V4894)))))) (do (set shen.*signedfuncs* (cons (cons mapcan (cons (cons A (cons --> (cons (cons list (cons B ())) ()))) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons B ())) ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-mapcan (lambda V4902 (lambda V4903 (lambda V4904 (shen.type-signature-of-mapcan V4902 V4903 V4904)))))) (do (set shen.*signedfuncs* (cons (cons maxinferences (cons number (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-maxinferences (lambda V4912 (lambda V4913 (lambda V4914 (shen.type-signature-of-maxinferences V4912 V4913 V4914)))))) (do (set shen.*signedfuncs* (cons (cons n->string (cons number (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-n->string (lambda V4922 (lambda V4923 (lambda V4924 (shen.type-signature-of-n->string V4922 V4923 V4924)))))) (do (set shen.*signedfuncs* (cons (cons nl (cons number (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-nl (lambda V4932 (lambda V4933 (lambda V4934 (shen.type-signature-of-nl V4932 V4933 V4934)))))) (do (set shen.*signedfuncs* (cons (cons not (cons boolean (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-not (lambda V4942 (lambda V4943 (lambda V4944 (shen.type-signature-of-not V4942 V4943 V4944)))))) (do (set shen.*signedfuncs* (cons (cons nth (cons number (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons A ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-nth (lambda V4952 (lambda V4953 (lambda V4954 (shen.type-signature-of-nth V4952 V4953 V4954)))))) (do (set shen.*signedfuncs* (cons (cons number? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-number? (lambda V4962 (lambda V4963 (lambda V4964 (shen.type-signature-of-number? V4962 V4963 V4964)))))) (do (set shen.*signedfuncs* (cons (cons occurrences (cons A (cons --> (cons (cons B (cons --> (cons number ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-occurrences (lambda V4972 (lambda V4973 (lambda V4974 (shen.type-signature-of-occurrences V4972 V4973 V4974)))))) (do (set shen.*signedfuncs* (cons (cons occurs-check (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-occurs-check (lambda V4982 (lambda V4983 (lambda V4984 (shen.type-signature-of-occurs-check V4982 V4983 V4984)))))) (do (set shen.*signedfuncs* (cons (cons optimise (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-optimise (lambda V4992 (lambda V4993 (lambda V4994 (shen.type-signature-of-optimise V4992 V4993 V4994)))))) (do (set shen.*signedfuncs* (cons (cons or (cons boolean (cons --> (cons (cons boolean (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-or (lambda V5002 (lambda V5003 (lambda V5004 (shen.type-signature-of-or V5002 V5003 V5004)))))) (do (set shen.*signedfuncs* (cons (cons os (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-os (lambda V5012 (lambda V5013 (lambda V5014 (shen.type-signature-of-os V5012 V5013 V5014)))))) (do (set shen.*signedfuncs* (cons (cons package? (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-package? (lambda V5022 (lambda V5023 (lambda V5024 (shen.type-signature-of-package? V5022 V5023 V5024)))))) (do (set shen.*signedfuncs* (cons (cons port (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-port (lambda V5032 (lambda V5033 (lambda V5034 (shen.type-signature-of-port V5032 V5033 V5034)))))) (do (set shen.*signedfuncs* (cons (cons porters (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-porters (lambda V5042 (lambda V5043 (lambda V5044 (shen.type-signature-of-porters V5042 V5043 V5044)))))) (do (set shen.*signedfuncs* (cons (cons pos (cons string (cons --> (cons (cons number (cons --> (cons string ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-pos (lambda V5052 (lambda V5053 (lambda V5054 (shen.type-signature-of-pos V5052 V5053 V5054)))))) (do (set shen.*signedfuncs* (cons (cons pr (cons string (cons --> (cons (cons (cons stream (cons out ())) (cons --> (cons string ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-pr (lambda V5062 (lambda V5063 (lambda V5064 (shen.type-signature-of-pr V5062 V5063 V5064)))))) (do (set shen.*signedfuncs* (cons (cons print (cons A (cons --> (cons A ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-print (lambda V5072 (lambda V5073 (lambda V5074 (shen.type-signature-of-print V5072 V5073 V5074)))))) (do (set shen.*signedfuncs* (cons (cons profile (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons A (cons --> (cons B ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-profile (lambda V5082 (lambda V5083 (lambda V5084 (shen.type-signature-of-profile V5082 V5083 V5084)))))) (do (set shen.*signedfuncs* (cons (cons preclude (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-preclude (lambda V5092 (lambda V5093 (lambda V5094 (shen.type-signature-of-preclude V5092 V5093 V5094)))))) (do (set shen.*signedfuncs* (cons (cons shen.proc-nl (cons string (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-shen.proc-nl (lambda V5102 (lambda V5103 (lambda V5104 (shen.type-signature-of-shen.proc-nl V5102 V5103 V5104)))))) (do (set shen.*signedfuncs* (cons (cons profile-results (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons (cons A (cons --> (cons B ()))) (cons * (cons number ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-profile-results (lambda V5112 (lambda V5113 (lambda V5114 (shen.type-signature-of-profile-results V5112 V5113 V5114)))))) (do (set shen.*signedfuncs* (cons (cons protect (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-protect (lambda V5122 (lambda V5123 (lambda V5124 (shen.type-signature-of-protect V5122 V5123 V5124)))))) (do (set shen.*signedfuncs* (cons (cons preclude-all-but (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-preclude-all-but (lambda V5132 (lambda V5133 (lambda V5134 (shen.type-signature-of-preclude-all-but V5132 V5133 V5134)))))) (do (set shen.*signedfuncs* (cons (cons shen.prhush (cons string (cons --> (cons (cons (cons stream (cons out ())) (cons --> (cons string ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-shen.prhush (lambda V5142 (lambda V5143 (lambda V5144 (shen.type-signature-of-shen.prhush V5142 V5143 V5144)))))) (do (set shen.*signedfuncs* (cons (cons ps (cons symbol (cons --> (cons (cons list (cons unit ())) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-ps (lambda V5152 (lambda V5153 (lambda V5154 (shen.type-signature-of-ps V5152 V5153 V5154)))))) (do (set shen.*signedfuncs* (cons (cons read (cons (cons stream (cons in ())) (cons --> (cons unit ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-read (lambda V5162 (lambda V5163 (lambda V5164 (shen.type-signature-of-read V5162 V5163 V5164)))))) (do (set shen.*signedfuncs* (cons (cons read-byte (cons (cons stream (cons in ())) (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-read-byte (lambda V5172 (lambda V5173 (lambda V5174 (shen.type-signature-of-read-byte V5172 V5173 V5174)))))) (do (set shen.*signedfuncs* (cons (cons read-file-as-bytelist (cons string (cons --> (cons (cons list (cons number ())) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-read-file-as-bytelist (lambda V5182 (lambda V5183 (lambda V5184 (shen.type-signature-of-read-file-as-bytelist V5182 V5183 V5184)))))) (do (set shen.*signedfuncs* (cons (cons read-file-as-string (cons string (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-read-file-as-string (lambda V5192 (lambda V5193 (lambda V5194 (shen.type-signature-of-read-file-as-string V5192 V5193 V5194)))))) (do (set shen.*signedfuncs* (cons (cons read-file (cons string (cons --> (cons (cons list (cons unit ())) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-read-file (lambda V5202 (lambda V5203 (lambda V5204 (shen.type-signature-of-read-file V5202 V5203 V5204)))))) (do (set shen.*signedfuncs* (cons (cons read-from-string (cons string (cons --> (cons (cons list (cons unit ())) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-read-from-string (lambda V5212 (lambda V5213 (lambda V5214 (shen.type-signature-of-read-from-string V5212 V5213 V5214)))))) (do (set shen.*signedfuncs* (cons (cons release (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-release (lambda V5222 (lambda V5223 (lambda V5224 (shen.type-signature-of-release V5222 V5223 V5224)))))) (do (set shen.*signedfuncs* (cons (cons remove (cons A (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-remove (lambda V5232 (lambda V5233 (lambda V5234 (shen.type-signature-of-remove V5232 V5233 V5234)))))) (do (set shen.*signedfuncs* (cons (cons reverse (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-reverse (lambda V5242 (lambda V5243 (lambda V5244 (shen.type-signature-of-reverse V5242 V5243 V5244)))))) (do (set shen.*signedfuncs* (cons (cons simple-error (cons string (cons --> (cons A ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-simple-error (lambda V5252 (lambda V5253 (lambda V5254 (shen.type-signature-of-simple-error V5252 V5253 V5254)))))) (do (set shen.*signedfuncs* (cons (cons snd (cons (cons A (cons * (cons B ()))) (cons --> (cons B ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-snd (lambda V5262 (lambda V5263 (lambda V5264 (shen.type-signature-of-snd V5262 V5263 V5264)))))) (do (set shen.*signedfuncs* (cons (cons specialise (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-specialise (lambda V5272 (lambda V5273 (lambda V5274 (shen.type-signature-of-specialise V5272 V5273 V5274)))))) (do (set shen.*signedfuncs* (cons (cons spy (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-spy (lambda V5282 (lambda V5283 (lambda V5284 (shen.type-signature-of-spy V5282 V5283 V5284)))))) (do (set shen.*signedfuncs* (cons (cons step (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-step (lambda V5292 (lambda V5293 (lambda V5294 (shen.type-signature-of-step V5292 V5293 V5294)))))) (do (set shen.*signedfuncs* (cons (cons stinput (cons --> (cons (cons stream (cons in ())) ()))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-stinput (lambda V5302 (lambda V5303 (lambda V5304 (shen.type-signature-of-stinput V5302 V5303 V5304)))))) (do (set shen.*signedfuncs* (cons (cons sterror (cons --> (cons (cons stream (cons out ())) ()))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-sterror (lambda V5312 (lambda V5313 (lambda V5314 (shen.type-signature-of-sterror V5312 V5313 V5314)))))) (do (set shen.*signedfuncs* (cons (cons stoutput (cons --> (cons (cons stream (cons out ())) ()))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-stoutput (lambda V5322 (lambda V5323 (lambda V5324 (shen.type-signature-of-stoutput V5322 V5323 V5324)))))) (do (set shen.*signedfuncs* (cons (cons string? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-string? (lambda V5332 (lambda V5333 (lambda V5334 (shen.type-signature-of-string? V5332 V5333 V5334)))))) (do (set shen.*signedfuncs* (cons (cons str (cons A (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-str (lambda V5342 (lambda V5343 (lambda V5344 (shen.type-signature-of-str V5342 V5343 V5344)))))) (do (set shen.*signedfuncs* (cons (cons string->n (cons string (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-string->n (lambda V5352 (lambda V5353 (lambda V5354 (shen.type-signature-of-string->n V5352 V5353 V5354)))))) (do (set shen.*signedfuncs* (cons (cons string->symbol (cons string (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-string->symbol (lambda V5362 (lambda V5363 (lambda V5364 (shen.type-signature-of-string->symbol V5362 V5363 V5364)))))) (do (set shen.*signedfuncs* (cons (cons sum (cons (cons list (cons number ())) (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-sum (lambda V5372 (lambda V5373 (lambda V5374 (shen.type-signature-of-sum V5372 V5373 V5374)))))) (do (set shen.*signedfuncs* (cons (cons symbol? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-symbol? (lambda V5382 (lambda V5383 (lambda V5384 (shen.type-signature-of-symbol? V5382 V5383 V5384)))))) (do (set shen.*signedfuncs* (cons (cons systemf (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-systemf (lambda V5392 (lambda V5393 (lambda V5394 (shen.type-signature-of-systemf V5392 V5393 V5394)))))) (do (set shen.*signedfuncs* (cons (cons tail (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-tail (lambda V5402 (lambda V5403 (lambda V5404 (shen.type-signature-of-tail V5402 V5403 V5404)))))) (do (set shen.*signedfuncs* (cons (cons tlstr (cons string (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-tlstr (lambda V5412 (lambda V5413 (lambda V5414 (shen.type-signature-of-tlstr V5412 V5413 V5414)))))) (do (set shen.*signedfuncs* (cons (cons tlv (cons (cons vector (cons A ())) (cons --> (cons (cons vector (cons A ())) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-tlv (lambda V5422 (lambda V5423 (lambda V5424 (shen.type-signature-of-tlv V5422 V5423 V5424)))))) (do (set shen.*signedfuncs* (cons (cons tc (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-tc (lambda V5432 (lambda V5433 (lambda V5434 (shen.type-signature-of-tc V5432 V5433 V5434)))))) (do (set shen.*signedfuncs* (cons (cons tc? (cons --> (cons boolean ()))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-tc? (lambda V5442 (lambda V5443 (lambda V5444 (shen.type-signature-of-tc? V5442 V5443 V5444)))))) (do (set shen.*signedfuncs* (cons (cons thaw (cons (cons lazy (cons A ())) (cons --> (cons A ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-thaw (lambda V5452 (lambda V5453 (lambda V5454 (shen.type-signature-of-thaw V5452 V5453 V5454)))))) (do (set shen.*signedfuncs* (cons (cons track (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-track (lambda V5462 (lambda V5463 (lambda V5464 (shen.type-signature-of-track V5462 V5463 V5464)))))) (do (set shen.*signedfuncs* (cons (cons trap-error (cons A (cons --> (cons (cons (cons exception (cons --> (cons A ()))) (cons --> (cons A ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-trap-error (lambda V5472 (lambda V5473 (lambda V5474 (shen.type-signature-of-trap-error V5472 V5473 V5474)))))) (do (set shen.*signedfuncs* (cons (cons tuple? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-tuple? (lambda V5482 (lambda V5483 (lambda V5484 (shen.type-signature-of-tuple? V5482 V5483 V5484)))))) (do (set shen.*signedfuncs* (cons (cons undefmacro (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-undefmacro (lambda V5492 (lambda V5493 (lambda V5494 (shen.type-signature-of-undefmacro V5492 V5493 V5494)))))) (do (set shen.*signedfuncs* (cons (cons union (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-union (lambda V5502 (lambda V5503 (lambda V5504 (shen.type-signature-of-union V5502 V5503 V5504)))))) (do (set shen.*signedfuncs* (cons (cons unprofile (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons A (cons --> (cons B ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-unprofile (lambda V5512 (lambda V5513 (lambda V5514 (shen.type-signature-of-unprofile V5512 V5513 V5514)))))) (do (set shen.*signedfuncs* (cons (cons untrack (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-untrack (lambda V5522 (lambda V5523 (lambda V5524 (shen.type-signature-of-untrack V5522 V5523 V5524)))))) (do (set shen.*signedfuncs* (cons (cons unspecialise (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-unspecialise (lambda V5532 (lambda V5533 (lambda V5534 (shen.type-signature-of-unspecialise V5532 V5533 V5534)))))) (do (set shen.*signedfuncs* (cons (cons variable? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-variable? (lambda V5542 (lambda V5543 (lambda V5544 (shen.type-signature-of-variable? V5542 V5543 V5544)))))) (do (set shen.*signedfuncs* (cons (cons vector? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-vector? (lambda V5552 (lambda V5553 (lambda V5554 (shen.type-signature-of-vector? V5552 V5553 V5554)))))) (do (set shen.*signedfuncs* (cons (cons version (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-version (lambda V5562 (lambda V5563 (lambda V5564 (shen.type-signature-of-version V5562 V5563 V5564)))))) (do (set shen.*signedfuncs* (cons (cons write-to-file (cons string (cons --> (cons (cons A (cons --> (cons A ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-write-to-file (lambda V5572 (lambda V5573 (lambda V5574 (shen.type-signature-of-write-to-file V5572 V5573 V5574)))))) (do (set shen.*signedfuncs* (cons (cons write-byte (cons number (cons --> (cons (cons (cons stream (cons out ())) (cons --> (cons number ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-write-byte (lambda V5582 (lambda V5583 (lambda V5584 (shen.type-signature-of-write-byte V5582 V5583 V5584)))))) (do (set shen.*signedfuncs* (cons (cons y-or-n? (cons string (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-y-or-n? (lambda V5592 (lambda V5593 (lambda V5594 (shen.type-signature-of-y-or-n? V5592 V5593 V5594)))))) (do (set shen.*signedfuncs* (cons (cons > (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-> (lambda V5602 (lambda V5603 (lambda V5604 (shen.type-signature-of-> V5602 V5603 V5604)))))) (do (set shen.*signedfuncs* (cons (cons < (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-< (lambda V5612 (lambda V5613 (lambda V5614 (shen.type-signature-of-< V5612 V5613 V5614)))))) (do (set shen.*signedfuncs* (cons (cons >= (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of->= (lambda V5622 (lambda V5623 (lambda V5624 (shen.type-signature-of->= V5622 V5623 V5624)))))) (do (set shen.*signedfuncs* (cons (cons <= (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-<= (lambda V5632 (lambda V5633 (lambda V5634 (shen.type-signature-of-<= V5632 V5633 V5634)))))) (do (set shen.*signedfuncs* (cons (cons = (cons A (cons --> (cons (cons A (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-= (lambda V5642 (lambda V5643 (lambda V5644 (shen.type-signature-of-= V5642 V5643 V5644)))))) (do (set shen.*signedfuncs* (cons (cons + (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-+ (lambda V5652 (lambda V5653 (lambda V5654 (shen.type-signature-of-+ V5652 V5653 V5654)))))) (do (set shen.*signedfuncs* (cons (cons / (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-/ (lambda V5662 (lambda V5663 (lambda V5664 (shen.type-signature-of-/ V5662 V5663 V5664)))))) (do (set shen.*signedfuncs* (cons (cons - (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-- (lambda V5672 (lambda V5673 (lambda V5674 (shen.type-signature-of-- V5672 V5673 V5674)))))) (do (set shen.*signedfuncs* (cons (cons * (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-* (lambda V5682 (lambda V5683 (lambda V5684 (shen.type-signature-of-* V5682 V5683 V5684)))))) (do (set shen.*signedfuncs* (cons (cons == (cons A (cons --> (cons (cons B (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-== (lambda V5692 (lambda V5693 (lambda V5694 (shen.type-signature-of-== V5692 V5693 V5694)))))) (set shen.*empty-absvector* (absvector 0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))



