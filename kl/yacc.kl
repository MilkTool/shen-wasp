"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun shen.yacc (V5827) (cond ((and (cons? V5827) (and (= defcc (hd V5827)) (cons? (tl V5827)))) (shen.yacc->shen (hd (tl V5827)) (tl (tl V5827)))) (true (shen.f_error shen.yacc))))

(defun shen.yacc->shen (V5830 V5831) (let CCRules (shen.split_cc_rules true V5831 ()) (let CCBody (map (lambda X (shen.cc_body X)) CCRules) (let YaccCases (shen.yacc_cases CCBody) (cons define (cons V5830 (cons Stream (cons -> (cons (shen.kill-code YaccCases) ())))))))))

(defun shen.kill-code (V5833) (cond ((> (occurrences kill V5833) 0) (cons trap-error (cons V5833 (cons (cons lambda (cons E (cons (cons shen.analyse-kill (cons E ())) ()))) ())))) (true V5833)))

(defun kill () (simple-error "yacc kill"))

(defun shen.analyse-kill (V5835) (let String (error-to-string V5835) (if (= String "yacc kill") (fail) V5835)))

(defun shen.split_cc_rules (V5841 V5842 V5843) (cond ((and (= () V5842) (= () V5843)) ()) ((= () V5842) (cons (shen.split_cc_rule V5841 (reverse V5843) ()) ())) ((and (cons? V5842) (= ; (hd V5842))) (cons (shen.split_cc_rule V5841 (reverse V5843) ()) (shen.split_cc_rules V5841 (tl V5842) ()))) ((cons? V5842) (shen.split_cc_rules V5841 (tl V5842) (cons (hd V5842) V5843))) (true (shen.f_error shen.split_cc_rules))))

(defun shen.split_cc_rule (V5851 V5852 V5853) (cond ((and (cons? V5852) (and (= := (hd V5852)) (and (cons? (tl V5852)) (= () (tl (tl V5852)))))) (cons (reverse V5853) (tl V5852))) ((and (cons? V5852) (and (= := (hd V5852)) (and (cons? (tl V5852)) (and (cons? (tl (tl V5852))) (and (= where (hd (tl (tl V5852)))) (and (cons? (tl (tl (tl V5852)))) (= () (tl (tl (tl (tl V5852))))))))))) (cons (reverse V5853) (cons (cons where (cons (hd (tl (tl (tl V5852)))) (cons (hd (tl V5852)) ()))) ()))) ((= () V5852) (do (shen.semantic-completion-warning V5851 V5853) (shen.split_cc_rule V5851 (cons := (cons (shen.default_semantics (reverse V5853)) ())) V5853))) ((cons? V5852) (shen.split_cc_rule V5851 (tl V5852) (cons (hd V5852) V5853))) (true (shen.f_error shen.split_cc_rule))))

(defun shen.semantic-completion-warning (V5864 V5865) (cond ((= true V5864) (do (shen.prhush "warning: " (stoutput)) (do (shen.for-each (lambda X (shen.prhush (shen.app X " " shen.a) (stoutput))) (reverse V5865)) (shen.prhush "has no semantics.
" (stoutput))))) (true shen.skip)))

(defun shen.default_semantics (V5867) (cond ((= () V5867) ()) ((and (cons? V5867) (and (= () (tl V5867)) (shen.grammar_symbol? (hd V5867)))) (hd V5867)) ((and (cons? V5867) (shen.grammar_symbol? (hd V5867))) (cons append (cons (hd V5867) (cons (shen.default_semantics (tl V5867)) ())))) ((cons? V5867) (cons cons (cons (hd V5867) (cons (shen.default_semantics (tl V5867)) ())))) (true (shen.f_error shen.default_semantics))))

(defun shen.grammar_symbol? (V5869) (and (symbol? V5869) (let Cs (shen.strip-pathname (explode V5869)) (and (= (hd Cs) "<") (= (hd (reverse Cs)) ">")))))

(defun shen.yacc_cases (V5871) (cond ((and (cons? V5871) (= () (tl V5871))) (hd V5871)) ((cons? V5871) (let P YaccParse (cons let (cons P (cons (hd V5871) (cons (cons if (cons (cons = (cons P (cons (cons fail ()) ()))) (cons (shen.yacc_cases (tl V5871)) (cons P ())))) ())))))) (true (shen.f_error shen.yacc_cases))))

(defun shen.cc_body (V5873) (cond ((and (cons? V5873) (and (cons? (tl V5873)) (= () (tl (tl V5873))))) (shen.syntax (hd V5873) Stream (hd (tl V5873)))) (true (shen.f_error shen.cc_body))))

(defun shen.syntax (V5877 V5878 V5879) (cond ((and (= () V5877) (and (cons? V5879) (and (= where (hd V5879)) (and (cons? (tl V5879)) (and (cons? (tl (tl V5879))) (= () (tl (tl (tl V5879))))))))) (cons if (cons (shen.semantics (hd (tl V5879))) (cons (cons shen.pair (cons (cons hd (cons V5878 ())) (cons (shen.semantics (hd (tl (tl V5879)))) ()))) (cons (cons fail ()) ()))))) ((= () V5877) (cons shen.pair (cons (cons hd (cons V5878 ())) (cons (shen.semantics V5879) ())))) ((cons? V5877) (if (shen.grammar_symbol? (hd V5877)) (shen.recursive_descent V5877 V5878 V5879) (if (variable? (hd V5877)) (shen.variable-match V5877 V5878 V5879) (if (shen.jump_stream? (hd V5877)) (shen.jump_stream V5877 V5878 V5879) (if (shen.terminal? (hd V5877)) (shen.check_stream V5877 V5878 V5879) (if (cons? (hd V5877)) (shen.list-stream (shen.decons (hd V5877)) (tl V5877) V5878 V5879) (simple-error (shen.app (hd V5877) " is not legal syntax
" shen.a)))))))) (true (shen.f_error shen.syntax))))

(defun shen.list-stream (V5884 V5885 V5886 V5887) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V5886 ())) ())) (cons (cons cons? (cons (cons shen.hdhd (cons V5886 ())) ())) ()))) (let Placeholder (gensym shen.place) (let RunOn (shen.syntax V5885 (cons shen.pair (cons (cons shen.tlhd (cons V5886 ())) (cons (cons shen.hdtl (cons V5886 ())) ()))) V5887) (let Action (shen.insert-runon RunOn Placeholder (shen.syntax V5884 (cons shen.pair (cons (cons shen.hdhd (cons V5886 ())) (cons (cons shen.hdtl (cons V5886 ())) ()))) Placeholder)) (cons if (cons Test (cons Action (cons (cons fail ()) ())))))))))

(defun shen.decons (V5889) (cond ((and (cons? V5889) (and (= cons (hd V5889)) (and (cons? (tl V5889)) (and (cons? (tl (tl V5889))) (and (= () (hd (tl (tl V5889)))) (= () (tl (tl (tl V5889))))))))) (cons (hd (tl V5889)) ())) ((and (cons? V5889) (and (= cons (hd V5889)) (and (cons? (tl V5889)) (and (cons? (tl (tl V5889))) (= () (tl (tl (tl V5889)))))))) (cons (hd (tl V5889)) (shen.decons (hd (tl (tl V5889)))))) (true V5889)))

(defun shen.insert-runon (V5904 V5905 V5906) (cond ((and (cons? V5906) (and (= shen.pair (hd V5906)) (and (cons? (tl V5906)) (and (cons? (tl (tl V5906))) (and (= () (tl (tl (tl V5906)))) (= (hd (tl (tl V5906))) V5905)))))) V5904) ((cons? V5906) (map (lambda Z (shen.insert-runon V5904 V5905 Z)) V5906)) (true V5906)))

(defun shen.strip-pathname (V5912) (cond ((not (element? "." V5912)) V5912) ((cons? V5912) (shen.strip-pathname (tl V5912))) (true (shen.f_error shen.strip-pathname))))

(defun shen.recursive_descent (V5916 V5917 V5918) (cond ((cons? V5916) (let Test (cons (hd V5916) (cons V5917 ())) (let Action (shen.syntax (tl V5916) (concat Parse_ (hd V5916)) V5918) (let Else (cons fail ()) (cons let (cons (concat Parse_ (hd V5916)) (cons Test (cons (cons if (cons (cons not (cons (cons = (cons (cons fail ()) (cons (concat Parse_ (hd V5916)) ()))) ())) (cons Action (cons Else ())))) ())))))))) (true (shen.f_error shen.recursive_descent))))

(defun shen.variable-match (V5922 V5923 V5924) (cond ((cons? V5922) (let Test (cons cons? (cons (cons hd (cons V5923 ())) ())) (let Action (cons let (cons (concat Parse_ (hd V5922)) (cons (cons shen.hdhd (cons V5923 ())) (cons (shen.syntax (tl V5922) (cons shen.pair (cons (cons shen.tlhd (cons V5923 ())) (cons (cons shen.hdtl (cons V5923 ())) ()))) V5924) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.variable-match))))

(defun shen.terminal? (V5934) (cond ((cons? V5934) false) ((variable? V5934) false) (true true)))

(defun shen.jump_stream? (V5940) (cond ((= V5940 _) true) (true false)))

(defun shen.check_stream (V5944 V5945 V5946) (cond ((cons? V5944) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V5945 ())) ())) (cons (cons = (cons (hd V5944) (cons (cons shen.hdhd (cons V5945 ())) ()))) ()))) (let NewStr (gensym NewStream) (let Action (cons let (cons NewStr (cons (cons shen.pair (cons (cons shen.tlhd (cons V5945 ())) (cons (cons shen.hdtl (cons V5945 ())) ()))) (cons (shen.syntax (tl V5944) NewStr V5946) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ()))))))))) (true (shen.f_error shen.check_stream))))

(defun shen.jump_stream (V5950 V5951 V5952) (cond ((cons? V5950) (let Test (cons cons? (cons (cons hd (cons V5951 ())) ())) (let Action (shen.syntax (tl V5950) (cons shen.pair (cons (cons shen.tlhd (cons V5951 ())) (cons (cons shen.hdtl (cons V5951 ())) ()))) V5952) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.jump_stream))))

(defun shen.semantics (V5954) (cond ((= () V5954) ()) ((shen.grammar_symbol? V5954) (cons shen.hdtl (cons (concat Parse_ V5954) ()))) ((variable? V5954) (concat Parse_ V5954)) ((cons? V5954) (map (lambda Z (shen.semantics Z)) V5954)) (true V5954)))

(defun shen.pair (V5957 V5958) (cons V5957 (cons V5958 ())))

(defun shen.hdtl (V5960) (hd (tl V5960)))

(defun shen.hdhd (V5962) (hd (hd V5962)))

(defun shen.tlhd (V5964) (tl (hd V5964)))

(defun shen.snd-or-fail (V5972) (cond ((and (cons? V5972) (and (cons? (tl V5972)) (= () (tl (tl V5972))))) (hd (tl V5972))) (true (fail))))

(defun fail () shen.fail!)(defun <!> (V5980) (cond ((and (cons? V5980) (and (cons? (tl V5980)) (= () (tl (tl V5980))))) (cons () (cons (hd V5980) ()))) (true (fail))))

(defun <e> (V5986) (cond ((and (cons? V5986) (and (cons? (tl V5986)) (= () (tl (tl V5986))))) (cons (hd V5986) (cons () ()))) (true (shen.f_error <e>))))



