"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.yacc (V4119) (cond ((and (cons? V4119) (and (= defcc (hd V4119)) (cons? (tl V4119)))) (shen.yacc->shen (hd (tl V4119)) (tl (tl V4119)))) (true (shen.f_error shen.yacc))))

(defun shen.yacc->shen (V4122 V4123) (let CCRules (shen.split_cc_rules true V4123 ()) (let CCBody (map (lambda X (shen.cc_body X)) CCRules) (let YaccCases (shen.yacc_cases CCBody) (cons define (cons V4122 (cons Stream (cons -> (cons (shen.kill-code YaccCases) ())))))))))

(defun shen.kill-code (V4125) (cond ((> (occurrences kill V4125) 0) (cons trap-error (cons V4125 (cons (cons lambda (cons E (cons (cons shen.analyse-kill (cons E ())) ()))) ())))) (true V4125)))

(defun kill () (simple-error "yacc kill"))

(defun shen.analyse-kill (V4127) (let String (error-to-string V4127) (if (= String "yacc kill") (fail) V4127)))

(defun shen.split_cc_rules (V4133 V4134 V4135) (cond ((and (= () V4134) (= () V4135)) ()) ((= () V4134) (cons (shen.split_cc_rule V4133 (reverse V4135) ()) ())) ((and (cons? V4134) (= ; (hd V4134))) (cons (shen.split_cc_rule V4133 (reverse V4135) ()) (shen.split_cc_rules V4133 (tl V4134) ()))) ((cons? V4134) (shen.split_cc_rules V4133 (tl V4134) (cons (hd V4134) V4135))) (true (shen.f_error shen.split_cc_rules))))

(defun shen.split_cc_rule (V4143 V4144 V4145) (cond ((and (cons? V4144) (and (= := (hd V4144)) (and (cons? (tl V4144)) (= () (tl (tl V4144)))))) (cons (reverse V4145) (tl V4144))) ((and (cons? V4144) (and (= := (hd V4144)) (and (cons? (tl V4144)) (and (cons? (tl (tl V4144))) (and (= where (hd (tl (tl V4144)))) (and (cons? (tl (tl (tl V4144)))) (= () (tl (tl (tl (tl V4144))))))))))) (cons (reverse V4145) (cons (cons where (cons (hd (tl (tl (tl V4144)))) (cons (hd (tl V4144)) ()))) ()))) ((= () V4144) (do (shen.semantic-completion-warning V4143 V4145) (shen.split_cc_rule V4143 (cons := (cons (shen.default_semantics (reverse V4145)) ())) V4145))) ((cons? V4144) (shen.split_cc_rule V4143 (tl V4144) (cons (hd V4144) V4145))) (true (shen.f_error shen.split_cc_rule))))

(defun shen.semantic-completion-warning (V4156 V4157) (cond ((= true V4156) (do (shen.prhush "warning: " (stoutput)) (do (shen.for-each (lambda X (shen.prhush (shen.app X " " shen.a) (stoutput))) (reverse V4157)) (shen.prhush "has no semantics.
" (stoutput))))) (true shen.skip)))

(defun shen.default_semantics (V4159) (cond ((= () V4159) ()) ((and (cons? V4159) (and (= () (tl V4159)) (shen.grammar_symbol? (hd V4159)))) (hd V4159)) ((and (cons? V4159) (shen.grammar_symbol? (hd V4159))) (cons append (cons (hd V4159) (cons (shen.default_semantics (tl V4159)) ())))) ((cons? V4159) (cons cons (cons (hd V4159) (cons (shen.default_semantics (tl V4159)) ())))) (true (shen.f_error shen.default_semantics))))

(defun shen.grammar_symbol? (V4161) (and (symbol? V4161) (let Cs (shen.strip-pathname (explode V4161)) (and (= (hd Cs) "<") (= (hd (reverse Cs)) ">")))))

(defun shen.yacc_cases (V4163) (cond ((and (cons? V4163) (= () (tl V4163))) (hd V4163)) ((cons? V4163) (let P YaccParse (cons let (cons P (cons (hd V4163) (cons (cons if (cons (cons = (cons P (cons (cons fail ()) ()))) (cons (shen.yacc_cases (tl V4163)) (cons P ())))) ())))))) (true (shen.f_error shen.yacc_cases))))

(defun shen.cc_body (V4165) (cond ((and (cons? V4165) (and (cons? (tl V4165)) (= () (tl (tl V4165))))) (shen.syntax (hd V4165) Stream (hd (tl V4165)))) (true (shen.f_error shen.cc_body))))

(defun shen.syntax (V4169 V4170 V4171) (cond ((and (= () V4169) (and (cons? V4171) (and (= where (hd V4171)) (and (cons? (tl V4171)) (and (cons? (tl (tl V4171))) (= () (tl (tl (tl V4171))))))))) (cons if (cons (shen.semantics (hd (tl V4171))) (cons (cons shen.pair (cons (cons hd (cons V4170 ())) (cons (shen.semantics (hd (tl (tl V4171)))) ()))) (cons (cons fail ()) ()))))) ((= () V4169) (cons shen.pair (cons (cons hd (cons V4170 ())) (cons (shen.semantics V4171) ())))) ((cons? V4169) (if (shen.grammar_symbol? (hd V4169)) (shen.recursive_descent V4169 V4170 V4171) (if (variable? (hd V4169)) (shen.variable-match V4169 V4170 V4171) (if (shen.jump_stream? (hd V4169)) (shen.jump_stream V4169 V4170 V4171) (if (shen.terminal? (hd V4169)) (shen.check_stream V4169 V4170 V4171) (if (cons? (hd V4169)) (shen.list-stream (shen.decons (hd V4169)) (tl V4169) V4170 V4171) (simple-error (shen.app (hd V4169) " is not legal syntax
" shen.a)))))))) (true (shen.f_error shen.syntax))))

(defun shen.list-stream (V4176 V4177 V4178 V4179) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V4178 ())) ())) (cons (cons cons? (cons (cons shen.hdhd (cons V4178 ())) ())) ()))) (let Placeholder (gensym shen.place) (let RunOn (shen.syntax V4177 (cons shen.pair (cons (cons shen.tlhd (cons V4178 ())) (cons (cons shen.hdtl (cons V4178 ())) ()))) V4179) (let Action (shen.insert-runon RunOn Placeholder (shen.syntax V4176 (cons shen.pair (cons (cons shen.hdhd (cons V4178 ())) (cons (cons shen.hdtl (cons V4178 ())) ()))) Placeholder)) (cons if (cons Test (cons Action (cons (cons fail ()) ())))))))))

(defun shen.decons (V4181) (cond ((and (cons? V4181) (and (= cons (hd V4181)) (and (cons? (tl V4181)) (and (cons? (tl (tl V4181))) (and (= () (hd (tl (tl V4181)))) (= () (tl (tl (tl V4181))))))))) (cons (hd (tl V4181)) ())) ((and (cons? V4181) (and (= cons (hd V4181)) (and (cons? (tl V4181)) (and (cons? (tl (tl V4181))) (= () (tl (tl (tl V4181)))))))) (cons (hd (tl V4181)) (shen.decons (hd (tl (tl V4181)))))) (true V4181)))

(defun shen.insert-runon (V4196 V4197 V4198) (cond ((and (cons? V4198) (and (= shen.pair (hd V4198)) (and (cons? (tl V4198)) (and (cons? (tl (tl V4198))) (and (= () (tl (tl (tl V4198)))) (= (hd (tl (tl V4198))) V4197)))))) V4196) ((cons? V4198) (map (lambda Z (shen.insert-runon V4196 V4197 Z)) V4198)) (true V4198)))

(defun shen.strip-pathname (V4204) (cond ((not (element? "." V4204)) V4204) ((cons? V4204) (shen.strip-pathname (tl V4204))) (true (shen.f_error shen.strip-pathname))))

(defun shen.recursive_descent (V4208 V4209 V4210) (cond ((cons? V4208) (let Test (cons (hd V4208) (cons V4209 ())) (let Action (shen.syntax (tl V4208) (concat Parse_ (hd V4208)) V4210) (let Else (cons fail ()) (cons let (cons (concat Parse_ (hd V4208)) (cons Test (cons (cons if (cons (cons not (cons (cons = (cons (cons fail ()) (cons (concat Parse_ (hd V4208)) ()))) ())) (cons Action (cons Else ())))) ())))))))) (true (shen.f_error shen.recursive_descent))))

(defun shen.variable-match (V4214 V4215 V4216) (cond ((cons? V4214) (let Test (cons cons? (cons (cons hd (cons V4215 ())) ())) (let Action (cons let (cons (concat Parse_ (hd V4214)) (cons (cons shen.hdhd (cons V4215 ())) (cons (shen.syntax (tl V4214) (cons shen.pair (cons (cons shen.tlhd (cons V4215 ())) (cons (cons shen.hdtl (cons V4215 ())) ()))) V4216) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.variable-match))))

(defun shen.terminal? (V4226) (cond ((cons? V4226) false) ((variable? V4226) false) (true true)))

(defun shen.jump_stream? (V4232) (cond ((= V4232 _) true) (true false)))

(defun shen.check_stream (V4236 V4237 V4238) (cond ((cons? V4236) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V4237 ())) ())) (cons (cons = (cons (hd V4236) (cons (cons shen.hdhd (cons V4237 ())) ()))) ()))) (let NewStr (gensym NewStream) (let Action (cons let (cons NewStr (cons (cons shen.pair (cons (cons shen.tlhd (cons V4237 ())) (cons (cons shen.hdtl (cons V4237 ())) ()))) (cons (shen.syntax (tl V4236) NewStr V4238) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ()))))))))) (true (shen.f_error shen.check_stream))))

(defun shen.jump_stream (V4242 V4243 V4244) (cond ((cons? V4242) (let Test (cons cons? (cons (cons hd (cons V4243 ())) ())) (let Action (shen.syntax (tl V4242) (cons shen.pair (cons (cons shen.tlhd (cons V4243 ())) (cons (cons shen.hdtl (cons V4243 ())) ()))) V4244) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.jump_stream))))

(defun shen.semantics (V4246) (cond ((= () V4246) ()) ((shen.grammar_symbol? V4246) (cons shen.hdtl (cons (concat Parse_ V4246) ()))) ((variable? V4246) (concat Parse_ V4246)) ((cons? V4246) (map (lambda Z (shen.semantics Z)) V4246)) (true V4246)))

(defun shen.pair (V4249 V4250) (cons V4249 (cons V4250 ())))

(defun shen.hdtl (V4252) (hd (tl V4252)))

(defun shen.hdhd (V4254) (hd (hd V4254)))

(defun shen.tlhd (V4256) (tl (hd V4256)))

(defun shen.snd-or-fail (V4264) (cond ((and (cons? V4264) (and (cons? (tl V4264)) (= () (tl (tl V4264))))) (hd (tl V4264))) (true (fail))))

(defun fail () shen.fail!)(defun <!> (V4272) (cond ((and (cons? V4272) (and (cons? (tl V4272)) (= () (tl (tl V4272))))) (cons () (cons (hd V4272) ()))) (true (fail))))

(defun <e> (V4278) (cond ((and (cons? V4278) (and (cons? (tl V4278)) (= () (tl (tl V4278))))) (cons (hd V4278) (cons () ()))) (true (shen.f_error <e>))))



