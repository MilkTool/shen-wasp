"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.shen () (do (shen.credits) (shen.loop)))

(defun shen.loop () (do (shen.initialise_environment) (do (shen.prompt) (do (trap-error (shen.read-evaluate-print) (lambda E (shen.toplevel-display-exception E))) (shen.loop)))))

(defun shen.toplevel-display-exception (V3779) (pr (error-to-string V3779) (stoutput)))

(defun shen.credits () (do (shen.prhush "
Shen, copyright (C) 2010-2015 Mark Tarver
" (stoutput)) (do (shen.prhush (cn "www.shenlanguage.org, " (shen.app (value *version*) "
" shen.a)) (stoutput)) (do (shen.prhush (cn "running under " (shen.app (value *language*) (cn ", implementation: " (shen.app (value *implementation*) "" shen.a)) shen.a)) (stoutput)) (shen.prhush (cn "
port " (shen.app (value *port*) (cn " ported by " (shen.app (value *porters*) "
" shen.a)) shen.a)) (stoutput))))))

(defun shen.initialise_environment () (shen.multiple-set (cons shen.*call* (cons 0 (cons shen.*infs* (cons 0 (cons shen.*process-counter* (cons 0 (cons shen.*catch* (cons 0 ()))))))))))

(defun shen.multiple-set (V3781) (cond ((= () V3781) ()) ((and (cons? V3781) (cons? (tl V3781))) (do (set (hd V3781) (hd (tl V3781))) (shen.multiple-set (tl (tl V3781))))) (true (shen.f_error shen.multiple-set))))

(defun destroy (V3783) (declare V3783 symbol))

(set shen.*history* ())

(defun shen.read-evaluate-print () (let Lineread (shen.toplineread) (let History (value shen.*history*) (let NewLineread (shen.retrieve-from-history-if-needed Lineread History) (let NewHistory (shen.update_history NewLineread History) (let Parsed (fst NewLineread) (shen.toplevel Parsed)))))))

(defun shen.retrieve-from-history-if-needed (V3795 V3796) (cond ((and (tuple? V3795) (and (cons? (snd V3795)) (element? (hd (snd V3795)) (cons (shen.space) (cons (shen.newline) ()))))) (shen.retrieve-from-history-if-needed (@p (fst V3795) (tl (snd V3795))) V3796)) ((and (tuple? V3795) (and (cons? (snd V3795)) (and (cons? (tl (snd V3795))) (and (= () (tl (tl (snd V3795)))) (and (cons? V3796) (and (= (hd (snd V3795)) (shen.exclamation)) (= (hd (tl (snd V3795))) (shen.exclamation)))))))) (let PastPrint (shen.prbytes (snd (hd V3796))) (hd V3796))) ((and (tuple? V3795) (and (cons? (snd V3795)) (= (hd (snd V3795)) (shen.exclamation)))) (let Key? (shen.make-key (tl (snd V3795)) V3796) (let Find (head (shen.find-past-inputs Key? V3796)) (let PastPrint (shen.prbytes (snd Find)) Find)))) ((and (tuple? V3795) (and (cons? (snd V3795)) (and (= () (tl (snd V3795))) (= (hd (snd V3795)) (shen.percent))))) (do (shen.print-past-inputs (lambda X true) (reverse V3796) 0) (abort))) ((and (tuple? V3795) (and (cons? (snd V3795)) (= (hd (snd V3795)) (shen.percent)))) (let Key? (shen.make-key (tl (snd V3795)) V3796) (let Pastprint (shen.print-past-inputs Key? (reverse V3796) 0) (abort)))) (true V3795)))

(defun shen.percent () 37)

(defun shen.exclamation () 33)

(defun shen.prbytes (V3798) (do (shen.for-each (lambda Byte (pr (n->string Byte) (stoutput))) V3798) (nl 1)))

(defun shen.update_history (V3801 V3802) (set shen.*history* (cons V3801 V3802)))

(defun shen.toplineread () (shen.toplineread_loop (shen.read-char-code (stinput)) ()))

(defun shen.toplineread_loop (V3806 V3807) (cond ((= V3806 (shen.hat)) (simple-error "line read aborted")) ((element? V3806 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile (lambda X (shen.<st_input> X)) V3807 (lambda E shen.nextline)) (let It (shen.record-it V3807) (if (or (= Line shen.nextline) (empty? Line)) (shen.toplineread_loop (shen.read-char-code (stinput)) (append V3807 (cons V3806 ()))) (@p Line V3807))))) (true (shen.toplineread_loop (shen.read-char-code (stinput)) (if (= V3806 -1) V3807 (append V3807 (cons V3806 ())))))))

(defun shen.hat () 94)

(defun shen.newline () 10)

(defun shen.carriage-return () 13)

(defun tc (V3813) (cond ((= + V3813) (set shen.*tc* true)) ((= - V3813) (set shen.*tc* false)) (true (simple-error "tc expects a + or -"))))

(defun shen.prompt () (if (value shen.*tc*) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "+) " shen.a)) (stoutput)) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "-) " shen.a)) (stoutput))))

(defun shen.toplevel (V3815) (shen.toplevel_evaluate V3815 (value shen.*tc*)))

(defun shen.find-past-inputs (V3818 V3819) (let F (shen.find V3818 V3819) (if (empty? F) (simple-error "input not found
") F)))

(defun shen.make-key (V3822 V3823) (let Atom (hd (compile (lambda X (shen.<st_input> X)) V3822 (lambda E (if (cons? E) (simple-error (cn "parse error here: " (shen.app E "
" shen.s))) (simple-error "parse error
"))))) (if (integer? Atom) (lambda X (= X (nth (+ Atom 1) (reverse V3823)))) (lambda X (shen.prefix? V3822 (shen.trim-gubbins (snd X)))))))

(defun shen.trim-gubbins (V3825) (cond ((and (cons? V3825) (= (hd V3825) (shen.space))) (shen.trim-gubbins (tl V3825))) ((and (cons? V3825) (= (hd V3825) (shen.newline))) (shen.trim-gubbins (tl V3825))) ((and (cons? V3825) (= (hd V3825) (shen.carriage-return))) (shen.trim-gubbins (tl V3825))) ((and (cons? V3825) (= (hd V3825) (shen.tab))) (shen.trim-gubbins (tl V3825))) ((and (cons? V3825) (= (hd V3825) (shen.left-round))) (shen.trim-gubbins (tl V3825))) (true V3825)))

(defun shen.space () 32)

(defun shen.tab () 9)

(defun shen.left-round () 40)

(defun shen.find (V3834 V3835) (cond ((= () V3835) ()) ((and (cons? V3835) (V3834 (hd V3835))) (cons (hd V3835) (shen.find V3834 (tl V3835)))) ((cons? V3835) (shen.find V3834 (tl V3835))) (true (shen.f_error shen.find))))

(defun shen.prefix? (V3849 V3850) (cond ((= () V3849) true) ((and (cons? V3849) (and (cons? V3850) (= (hd V3850) (hd V3849)))) (shen.prefix? (tl V3849) (tl V3850))) (true false)))

(defun shen.print-past-inputs (V3862 V3863 V3864) (cond ((= () V3863) _) ((and (cons? V3863) (not (V3862 (hd V3863)))) (shen.print-past-inputs V3862 (tl V3863) (+ V3864 1))) ((and (cons? V3863) (tuple? (hd V3863))) (do (shen.prhush (shen.app V3864 ". " shen.a) (stoutput)) (do (shen.prbytes (snd (hd V3863))) (shen.print-past-inputs V3862 (tl V3863) (+ V3864 1))))) (true (shen.f_error shen.print-past-inputs))))

(defun shen.toplevel_evaluate (V3867 V3868) (cond ((and (cons? V3867) (and (cons? (tl V3867)) (and (= : (hd (tl V3867))) (and (cons? (tl (tl V3867))) (and (= () (tl (tl (tl V3867)))) (= true V3868)))))) (shen.typecheck-and-evaluate (hd V3867) (hd (tl (tl V3867))))) ((and (cons? V3867) (cons? (tl V3867))) (do (shen.toplevel_evaluate (cons (hd V3867) ()) V3868) (do (nl 1) (shen.toplevel_evaluate (tl V3867) V3868)))) ((and (cons? V3867) (and (= () (tl V3867)) (= true V3868))) (shen.typecheck-and-evaluate (hd V3867) (gensym A))) ((and (cons? V3867) (and (= () (tl V3867)) (= false V3868))) (let Eval (shen.eval-without-macros (hd V3867)) (print Eval))) (true (shen.f_error shen.toplevel_evaluate))))

(defun shen.typecheck-and-evaluate (V3871 V3872) (let Typecheck (shen.typecheck V3871 V3872) (if (= Typecheck false) (simple-error "type error
") (let Eval (shen.eval-without-macros V3871) (let Type (shen.pretty-type Typecheck) (shen.prhush (shen.app Eval (cn " : " (shen.app Type "" shen.r)) shen.s) (stoutput)))))))

(defun shen.pretty-type (V3874) (shen.mult_subst (value shen.*alphabet*) (shen.extract-pvars V3874) V3874))

(defun shen.extract-pvars (V3880) (cond ((shen.pvar? V3880) (cons V3880 ())) ((cons? V3880) (union (shen.extract-pvars (hd V3880)) (shen.extract-pvars (tl V3880)))) (true ())))

(defun shen.mult_subst (V3888 V3889 V3890) (cond ((= () V3888) V3890) ((= () V3889) V3890) ((and (cons? V3888) (cons? V3889)) (shen.mult_subst (tl V3888) (tl V3889) (subst (hd V3888) (hd V3889) V3890))) (true (shen.f_error shen.mult_subst))))



