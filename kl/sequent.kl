"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.datatype-error (V2473) (cond ((and (cons? V2473) (and (cons? (tl V2473)) (= () (tl (tl V2473))))) (simple-error (cn "datatype syntax error here:

 " (shen.app (shen.next-50 50 (hd V2473)) "
" shen.a)))) (true (shen.f_error shen.datatype-error))))

(defun shen.<datatype-rules> (V2475) (let YaccParse (let Parse_shen.<datatype-rule> (shen.<datatype-rule> V2475) (if (not (= (fail) Parse_shen.<datatype-rule>)) (let Parse_shen.<datatype-rules> (shen.<datatype-rules> Parse_shen.<datatype-rule>) (if (not (= (fail) Parse_shen.<datatype-rules>)) (shen.pair (hd Parse_shen.<datatype-rules>) (cons (shen.hdtl Parse_shen.<datatype-rule>) (shen.hdtl Parse_shen.<datatype-rules>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2475) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<datatype-rule> (V2477) (let YaccParse (let Parse_shen.<side-conditions> (shen.<side-conditions> V2477) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<singleunderline> (shen.<singleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<singleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<singleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.single (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<side-conditions> (shen.<side-conditions> V2477) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<doubleunderline> (shen.<doubleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<doubleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<doubleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.double (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) YaccParse)))

(defun shen.<side-conditions> (V2479) (let YaccParse (let Parse_shen.<side-condition> (shen.<side-condition> V2479) (if (not (= (fail) Parse_shen.<side-condition>)) (let Parse_shen.<side-conditions> (shen.<side-conditions> Parse_shen.<side-condition>) (if (not (= (fail) Parse_shen.<side-conditions>)) (shen.pair (hd Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<side-condition>) (shen.hdtl Parse_shen.<side-conditions>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2479) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<side-condition> (V2483) (let YaccParse (if (and (cons? (hd V2483)) (= if (shen.hdhd V2483))) (let NewStream2480 (shen.pair (shen.tlhd V2483) (shen.hdtl V2483)) (let Parse_shen.<expr> (shen.<expr> NewStream2480) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons if (cons (shen.hdtl Parse_shen.<expr>) ()))) (fail)))) (fail)) (if (= YaccParse (fail)) (if (and (cons? (hd V2483)) (= let (shen.hdhd V2483))) (let NewStream2481 (shen.pair (shen.tlhd V2483) (shen.hdtl V2483)) (let Parse_shen.<variable?> (shen.<variable?> NewStream2481) (if (not (= (fail) Parse_shen.<variable?>)) (let Parse_shen.<expr> (shen.<expr> Parse_shen.<variable?>) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons let (cons (shen.hdtl Parse_shen.<variable?>) (cons (shen.hdtl Parse_shen.<expr>) ())))) (fail))) (fail)))) (fail)) YaccParse)))

(defun shen.<variable?> (V2485) (if (cons? (hd V2485)) (let Parse_X (shen.hdhd V2485) (if (variable? Parse_X) (shen.pair (hd (shen.pair (shen.tlhd V2485) (shen.hdtl V2485))) Parse_X) (fail))) (fail)))

(defun shen.<expr> (V2487) (if (cons? (hd V2487)) (let Parse_X (shen.hdhd V2487) (if (not (or (element? Parse_X (cons >> (cons ; ()))) (or (shen.singleunderline? Parse_X) (shen.doubleunderline? Parse_X)))) (shen.pair (hd (shen.pair (shen.tlhd V2487) (shen.hdtl V2487))) (shen.remove-bar Parse_X)) (fail))) (fail)))

(defun shen.remove-bar (V2489) (cond ((and (cons? V2489) (and (cons? (tl V2489)) (and (cons? (tl (tl V2489))) (and (= () (tl (tl (tl V2489)))) (= (hd (tl V2489)) bar!))))) (cons (hd V2489) (hd (tl (tl V2489))))) ((cons? V2489) (cons (shen.remove-bar (hd V2489)) (shen.remove-bar (tl V2489)))) (true V2489)))

(defun shen.<premises> (V2491) (let YaccParse (let Parse_shen.<premise> (shen.<premise> V2491) (if (not (= (fail) Parse_shen.<premise>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<premise>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<semicolon-symbol>) (if (not (= (fail) Parse_shen.<premises>)) (shen.pair (hd Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<premise>) (shen.hdtl Parse_shen.<premises>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2491) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<semicolon-symbol> (V2493) (if (cons? (hd V2493)) (let Parse_X (shen.hdhd V2493) (if (= Parse_X ;) (shen.pair (hd (shen.pair (shen.tlhd V2493) (shen.hdtl V2493))) shen.skip) (fail))) (fail)))

(defun shen.<premise> (V2497) (let YaccParse (if (and (cons? (hd V2497)) (= ! (shen.hdhd V2497))) (let NewStream2494 (shen.pair (shen.tlhd V2497) (shen.hdtl V2497)) (shen.pair (hd NewStream2494) !)) (fail)) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V2497) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (shen.hdhd Parse_shen.<formulae>))) (let NewStream2495 (shen.pair (shen.tlhd Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formulae>)) (let Parse_shen.<formula> (shen.<formula> NewStream2495) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail)))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V2497) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) YaccParse)) YaccParse)))

(defun shen.<conclusion> (V2500) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V2500) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (shen.hdhd Parse_shen.<formulae>))) (let NewStream2498 (shen.pair (shen.tlhd Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formulae>)) (let Parse_shen.<formula> (shen.<formula> NewStream2498) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail)))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V2500) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) YaccParse)))

(defun shen.sequent (V2503 V2504) (@p V2503 V2504))

(defun shen.<formulae> (V2506) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V2506) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<comma-symbol> (shen.<comma-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<comma-symbol>)) (let Parse_shen.<formulae> (shen.<formulae> Parse_shen.<comma-symbol>) (if (not (= (fail) Parse_shen.<formulae>)) (shen.pair (hd Parse_shen.<formulae>) (cons (shen.hdtl Parse_shen.<formula>) (shen.hdtl Parse_shen.<formulae>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V2506) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (cons (shen.hdtl Parse_shen.<formula>) ())) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2506) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)))

(defun shen.<comma-symbol> (V2508) (if (cons? (hd V2508)) (let Parse_X (shen.hdhd V2508) (if (= Parse_X (intern ",")) (shen.pair (hd (shen.pair (shen.tlhd V2508) (shen.hdtl V2508))) shen.skip) (fail))) (fail)))

(defun shen.<formula> (V2511) (let YaccParse (let Parse_shen.<expr> (shen.<expr> V2511) (if (not (= (fail) Parse_shen.<expr>)) (if (and (cons? (hd Parse_shen.<expr>)) (= : (shen.hdhd Parse_shen.<expr>))) (let NewStream2509 (shen.pair (shen.tlhd Parse_shen.<expr>) (shen.hdtl Parse_shen.<expr>)) (let Parse_shen.<type> (shen.<type> NewStream2509) (if (not (= (fail) Parse_shen.<type>)) (shen.pair (hd Parse_shen.<type>) (cons (shen.curry (shen.hdtl Parse_shen.<expr>)) (cons : (cons (shen.demodulate (shen.hdtl Parse_shen.<type>)) ())))) (fail)))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<expr> (shen.<expr> V2511) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.hdtl Parse_shen.<expr>)) (fail))) YaccParse)))

(defun shen.<type> (V2513) (let Parse_shen.<expr> (shen.<expr> V2513) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.curry-type (shen.hdtl Parse_shen.<expr>))) (fail))))

(defun shen.<doubleunderline> (V2515) (if (cons? (hd V2515)) (let Parse_X (shen.hdhd V2515) (if (shen.doubleunderline? Parse_X) (shen.pair (hd (shen.pair (shen.tlhd V2515) (shen.hdtl V2515))) Parse_X) (fail))) (fail)))

(defun shen.<singleunderline> (V2517) (if (cons? (hd V2517)) (let Parse_X (shen.hdhd V2517) (if (shen.singleunderline? Parse_X) (shen.pair (hd (shen.pair (shen.tlhd V2517) (shen.hdtl V2517))) Parse_X) (fail))) (fail)))

(defun shen.singleunderline? (V2519) (and (symbol? V2519) (shen.sh? (str V2519))))

(defun shen.sh? (V2521) (cond ((= "_" V2521) true) (true (and (= (pos V2521 0) "_") (shen.sh? (tlstr V2521))))))

(defun shen.doubleunderline? (V2523) (and (symbol? V2523) (shen.dh? (str V2523))))

(defun shen.dh? (V2525) (cond ((= "=" V2525) true) (true (and (= (pos V2525 0) "=") (shen.dh? (tlstr V2525))))))

(defun shen.process-datatype (V2528 V2529) (shen.remember-datatype (shen.s-prolog (shen.rules->horn-clauses V2528 V2529))))

(defun shen.remember-datatype (V2535) (cond ((cons? V2535) (do (set shen.*datatypes* (adjoin (hd V2535) (value shen.*datatypes*))) (do (set shen.*alldatatypes* (adjoin (hd V2535) (value shen.*alldatatypes*))) (hd V2535)))) (true (shen.f_error shen.remember-datatype))))

(defun shen.rules->horn-clauses (V2540 V2541) (cond ((= () V2541) ()) ((and (cons? V2541) (and (tuple? (hd V2541)) (= shen.single (fst (hd V2541))))) (cons (shen.rule->horn-clause V2540 (snd (hd V2541))) (shen.rules->horn-clauses V2540 (tl V2541)))) ((and (cons? V2541) (and (tuple? (hd V2541)) (= shen.double (fst (hd V2541))))) (shen.rules->horn-clauses V2540 (append (shen.double->singles (snd (hd V2541))) (tl V2541)))) (true (shen.f_error shen.rules->horn-clauses))))

(defun shen.double->singles (V2543) (cons (shen.right-rule V2543) (cons (shen.left-rule V2543) ())))

(defun shen.right-rule (V2545) (@p shen.single V2545))

(defun shen.left-rule (V2547) (cond ((and (cons? V2547) (and (cons? (tl V2547)) (and (cons? (tl (tl V2547))) (and (tuple? (hd (tl (tl V2547)))) (and (= () (fst (hd (tl (tl V2547))))) (= () (tl (tl (tl V2547))))))))) (let Q (gensym Qv) (let NewConclusion (@p (cons (snd (hd (tl (tl V2547)))) ()) Q) (let NewPremises (cons (@p (map (lambda X (shen.right->left X)) (hd (tl V2547))) Q) ()) (@p shen.single (cons (hd V2547) (cons NewPremises (cons NewConclusion ())))))))) (true (shen.f_error shen.left-rule))))

(defun shen.right->left (V2553) (cond ((and (tuple? V2553) (= () (fst V2553))) (snd V2553)) (true (simple-error "syntax error with ==========
"))))

(defun shen.rule->horn-clause (V2556 V2557) (cond ((and (cons? V2557) (and (cons? (tl V2557)) (and (cons? (tl (tl V2557))) (and (tuple? (hd (tl (tl V2557)))) (= () (tl (tl (tl V2557)))))))) (cons (shen.rule->horn-clause-head V2556 (snd (hd (tl (tl V2557))))) (cons :- (cons (shen.rule->horn-clause-body (hd V2557) (hd (tl V2557)) (fst (hd (tl (tl V2557))))) ())))) (true (shen.f_error shen.rule->horn-clause))))

(defun shen.rule->horn-clause-head (V2560 V2561) (cons V2560 (cons (shen.mode-ify V2561) (cons Context_1957 ()))))

(defun shen.mode-ify (V2563) (cond ((and (cons? V2563) (and (cons? (tl V2563)) (and (= : (hd (tl V2563))) (and (cons? (tl (tl V2563))) (= () (tl (tl (tl V2563)))))))) (cons mode (cons (cons (hd V2563) (cons : (cons (cons mode (cons (hd (tl (tl V2563))) (cons + ()))) ()))) (cons - ())))) (true V2563)))

(defun shen.rule->horn-clause-body (V2567 V2568 V2569) (let Variables (map (lambda X (shen.extract_vars X)) V2569) (let Predicates (map (lambda X (gensym shen.cl)) V2569) (let SearchLiterals (shen.construct-search-literals Predicates Variables Context_1957 Context1_1957) (let SearchClauses (shen.construct-search-clauses Predicates V2569 Variables) (let SideLiterals (shen.construct-side-literals V2567) (let PremissLiterals (map (lambda X (shen.construct-premiss-literal X (empty? V2569))) V2568) (append SearchLiterals (append SideLiterals PremissLiterals)))))))))

(defun shen.construct-search-literals (V2578 V2579 V2580 V2581) (cond ((and (= () V2578) (= () V2579)) ()) (true (shen.csl-help V2578 V2579 V2580 V2581))))

(defun shen.csl-help (V2588 V2589 V2590 V2591) (cond ((and (= () V2588) (= () V2589)) (cons (cons bind (cons ContextOut_1957 (cons V2590 ()))) ())) ((and (cons? V2588) (cons? V2589)) (cons (cons (hd V2588) (cons V2590 (cons V2591 (hd V2589)))) (shen.csl-help (tl V2588) (tl V2589) V2591 (gensym Context)))) (true (shen.f_error shen.csl-help))))

(defun shen.construct-search-clauses (V2595 V2596 V2597) (cond ((and (= () V2595) (and (= () V2596) (= () V2597))) shen.skip) ((and (cons? V2595) (and (cons? V2596) (cons? V2597))) (do (shen.construct-search-clause (hd V2595) (hd V2596) (hd V2597)) (shen.construct-search-clauses (tl V2595) (tl V2596) (tl V2597)))) (true (shen.f_error shen.construct-search-clauses))))

(defun shen.construct-search-clause (V2601 V2602 V2603) (shen.s-prolog (cons (shen.construct-base-search-clause V2601 V2602 V2603) (cons (shen.construct-recursive-search-clause V2601 V2602 V2603) ()))))

(defun shen.construct-base-search-clause (V2607 V2608 V2609) (cons (cons V2607 (cons (cons (shen.mode-ify V2608) In_1957) (cons In_1957 V2609))) (cons :- (cons () ()))))

(defun shen.construct-recursive-search-clause (V2613 V2614 V2615) (cons (cons V2613 (cons (cons Assumption_1957 Assumptions_1957) (cons (cons Assumption_1957 Out_1957) V2615))) (cons :- (cons (cons (cons V2613 (cons Assumptions_1957 (cons Out_1957 V2615))) ()) ()))))

(defun shen.construct-side-literals (V2621) (cond ((= () V2621) ()) ((and (cons? V2621) (and (cons? (hd V2621)) (and (= if (hd (hd V2621))) (and (cons? (tl (hd V2621))) (= () (tl (tl (hd V2621)))))))) (cons (cons when (tl (hd V2621))) (shen.construct-side-literals (tl V2621)))) ((and (cons? V2621) (and (cons? (hd V2621)) (and (= let (hd (hd V2621))) (and (cons? (tl (hd V2621))) (and (cons? (tl (tl (hd V2621)))) (= () (tl (tl (tl (hd V2621)))))))))) (cons (cons is (tl (hd V2621))) (shen.construct-side-literals (tl V2621)))) ((cons? V2621) (shen.construct-side-literals (tl V2621))) (true (shen.f_error shen.construct-side-literals))))

(defun shen.construct-premiss-literal (V2628 V2629) (cond ((tuple? V2628) (cons shen.t* (cons (shen.recursive_cons_form (snd V2628)) (cons (shen.construct-context V2629 (fst V2628)) ())))) ((= ! V2628) (cons cut (cons Throwcontrol ()))) (true (shen.f_error shen.construct-premiss-literal))))

(defun shen.construct-context (V2632 V2633) (cond ((and (= true V2632) (= () V2633)) Context_1957) ((and (= false V2632) (= () V2633)) ContextOut_1957) ((cons? V2633) (cons cons (cons (shen.recursive_cons_form (hd V2633)) (cons (shen.construct-context V2632 (tl V2633)) ())))) (true (shen.f_error shen.construct-context))))

(defun shen.recursive_cons_form (V2635) (cond ((cons? V2635) (cons cons (cons (shen.recursive_cons_form (hd V2635)) (cons (shen.recursive_cons_form (tl V2635)) ())))) (true V2635)))

(defun preclude (V2637) (shen.preclude-h (map (lambda X (shen.intern-type X)) V2637)))

(defun shen.preclude-h (V2639) (let FilterDatatypes (set shen.*datatypes* (difference (value shen.*datatypes*) V2639)) (value shen.*datatypes*)))

(defun include (V2641) (shen.include-h (map (lambda X (shen.intern-type X)) V2641)))

(defun shen.include-h (V2643) (let ValidTypes (intersection V2643 (value shen.*alldatatypes*)) (let NewDatatypes (set shen.*datatypes* (union ValidTypes (value shen.*datatypes*))) (value shen.*datatypes*))))

(defun preclude-all-but (V2645) (shen.preclude-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V2645))))

(defun include-all-but (V2647) (shen.include-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V2647))))

(defun shen.synonyms-help (V2653) (cond ((= () V2653) (shen.update-demodulation-function (value shen.*tc*) (mapcan (lambda X (shen.demod-rule X)) (value shen.*synonyms*)))) ((and (cons? V2653) (cons? (tl V2653))) (let Vs (difference (shen.extract_vars (hd (tl V2653))) (shen.extract_vars (hd V2653))) (if (empty? Vs) (do (shen.pushnew (cons (hd V2653) (cons (hd (tl V2653)) ())) shen.*synonyms*) (shen.synonyms-help (tl (tl V2653)))) (shen.free_variable_warnings (hd (tl V2653)) Vs)))) (true (simple-error "odd number of synonyms
"))))

(defun shen.pushnew (V2656 V2657) (if (element? V2656 (value V2657)) (value V2657) (set V2657 (cons V2656 (value V2657)))))

(defun shen.demod-rule (V2659) (cond ((and (cons? V2659) (and (cons? (tl V2659)) (= () (tl (tl V2659))))) (cons (shen.rcons_form (hd V2659)) (cons -> (cons (shen.rcons_form (hd (tl V2659))) ())))) (true (shen.f_error shen.demod-rule))))

(defun shen.lambda-of-defun (V2665) (cond ((and (cons? V2665) (and (= defun (hd V2665)) (and (cons? (tl V2665)) (and (cons? (tl (tl V2665))) (and (cons? (hd (tl (tl V2665)))) (and (= () (tl (hd (tl (tl V2665))))) (and (cons? (tl (tl (tl V2665)))) (= () (tl (tl (tl (tl V2665)))))))))))) (eval (cons /. (cons (hd (hd (tl (tl V2665)))) (tl (tl (tl V2665))))))) (true (shen.f_error shen.lambda-of-defun))))

(defun shen.update-demodulation-function (V2668 V2669) (do (tc -) (do (set shen.*demodulation-function* (shen.lambda-of-defun (shen.elim-def (cons define (cons shen.demod (append V2669 (shen.default-rule))))))) (do (if V2668 (tc +) shen.skip) synonyms))))

(defun shen.default-rule () (cons X (cons -> (cons X ()))))



