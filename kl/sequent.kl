"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun shen.datatype-error (V2825) (cond ((and (cons? V2825) (and (cons? (tl V2825)) (= () (tl (tl V2825))))) (simple-error (cn "datatype syntax error here:

 " (shen.app (shen.next-50 50 (hd V2825)) "
" shen.a)))) (true (shen.f_error shen.datatype-error))))

(defun shen.<datatype-rules> (V2827) (let YaccParse (let Parse_shen.<datatype-rule> (shen.<datatype-rule> V2827) (if (not (= (fail) Parse_shen.<datatype-rule>)) (let Parse_shen.<datatype-rules> (shen.<datatype-rules> Parse_shen.<datatype-rule>) (if (not (= (fail) Parse_shen.<datatype-rules>)) (shen.pair (hd Parse_shen.<datatype-rules>) (cons (shen.hdtl Parse_shen.<datatype-rule>) (shen.hdtl Parse_shen.<datatype-rules>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2827) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<datatype-rule> (V2829) (let YaccParse (let Parse_shen.<side-conditions> (shen.<side-conditions> V2829) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<singleunderline> (shen.<singleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<singleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<singleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.single (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<side-conditions> (shen.<side-conditions> V2829) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<doubleunderline> (shen.<doubleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<doubleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<doubleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.double (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) YaccParse)))

(defun shen.<side-conditions> (V2831) (let YaccParse (let Parse_shen.<side-condition> (shen.<side-condition> V2831) (if (not (= (fail) Parse_shen.<side-condition>)) (let Parse_shen.<side-conditions> (shen.<side-conditions> Parse_shen.<side-condition>) (if (not (= (fail) Parse_shen.<side-conditions>)) (shen.pair (hd Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<side-condition>) (shen.hdtl Parse_shen.<side-conditions>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2831) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<side-condition> (V2835) (let YaccParse (if (and (cons? (hd V2835)) (= if (shen.hdhd V2835))) (let NewStream2832 (shen.pair (shen.tlhd V2835) (shen.hdtl V2835)) (let Parse_shen.<expr> (shen.<expr> NewStream2832) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons if (cons (shen.hdtl Parse_shen.<expr>) ()))) (fail)))) (fail)) (if (= YaccParse (fail)) (if (and (cons? (hd V2835)) (= let (shen.hdhd V2835))) (let NewStream2833 (shen.pair (shen.tlhd V2835) (shen.hdtl V2835)) (let Parse_shen.<variable?> (shen.<variable?> NewStream2833) (if (not (= (fail) Parse_shen.<variable?>)) (let Parse_shen.<expr> (shen.<expr> Parse_shen.<variable?>) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons let (cons (shen.hdtl Parse_shen.<variable?>) (cons (shen.hdtl Parse_shen.<expr>) ())))) (fail))) (fail)))) (fail)) YaccParse)))

(defun shen.<variable?> (V2837) (if (cons? (hd V2837)) (let Parse_X (shen.hdhd V2837) (if (variable? Parse_X) (shen.pair (hd (shen.pair (shen.tlhd V2837) (shen.hdtl V2837))) Parse_X) (fail))) (fail)))

(defun shen.<expr> (V2839) (if (cons? (hd V2839)) (let Parse_X (shen.hdhd V2839) (if (not (or (element? Parse_X (cons >> (cons ; ()))) (or (shen.singleunderline? Parse_X) (shen.doubleunderline? Parse_X)))) (shen.pair (hd (shen.pair (shen.tlhd V2839) (shen.hdtl V2839))) (shen.remove-bar Parse_X)) (fail))) (fail)))

(defun shen.remove-bar (V2841) (cond ((and (cons? V2841) (and (cons? (tl V2841)) (and (cons? (tl (tl V2841))) (and (= () (tl (tl (tl V2841)))) (= (hd (tl V2841)) bar!))))) (cons (hd V2841) (hd (tl (tl V2841))))) ((cons? V2841) (cons (shen.remove-bar (hd V2841)) (shen.remove-bar (tl V2841)))) (true V2841)))

(defun shen.<premises> (V2843) (let YaccParse (let Parse_shen.<premise> (shen.<premise> V2843) (if (not (= (fail) Parse_shen.<premise>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<premise>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<semicolon-symbol>) (if (not (= (fail) Parse_shen.<premises>)) (shen.pair (hd Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<premise>) (shen.hdtl Parse_shen.<premises>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2843) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<semicolon-symbol> (V2845) (if (cons? (hd V2845)) (let Parse_X (shen.hdhd V2845) (if (= Parse_X ;) (shen.pair (hd (shen.pair (shen.tlhd V2845) (shen.hdtl V2845))) shen.skip) (fail))) (fail)))

(defun shen.<premise> (V2849) (let YaccParse (if (and (cons? (hd V2849)) (= ! (shen.hdhd V2849))) (let NewStream2846 (shen.pair (shen.tlhd V2849) (shen.hdtl V2849)) (shen.pair (hd NewStream2846) !)) (fail)) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V2849) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (shen.hdhd Parse_shen.<formulae>))) (let NewStream2847 (shen.pair (shen.tlhd Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formulae>)) (let Parse_shen.<formula> (shen.<formula> NewStream2847) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail)))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V2849) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) YaccParse)) YaccParse)))

(defun shen.<conclusion> (V2852) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V2852) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (shen.hdhd Parse_shen.<formulae>))) (let NewStream2850 (shen.pair (shen.tlhd Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formulae>)) (let Parse_shen.<formula> (shen.<formula> NewStream2850) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail)))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V2852) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) YaccParse)))

(defun shen.sequent (V2855 V2856) (@p V2855 V2856))

(defun shen.<formulae> (V2858) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V2858) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<comma-symbol> (shen.<comma-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<comma-symbol>)) (let Parse_shen.<formulae> (shen.<formulae> Parse_shen.<comma-symbol>) (if (not (= (fail) Parse_shen.<formulae>)) (shen.pair (hd Parse_shen.<formulae>) (cons (shen.hdtl Parse_shen.<formula>) (shen.hdtl Parse_shen.<formulae>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V2858) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (cons (shen.hdtl Parse_shen.<formula>) ())) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2858) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)))

(defun shen.<comma-symbol> (V2860) (if (cons? (hd V2860)) (let Parse_X (shen.hdhd V2860) (if (= Parse_X (intern ",")) (shen.pair (hd (shen.pair (shen.tlhd V2860) (shen.hdtl V2860))) shen.skip) (fail))) (fail)))

(defun shen.<formula> (V2863) (let YaccParse (let Parse_shen.<expr> (shen.<expr> V2863) (if (not (= (fail) Parse_shen.<expr>)) (if (and (cons? (hd Parse_shen.<expr>)) (= : (shen.hdhd Parse_shen.<expr>))) (let NewStream2861 (shen.pair (shen.tlhd Parse_shen.<expr>) (shen.hdtl Parse_shen.<expr>)) (let Parse_shen.<type> (shen.<type> NewStream2861) (if (not (= (fail) Parse_shen.<type>)) (shen.pair (hd Parse_shen.<type>) (cons (shen.curry (shen.hdtl Parse_shen.<expr>)) (cons : (cons (shen.demodulate (shen.hdtl Parse_shen.<type>)) ())))) (fail)))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<expr> (shen.<expr> V2863) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.hdtl Parse_shen.<expr>)) (fail))) YaccParse)))

(defun shen.<type> (V2865) (let Parse_shen.<expr> (shen.<expr> V2865) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.curry-type (shen.hdtl Parse_shen.<expr>))) (fail))))

(defun shen.<doubleunderline> (V2867) (if (cons? (hd V2867)) (let Parse_X (shen.hdhd V2867) (if (shen.doubleunderline? Parse_X) (shen.pair (hd (shen.pair (shen.tlhd V2867) (shen.hdtl V2867))) Parse_X) (fail))) (fail)))

(defun shen.<singleunderline> (V2869) (if (cons? (hd V2869)) (let Parse_X (shen.hdhd V2869) (if (shen.singleunderline? Parse_X) (shen.pair (hd (shen.pair (shen.tlhd V2869) (shen.hdtl V2869))) Parse_X) (fail))) (fail)))

(defun shen.singleunderline? (V2871) (and (symbol? V2871) (shen.sh? (str V2871))))

(defun shen.sh? (V2873) (cond ((= "_" V2873) true) (true (and (= (pos V2873 0) "_") (shen.sh? (tlstr V2873))))))

(defun shen.doubleunderline? (V2875) (and (symbol? V2875) (shen.dh? (str V2875))))

(defun shen.dh? (V2877) (cond ((= "=" V2877) true) (true (and (= (pos V2877 0) "=") (shen.dh? (tlstr V2877))))))

(defun shen.process-datatype (V2880 V2881) (shen.remember-datatype (shen.s-prolog (shen.rules->horn-clauses V2880 V2881))))

(defun shen.remember-datatype (V2887) (cond ((cons? V2887) (do (set shen.*datatypes* (adjoin (hd V2887) (value shen.*datatypes*))) (do (set shen.*alldatatypes* (adjoin (hd V2887) (value shen.*alldatatypes*))) (hd V2887)))) (true (shen.f_error shen.remember-datatype))))

(defun shen.rules->horn-clauses (V2892 V2893) (cond ((= () V2893) ()) ((and (cons? V2893) (and (tuple? (hd V2893)) (= shen.single (fst (hd V2893))))) (cons (shen.rule->horn-clause V2892 (snd (hd V2893))) (shen.rules->horn-clauses V2892 (tl V2893)))) ((and (cons? V2893) (and (tuple? (hd V2893)) (= shen.double (fst (hd V2893))))) (shen.rules->horn-clauses V2892 (append (shen.double->singles (snd (hd V2893))) (tl V2893)))) (true (shen.f_error shen.rules->horn-clauses))))

(defun shen.double->singles (V2895) (cons (shen.right-rule V2895) (cons (shen.left-rule V2895) ())))

(defun shen.right-rule (V2897) (@p shen.single V2897))

(defun shen.left-rule (V2899) (cond ((and (cons? V2899) (and (cons? (tl V2899)) (and (cons? (tl (tl V2899))) (and (tuple? (hd (tl (tl V2899)))) (and (= () (fst (hd (tl (tl V2899))))) (= () (tl (tl (tl V2899))))))))) (let Q (gensym Qv) (let NewConclusion (@p (cons (snd (hd (tl (tl V2899)))) ()) Q) (let NewPremises (cons (@p (map (lambda X (shen.right->left X)) (hd (tl V2899))) Q) ()) (@p shen.single (cons (hd V2899) (cons NewPremises (cons NewConclusion ())))))))) (true (shen.f_error shen.left-rule))))

(defun shen.right->left (V2905) (cond ((and (tuple? V2905) (= () (fst V2905))) (snd V2905)) (true (simple-error "syntax error with ==========
"))))

(defun shen.rule->horn-clause (V2908 V2909) (cond ((and (cons? V2909) (and (cons? (tl V2909)) (and (cons? (tl (tl V2909))) (and (tuple? (hd (tl (tl V2909)))) (= () (tl (tl (tl V2909)))))))) (cons (shen.rule->horn-clause-head V2908 (snd (hd (tl (tl V2909))))) (cons :- (cons (shen.rule->horn-clause-body (hd V2909) (hd (tl V2909)) (fst (hd (tl (tl V2909))))) ())))) (true (shen.f_error shen.rule->horn-clause))))

(defun shen.rule->horn-clause-head (V2912 V2913) (cons V2912 (cons (shen.mode-ify V2913) (cons Context_1957 ()))))

(defun shen.mode-ify (V2915) (cond ((and (cons? V2915) (and (cons? (tl V2915)) (and (= : (hd (tl V2915))) (and (cons? (tl (tl V2915))) (= () (tl (tl (tl V2915)))))))) (cons mode (cons (cons (hd V2915) (cons : (cons (cons mode (cons (hd (tl (tl V2915))) (cons + ()))) ()))) (cons - ())))) (true V2915)))

(defun shen.rule->horn-clause-body (V2919 V2920 V2921) (let Variables (map (lambda X (shen.extract_vars X)) V2921) (let Predicates (map (lambda X (gensym shen.cl)) V2921) (let SearchLiterals (shen.construct-search-literals Predicates Variables Context_1957 Context1_1957) (let SearchClauses (shen.construct-search-clauses Predicates V2921 Variables) (let SideLiterals (shen.construct-side-literals V2919) (let PremissLiterals (map (lambda X (shen.construct-premiss-literal X (empty? V2921))) V2920) (append SearchLiterals (append SideLiterals PremissLiterals)))))))))

(defun shen.construct-search-literals (V2930 V2931 V2932 V2933) (cond ((and (= () V2930) (= () V2931)) ()) (true (shen.csl-help V2930 V2931 V2932 V2933))))

(defun shen.csl-help (V2940 V2941 V2942 V2943) (cond ((and (= () V2940) (= () V2941)) (cons (cons bind (cons ContextOut_1957 (cons V2942 ()))) ())) ((and (cons? V2940) (cons? V2941)) (cons (cons (hd V2940) (cons V2942 (cons V2943 (hd V2941)))) (shen.csl-help (tl V2940) (tl V2941) V2943 (gensym Context)))) (true (shen.f_error shen.csl-help))))

(defun shen.construct-search-clauses (V2947 V2948 V2949) (cond ((and (= () V2947) (and (= () V2948) (= () V2949))) shen.skip) ((and (cons? V2947) (and (cons? V2948) (cons? V2949))) (do (shen.construct-search-clause (hd V2947) (hd V2948) (hd V2949)) (shen.construct-search-clauses (tl V2947) (tl V2948) (tl V2949)))) (true (shen.f_error shen.construct-search-clauses))))

(defun shen.construct-search-clause (V2953 V2954 V2955) (shen.s-prolog (cons (shen.construct-base-search-clause V2953 V2954 V2955) (cons (shen.construct-recursive-search-clause V2953 V2954 V2955) ()))))

(defun shen.construct-base-search-clause (V2959 V2960 V2961) (cons (cons V2959 (cons (cons (shen.mode-ify V2960) In_1957) (cons In_1957 V2961))) (cons :- (cons () ()))))

(defun shen.construct-recursive-search-clause (V2965 V2966 V2967) (cons (cons V2965 (cons (cons Assumption_1957 Assumptions_1957) (cons (cons Assumption_1957 Out_1957) V2967))) (cons :- (cons (cons (cons V2965 (cons Assumptions_1957 (cons Out_1957 V2967))) ()) ()))))

(defun shen.construct-side-literals (V2973) (cond ((= () V2973) ()) ((and (cons? V2973) (and (cons? (hd V2973)) (and (= if (hd (hd V2973))) (and (cons? (tl (hd V2973))) (= () (tl (tl (hd V2973)))))))) (cons (cons when (tl (hd V2973))) (shen.construct-side-literals (tl V2973)))) ((and (cons? V2973) (and (cons? (hd V2973)) (and (= let (hd (hd V2973))) (and (cons? (tl (hd V2973))) (and (cons? (tl (tl (hd V2973)))) (= () (tl (tl (tl (hd V2973)))))))))) (cons (cons is (tl (hd V2973))) (shen.construct-side-literals (tl V2973)))) ((cons? V2973) (shen.construct-side-literals (tl V2973))) (true (shen.f_error shen.construct-side-literals))))

(defun shen.construct-premiss-literal (V2980 V2981) (cond ((tuple? V2980) (cons shen.t* (cons (shen.recursive_cons_form (snd V2980)) (cons (shen.construct-context V2981 (fst V2980)) ())))) ((= ! V2980) (cons cut (cons Throwcontrol ()))) (true (shen.f_error shen.construct-premiss-literal))))

(defun shen.construct-context (V2984 V2985) (cond ((and (= true V2984) (= () V2985)) Context_1957) ((and (= false V2984) (= () V2985)) ContextOut_1957) ((cons? V2985) (cons cons (cons (shen.recursive_cons_form (hd V2985)) (cons (shen.construct-context V2984 (tl V2985)) ())))) (true (shen.f_error shen.construct-context))))

(defun shen.recursive_cons_form (V2987) (cond ((cons? V2987) (cons cons (cons (shen.recursive_cons_form (hd V2987)) (cons (shen.recursive_cons_form (tl V2987)) ())))) (true V2987)))

(defun preclude (V2989) (shen.preclude-h (map (lambda X (shen.intern-type X)) V2989)))

(defun shen.preclude-h (V2991) (let FilterDatatypes (set shen.*datatypes* (difference (value shen.*datatypes*) V2991)) (value shen.*datatypes*)))

(defun include (V2993) (shen.include-h (map (lambda X (shen.intern-type X)) V2993)))

(defun shen.include-h (V2995) (let ValidTypes (intersection V2995 (value shen.*alldatatypes*)) (let NewDatatypes (set shen.*datatypes* (union ValidTypes (value shen.*datatypes*))) (value shen.*datatypes*))))

(defun preclude-all-but (V2997) (shen.preclude-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V2997))))

(defun include-all-but (V2999) (shen.include-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V2999))))

(defun shen.synonyms-help (V3005) (cond ((= () V3005) (shen.update-demodulation-function (value shen.*tc*) (mapcan (lambda X (shen.demod-rule X)) (value shen.*synonyms*)))) ((and (cons? V3005) (cons? (tl V3005))) (let Vs (difference (shen.extract_vars (hd (tl V3005))) (shen.extract_vars (hd V3005))) (if (empty? Vs) (do (shen.pushnew (cons (hd V3005) (cons (hd (tl V3005)) ())) shen.*synonyms*) (shen.synonyms-help (tl (tl V3005)))) (shen.free_variable_warnings (hd (tl V3005)) Vs)))) (true (simple-error "odd number of synonyms
"))))

(defun shen.pushnew (V3008 V3009) (if (element? V3008 (value V3009)) (value V3009) (set V3009 (cons V3008 (value V3009)))))

(defun shen.demod-rule (V3011) (cond ((and (cons? V3011) (and (cons? (tl V3011)) (= () (tl (tl V3011))))) (cons (shen.rcons_form (hd V3011)) (cons -> (cons (shen.rcons_form (hd (tl V3011))) ())))) (true (shen.f_error shen.demod-rule))))

(defun shen.lambda-of-defun (V3017) (cond ((and (cons? V3017) (and (= defun (hd V3017)) (and (cons? (tl V3017)) (and (cons? (tl (tl V3017))) (and (cons? (hd (tl (tl V3017)))) (and (= () (tl (hd (tl (tl V3017))))) (and (cons? (tl (tl (tl V3017)))) (= () (tl (tl (tl (tl V3017)))))))))))) (eval (cons /. (cons (hd (hd (tl (tl V3017)))) (tl (tl (tl V3017))))))) (true (shen.f_error shen.lambda-of-defun))))

(defun shen.update-demodulation-function (V3020 V3021) (do (tc -) (do (set shen.*demodulation-function* (shen.lambda-of-defun (shen.elim-def (cons define (cons shen.demod (append V3021 (shen.default-rule))))))) (do (if V3020 (tc +) shen.skip) synonyms))))

(defun shen.default-rule () (cons X (cons -> (cons X ()))))



