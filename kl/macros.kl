"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun macroexpand (V1851) (let Y (shen.compose (value *macros*) V1851) (if (= V1851 Y) V1851 (shen.walk (lambda Z (macroexpand Z)) Y))))

(defun shen.error-macro (V1853) (cond ((and (cons? V1853) (and (= error (hd V1853)) (cons? (tl V1853)))) (cons simple-error (cons (shen.mkstr (hd (tl V1853)) (tl (tl V1853))) ()))) (true V1853)))

(defun shen.output-macro (V1855) (cond ((and (cons? V1855) (and (= output (hd V1855)) (cons? (tl V1855)))) (cons shen.prhush (cons (shen.mkstr (hd (tl V1855)) (tl (tl V1855))) (cons (cons stoutput ()) ())))) ((and (cons? V1855) (and (= pr (hd V1855)) (and (cons? (tl V1855)) (= () (tl (tl V1855)))))) (cons pr (cons (hd (tl V1855)) (cons (cons stoutput ()) ())))) (true V1855)))

(defun shen.make-string-macro (V1857) (cond ((and (cons? V1857) (and (= make-string (hd V1857)) (cons? (tl V1857)))) (shen.mkstr (hd (tl V1857)) (tl (tl V1857)))) (true V1857)))

(defun shen.input-macro (V1859) (cond ((and (cons? V1859) (and (= lineread (hd V1859)) (= () (tl V1859)))) (cons lineread (cons (cons stinput ()) ()))) ((and (cons? V1859) (and (= input (hd V1859)) (= () (tl V1859)))) (cons input (cons (cons stinput ()) ()))) ((and (cons? V1859) (and (= read (hd V1859)) (= () (tl V1859)))) (cons read (cons (cons stinput ()) ()))) ((and (cons? V1859) (and (= input+ (hd V1859)) (and (cons? (tl V1859)) (= () (tl (tl V1859)))))) (cons input+ (cons (hd (tl V1859)) (cons (cons stinput ()) ())))) ((and (cons? V1859) (and (= read-byte (hd V1859)) (= () (tl V1859)))) (cons read-byte (cons (cons stinput ()) ()))) (true V1859)))

(defun shen.compose (V1862 V1863) (cond ((= () V1862) V1863) ((cons? V1862) (shen.compose (tl V1862) ((hd V1862) V1863))) (true (shen.f_error shen.compose))))

(defun shen.compile-macro (V1865) (cond ((and (cons? V1865) (and (= compile (hd V1865)) (and (cons? (tl V1865)) (and (cons? (tl (tl V1865))) (= () (tl (tl (tl V1865)))))))) (cons compile (cons (hd (tl V1865)) (cons (hd (tl (tl V1865))) (cons (cons lambda (cons E (cons (cons if (cons (cons cons? (cons E ())) (cons (cons error (cons "parse error here: ~S~%" (cons E ()))) (cons (cons error (cons "parse error~%" ())) ())))) ()))) ()))))) (true V1865)))

(defun shen.prolog-macro (V1867) (cond ((and (cons? V1867) (= prolog? (hd V1867))) (cons let (cons NPP (cons (cons shen.start-new-prolog-process ()) (cons (let Calls (shen.bld-prolog-call NPP (tl V1867)) (let Vs (shen.extract_vars (tl V1867)) (let External (shen.externally-bound (tl V1867)) (let PrologVs (difference Vs External) (shen.locally-bind-prolog-vs NPP PrologVs Calls))))) ()))))) (true V1867)))

(defun shen.externally-bound (V1873) (cond ((and (cons? V1873) (and (= receive (hd V1873)) (and (cons? (tl V1873)) (= () (tl (tl V1873)))))) (tl V1873)) ((cons? V1873) (union (shen.externally-bound (hd V1873)) (shen.externally-bound (tl V1873)))) (true ())))

(defun shen.locally-bind-prolog-vs (V1891 V1892 V1893) (cond ((= () V1892) V1893) ((cons? V1892) (cons let (cons (hd V1892) (cons (cons shen.newpv (cons V1891 ())) (cons (shen.locally-bind-prolog-vs V1891 (tl V1892) V1893) ()))))) (true (simple-error "implementation error inp locally-bind-prolog-vs"))))

(defun shen.bld-prolog-call (V1906 V1907) (cond ((= () V1907) true) ((and (cons? V1907) (= ! (hd V1907))) (cons cut (cons false (cons V1906 (cons (cons freeze (cons (shen.bld-prolog-call V1906 (tl V1907)) ())) ()))))) ((and (cons? V1907) (and (cons? (hd V1907)) (and (= when (hd (hd V1907))) (and (cons? (tl (hd V1907))) (= () (tl (tl (hd V1907)))))))) (cons fwhen (cons (shen.insert-deref (hd (tl (hd V1907))) V1906) (cons V1906 (cons (cons freeze (cons (shen.bld-prolog-call V1906 (tl V1907)) ())) ()))))) ((and (cons? V1907) (and (cons? (hd V1907)) (and (= is (hd (hd V1907))) (and (cons? (tl (hd V1907))) (and (cons? (tl (tl (hd V1907)))) (= () (tl (tl (tl (hd V1907)))))))))) (cons bind (cons (hd (tl (hd V1907))) (cons (shen.insert-deref (hd (tl (tl (hd V1907)))) V1906) (cons V1906 (cons (cons freeze (cons (shen.bld-prolog-call V1906 (tl V1907)) ())) ())))))) ((and (cons? V1907) (and (cons? (hd V1907)) (and (= receive (hd (hd V1907))) (and (cons? (tl (hd V1907))) (= () (tl (tl (hd V1907)))))))) (shen.bld-prolog-call V1906 (tl V1907))) ((and (cons? V1907) (and (cons? (hd V1907)) (and (= bind (hd (hd V1907))) (and (cons? (tl (hd V1907))) (and (cons? (tl (tl (hd V1907)))) (= () (tl (tl (tl (hd V1907)))))))))) (cons bind (cons (hd (tl (hd V1907))) (cons (shen.insert-lazyderef (hd (tl (tl (hd V1907)))) V1906) (cons V1906 (cons (cons freeze (cons (shen.bld-prolog-call V1906 (tl V1907)) ())) ())))))) ((and (cons? V1907) (and (cons? (hd V1907)) (and (= fwhen (hd (hd V1907))) (and (cons? (tl (hd V1907))) (= () (tl (tl (hd V1907)))))))) (cons fwhen (cons (shen.insert-lazyderef (hd (tl (hd V1907))) V1906) (cons V1906 (cons (cons freeze (cons (shen.bld-prolog-call V1906 (tl V1907)) ())) ()))))) ((cons? V1907) (append (hd V1907) (cons V1906 (cons (cons freeze (cons (shen.bld-prolog-call V1906 (tl V1907)) ())) ())))) (true (simple-error "implementation error in bld-prolog-call"))))

(defun shen.defprolog-macro (V1909) (cond ((and (cons? V1909) (and (= defprolog (hd V1909)) (cons? (tl V1909)))) (compile (lambda Y (shen.<defprolog> Y)) (tl V1909) (lambda Y (shen.prolog-error (hd (tl V1909)) Y)))) (true V1909)))

(defun shen.datatype-macro (V1911) (cond ((and (cons? V1911) (and (= datatype (hd V1911)) (cons? (tl V1911)))) (cons shen.process-datatype (cons (shen.intern-type (hd (tl V1911))) (cons (cons compile (cons (cons lambda (cons X (cons (cons shen.<datatype-rules> (cons X ())) ()))) (cons (shen.rcons_form (tl (tl V1911))) (cons (cons function (cons shen.datatype-error ())) ())))) ())))) (true V1911)))

(defun shen.intern-type (V1913) (intern (cn (str V1913) "#type")))

(defun shen.@s-macro (V1915) (cond ((and (cons? V1915) (and (= @s (hd V1915)) (and (cons? (tl V1915)) (and (cons? (tl (tl V1915))) (cons? (tl (tl (tl V1915)))))))) (cons @s (cons (hd (tl V1915)) (cons (shen.@s-macro (cons @s (tl (tl V1915)))) ())))) ((and (cons? V1915) (and (= @s (hd V1915)) (and (cons? (tl V1915)) (and (cons? (tl (tl V1915))) (and (= () (tl (tl (tl V1915)))) (string? (hd (tl V1915)))))))) (let E (explode (hd (tl V1915))) (if (> (length E) 1) (shen.@s-macro (cons @s (append E (tl (tl V1915))))) V1915))) (true V1915)))

(defun shen.synonyms-macro (V1917) (cond ((and (cons? V1917) (= synonyms (hd V1917))) (cons shen.synonyms-help (cons (shen.rcons_form (shen.curry-synonyms (tl V1917))) ()))) (true V1917)))

(defun shen.curry-synonyms (V1919) (map (lambda X (shen.curry-type X)) V1919))

(defun shen.nl-macro (V1921) (cond ((and (cons? V1921) (and (= nl (hd V1921)) (= () (tl V1921)))) (cons nl (cons 1 ()))) (true V1921)))

(defun shen.assoc-macro (V1923) (cond ((and (cons? V1923) (and (cons? (tl V1923)) (and (cons? (tl (tl V1923))) (and (cons? (tl (tl (tl V1923)))) (element? (hd V1923) (cons @p (cons @v (cons append (cons and (cons or (cons + (cons * (cons do ()))))))))))))) (cons (hd V1923) (cons (hd (tl V1923)) (cons (shen.assoc-macro (cons (hd V1923) (tl (tl V1923)))) ())))) (true V1923)))

(defun shen.let-macro (V1925) (cond ((and (cons? V1925) (and (= let (hd V1925)) (and (cons? (tl V1925)) (and (cons? (tl (tl V1925))) (and (cons? (tl (tl (tl V1925)))) (cons? (tl (tl (tl (tl V1925)))))))))) (cons let (cons (hd (tl V1925)) (cons (hd (tl (tl V1925))) (cons (shen.let-macro (cons let (tl (tl (tl V1925))))) ()))))) (true V1925)))

(defun shen.abs-macro (V1927) (cond ((and (cons? V1927) (and (= /. (hd V1927)) (and (cons? (tl V1927)) (and (cons? (tl (tl V1927))) (cons? (tl (tl (tl V1927)))))))) (cons lambda (cons (hd (tl V1927)) (cons (shen.abs-macro (cons /. (tl (tl V1927)))) ())))) ((and (cons? V1927) (and (= /. (hd V1927)) (and (cons? (tl V1927)) (and (cons? (tl (tl V1927))) (= () (tl (tl (tl V1927)))))))) (cons lambda (tl V1927))) (true V1927)))

(defun shen.cases-macro (V1931) (cond ((and (cons? V1931) (and (= cases (hd V1931)) (and (cons? (tl V1931)) (and (= true (hd (tl V1931))) (cons? (tl (tl V1931))))))) (hd (tl (tl V1931)))) ((and (cons? V1931) (and (= cases (hd V1931)) (and (cons? (tl V1931)) (and (cons? (tl (tl V1931))) (= () (tl (tl (tl V1931)))))))) (cons if (cons (hd (tl V1931)) (cons (hd (tl (tl V1931))) (cons (cons simple-error (cons "error: cases exhausted" ())) ()))))) ((and (cons? V1931) (and (= cases (hd V1931)) (and (cons? (tl V1931)) (cons? (tl (tl V1931)))))) (cons if (cons (hd (tl V1931)) (cons (hd (tl (tl V1931))) (cons (shen.cases-macro (cons cases (tl (tl (tl V1931))))) ()))))) ((and (cons? V1931) (and (= cases (hd V1931)) (and (cons? (tl V1931)) (= () (tl (tl V1931)))))) (simple-error "error: odd number of case elements
")) (true V1931)))

(defun shen.timer-macro (V1933) (cond ((and (cons? V1933) (and (= time (hd V1933)) (and (cons? (tl V1933)) (= () (tl (tl V1933)))))) (shen.let-macro (cons let (cons Start (cons (cons get-time (cons run ())) (cons Result (cons (hd (tl V1933)) (cons Finish (cons (cons get-time (cons run ())) (cons Time (cons (cons - (cons Finish (cons Start ()))) (cons Message (cons (cons shen.prhush (cons (cons cn (cons "
run time: " (cons (cons cn (cons (cons str (cons Time ())) (cons " secs
" ()))) ()))) (cons (cons stoutput ()) ()))) (cons Result ())))))))))))))) (true V1933)))

(defun shen.tuple-up (V1935) (cond ((cons? V1935) (cons @p (cons (hd V1935) (cons (shen.tuple-up (tl V1935)) ())))) (true V1935)))

(defun shen.put/get-macro (V1937) (cond ((and (cons? V1937) (and (= put (hd V1937)) (and (cons? (tl V1937)) (and (cons? (tl (tl V1937))) (and (cons? (tl (tl (tl V1937)))) (= () (tl (tl (tl (tl V1937)))))))))) (cons put (cons (hd (tl V1937)) (cons (hd (tl (tl V1937))) (cons (hd (tl (tl (tl V1937)))) (cons (cons value (cons *property-vector* ())) ())))))) ((and (cons? V1937) (and (= get (hd V1937)) (and (cons? (tl V1937)) (and (cons? (tl (tl V1937))) (= () (tl (tl (tl V1937)))))))) (cons get (cons (hd (tl V1937)) (cons (hd (tl (tl V1937))) (cons (cons value (cons *property-vector* ())) ()))))) ((and (cons? V1937) (and (= unput (hd V1937)) (and (cons? (tl V1937)) (and (cons? (tl (tl V1937))) (= () (tl (tl (tl V1937)))))))) (cons unput (cons (hd (tl V1937)) (cons (hd (tl (tl V1937))) (cons (cons value (cons *property-vector* ())) ()))))) (true V1937)))

(defun shen.function-macro (V1939) (cond ((and (cons? V1939) (and (= function (hd V1939)) (and (cons? (tl V1939)) (= () (tl (tl V1939)))))) (shen.function-abstraction (hd (tl V1939)) (arity (hd (tl V1939))))) (true V1939)))

(defun shen.function-abstraction (V1942 V1943) (cond ((= 0 V1943) (simple-error (shen.app V1942 " has no lambda form
" shen.a))) ((= -1 V1943) (cons function (cons V1942 ()))) (true (shen.function-abstraction-help V1942 V1943 ()))))

(defun shen.function-abstraction-help (V1947 V1948 V1949) (cond ((= 0 V1948) (cons V1947 V1949)) (true (let X (gensym V) (cons /. (cons X (cons (shen.function-abstraction-help V1947 (- V1948 1) (append V1949 (cons X ()))) ())))))))

(defun undefmacro (V1951) (let MacroReg (value shen.*macroreg*) (let Pos (shen.findpos V1951 MacroReg) (let Remove1 (set shen.*macroreg* (remove V1951 MacroReg)) (let Remove2 (set *macros* (shen.remove-nth Pos (value *macros*))) V1951)))))

(defun shen.findpos (V1961 V1962) (cond ((= () V1962) (simple-error (shen.app V1961 " is not a macro
" shen.a))) ((and (cons? V1962) (= (hd V1962) V1961)) 1) ((cons? V1962) (+ 1 (shen.findpos V1961 (tl V1962)))) (true (shen.f_error shen.findpos))))

(defun shen.remove-nth (V1967 V1968) (cond ((and (= 1 V1967) (cons? V1968)) (tl V1968)) ((cons? V1968) (cons (hd V1968) (shen.remove-nth (- V1967 1) (tl V1968)))) (true (shen.f_error shen.remove-nth))))



